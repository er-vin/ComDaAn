From aseigo@kde.org  Thu Jul 24 20:24:24 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id A4613B37D66
 for <funq-devel@kde.org>; Thu, 24 Jul 2014 20:24:18 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id AE8262DC040
 for <funq-devel@kde.org>; Thu, 24 Jul 2014 14:24:17 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: mailing list is live
Date: Thu, 24 Jul 2014 22:24:08 +0200
Message-ID: <13022342.kSPgPpGr47@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.12.60; i686;
 git-95c820f; 2014-03-05)
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2314545.KPO9u867mf";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Thu, 24 Jul 2014 20:24:24 -0000


--nextPart2314545.KPO9u867mf
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

Hello!

Everyone should now be subscribed to the mailing list ... if you got th=
is=20
email, then all is well. This will both save us from having to CC each =
other=20
and give us a nice archive to look back on if needed.

I'll send out an email in the morning with some more detailed info on t=
he=20
language design along with with pointers to what would be most helpful =
to get=20
feedback on first .. and then we can take it from there.

I don't intend this mailing list to be very high-traffic, at least from=
 my side.=20
I'll post once or twice a week with updates, in addition to responding =
to=20
whatever feedback comes in of course.

Cheers ...

=2D-=20
Aaron J. Seigo
--nextPart2314545.KPO9u867mf
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPRa20ACgkQ1rcusafx20OrLQCfa50eZAUuyw9USrwXoFI2GO9f
mc0An3QY1JT7sUMsY5NhWWdI9+GRMEWa
=o0xj
-----END PGP SIGNATURE-----

--nextPart2314545.KPO9u867mf--


From aseigo@kde.org  Fri Jul 25 08:53:15 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 5AAD4B37318
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 08:53:09 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 223DF2DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 02:53:08 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 10:53:05 +0200
Message-ID: <7068387.NbvooaTEQg@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.12.60; i686;
 git-95c820f; 2014-03-05)
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart5431308.M7k31mCP92";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 08:53:15 -0000


--nextPart5431308.M7k31mCP92
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

Hi ...

So .. first things first: the git url I included only works for people =
who have=20
a KDE commit account. Sorry about that :) Here is the public url that s=
hould=20
work for everyone:

=09git clone git://anongit.kde.org/scratch/aseigo/funq

OK.. so the first thing that I'd really appreciate feedback on is the g=
eneral=20
feel of the funq syntax. While it intends to be a pragmatically functio=
nal=20
language[1], I have tried to make it *look* more familiar. One develope=
r I=20
showed it to without telling them what it was asked if it was Java :)

The intention there is to make it easier for developers mostly familiar=
 with=20
the Algol family of languages (C, C++, Java, Python ...) to be able to=20=

understand and write the code without too much rewiring of their brain.=


The other primary goal with the syntax is to keep it simple through cla=
rity,=20
consistency and trying to always provide "just one way to do things".

So here is the basic anatomy of a funq function:

tags functionName(parameter list) : preconditions
{
=09code block
}

Only the function name and code block are required and they do what one=
 would=20
expect.=20

We can leave function tags for later discussion, but they offer hints t=
o the=20
compiler as to how the function is intended to be used (allowing additi=
onal=20
compiler checks and some useful introspection tricks).

The parameter list supports pattern matching. There is an example of a =
(not=20
very efficient) fibonacci number function in the file:

    fibonacci(1) { 0 }
    fibonacci(2) { 1 }
    fibonacci(x) : std::isType(x, std::Int) && x > 2=20
    {
        fibonacci(x - 1) + fibonacci(x - 2)
    }

These are actually the same function, and which version of them is call=
ed=20
relies on the value of the parameter passed. fibonacci(1) calls the fir=
st=20
version; fibonacci(2) calls the second; calling it with >2 calls the th=
ird=20
version. any non-int or integer less than 1 will result in an error due=
 to no=20
matching function.

Preconditions optionally follow the the parameter list and allow variou=
s=20
boolean checks to be made on the parameters. The third fibonacci functi=
on=20
version checks that x is an integer and greater than 2.

A function version is only called if both the parameter list and precon=
ditions=20
match.

There are no return types; functions are free to return different types=
.

Variables are single-assignment (you can't assign a different value to =
a=20
variable once it is set) and typing is inferred (but not dynamic, due i=
n part=20
to single-assignment). Due to single-assignment, there is no need for a=
=20
comparison operator (=3D=3D). The assignment operator does both assignm=
ent and=20
checking. So:

=09x =3D 1; // x is now 1.. obvious :)
=09x =3D 2; // false!
=091 =3D x; // true!
=09x =3D "An awesome string"; // false!
=09y =3D x; // true! y now also equals 1
=09z =3D 3;=20
=09y =3D z; // false!
=09y =3D x; // true!

In expressions expecting booleans such as the preconditions clause, tru=
e/false=20
is the result of '=3D'. In a function body '=3D' generates no error or =
an error=20
corresponding to true / false. On error a function stops processing and=
=20
returns an error at that point which, if not caught, will result in the=
=20
process it is running in to crash. Sort of like an assert.

That should hopefully give you enough information to be able to get a g=
eneral=20
feel for the code in examples/syntax_samples.fqt=20

I would love to hear your thoughts on:

* what you found not clear enough / easy enough to read

* any inconsistencies you spot

* any ideas for improving readability and ease of writing new code

Nothing is yet set in stone, so we can revise anything we wish. Use a c=
ritical=20
eye, and at this point there are no stupid questions, no bad observatio=
ns, no=20
wrong ideas. I'll take all feedback offered under consideration.

Once syntax is basically "OK" we can move on to more interesting things=
, such=20
as processes. This will likely be an iterative process where we revisit=
 basic=20
syntax as the language features are layered up on it. I've already done=
 a=20
significant number of iterations to just get it this far, and I expect =
several=20
more will be in order. :)



[1] it won't be a "pure" functional language as I feel that, as good as=
 such=20
things are, it creates complexity that may discourage usage by people u=
sed to=20
Qt and C++

=2D-=20
Aaron J. Seigo
--nextPart5431308.M7k31mCP92
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSGvEACgkQ1rcusafx20MtjACgkimUgl6Nv1coonXYhx0kylJa
Fy8AoJ08KDKZFM+Bm19C/dKx7mx+vZmQ
=mbQ6
-----END PGP SIGNATURE-----

--nextPart5431308.M7k31mCP92--


From notmart@gmail.com  Fri Jul 25 09:15:15 2014
Return-Path: <notmart@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22d.google.com (mail-wi0-x22d.google.com
 [IPv6:2a00:1450:400c:c05::22d])
 by postbox.kde.org (Postfix) with ESMTP id D16F81AF6DC5
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 09:15:09 +0000 (UTC)
Received: by mail-wi0-f173.google.com with SMTP id f8so623247wiw.6
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 02:15:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:user-agent:references:in-reply-to:mime-version
 :content-type:content-transfer-encoding:message-id;
 bh=tiw/TCzWz2nlfKf/0vwrC7k36+OMGCL31wVft7ykcP4=;
 b=Zs/ozrFOTu6z3v8e+lwI7kdlKDOjH6nQZeMUWqUxuD/mohHDG+3qakZyuhIwGfTJvy
 i2i94IHxtdz2kMwSxL23PcTIuCS2+CGN5KR6f0Rui2NJ6a0itexAVYMbaYOlU4UAPoay
 7eAHABx7+V8JdKK3VNO2uP4goTnaTq3Y7di7Mn0Uqyys7b9dje8dnBvAgFnZidrzFZJM
 kprDm+6Hc1JYIjx7TtqAGhgJ62Fb4hEf5at5inbbbIXu6pJqai145T9XXdtbqaKuZYlS
 3CoISJpext0gWkn70XaDVfI2auPmiU28fd98Z4sr2OTHo7/qsr5mSKyrrGrcHb2oeIlb
 IuCw==
X-Received: by 10.194.200.3 with SMTP id jo3mr20126322wjc.110.1406279708991;
 Fri, 25 Jul 2014 02:15:08 -0700 (PDT)
Received: from phobos.diaunet
 (host143-134-dynamic.116-80-r.retail.telecomitalia.it. [80.116.134.143])
 by mx.google.com with ESMTPSA id gd13sm3587857wic.6.2014.07.25.02.15.07
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 02:15:08 -0700 (PDT)
From: Marco Martin <notmart@gmail.com>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 11:15:06 +0200
User-Agent: KMail/1.13.7 (Linux/3.7.10-1.1-desktop; KDE/4.11.60; i686; ; )
References: <7068387.NbvooaTEQg@freedom>
In-Reply-To: <7068387.NbvooaTEQg@freedom>
MIME-Version: 1.0
Content-Type: Text/Plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Message-Id: <201407251115.06559.notmart@gmail.com>
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 09:15:15 -0000

On Friday 25 July 2014, Aaron J. Seigo wrote:
> The other primary goal with the syntax is to keep it simple through
> clarity, consistency and trying to always provide "just one way to do
> things".
> 
> So here is the basic anatomy of a funq function:
> 
> tags functionName(parameter list) : preconditions
> {
> 	code block
> }

thinking about it, couldn't this syntax cause a bit of confusion and one may 
ask: why i can't put my piece of imparative code as "code block" ?
is probably not evitable anyways and one would have to just get over it, just 
throwing a quick gut feeling ;)

> Variables are single-assignment (you can't assign a different value to a
> variable once it is set) and typing is inferred (but not dynamic, due in
> part to single-assignment). Due to single-assignment, there is no need for
> a comparison operator (==). The assignment operator does both assignment
> and checking. So:
> 
> 	x = 1; // x is now 1.. obvious :)
> 	x = 2; // false!
> 	1 = x; // true!
> 	x = "An awesome string"; // false!
> 	y = x; // true! y now also equals 1
> 	z = 3;
> 	y = z; // false!
> 	y = x; // true!

again, wouldn't be something like
x = 1;
y = 3;

be interpreted as imperative?


second question on this

x = 1;
x = 1;

so the second line is actually a comparison and returns true.

do the first, that is an assignment "return" something?

like, would

fun()
{
   x = 1;
}

have any meaning whatsoever?

-- 
Marco Martin

From ivan.cukic@gmail.com  Fri Jul 25 09:24:21 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wg0-x231.google.com (mail-wg0-x231.google.com
 [IPv6:2a00:1450:400c:c00::231])
 by postbox.kde.org (Postfix) with ESMTP id 44E1BB37C07
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 09:24:15 +0000 (UTC)
Received: by mail-wg0-f49.google.com with SMTP id k14so3896198wgh.8
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 02:24:15 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=wmlCgcPMsBAB3k+UANwSFF5DvH3FBA3NMIjOhFF65Eg=;
 b=epK3CBCATtXVQvwrSbHck3zKQnmnq8KZTXFlEMhL+wy01iLzM63yosERs6jOmnEuV/
 abUcWH7vpsegVHJiNUQPpmel2v6lZwbUw4uu8XAAO3nkKCwVYpaFaDYqI0gIpWK2ovp3
 MPnnxlxW4FOXE1wun1rQGoUSCzJLT6vhUYmtSLmn2uHE1DkyEEgoaJh8afVBzvd04Dvf
 yiWbJwlo9JcBj3dPyGF9qOl0RuH+CGUFTu0ghjMBzIacOS7L2Gi34U6f/eVCqC9Qa0+B
 F3dvhrMo/E1PGbMCRmaiO4xcw5h11d+3Y5r0mQWPTxaaiDpDxdBuPV7DDTSM0suosqyc
 ERnw==
X-Received: by 10.180.89.143 with SMTP id bo15mr3368178wib.78.1406280254945;
 Fri, 25 Jul 2014 02:24:14 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id fw4sm3632470wib.19.2014.07.25.02.24.13
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 02:24:14 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 11:24:12 +0200
Message-ID: <11251826.85EFoAlLVN@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <7068387.NbvooaTEQg@freedom>
References: <7068387.NbvooaTEQg@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 09:24:21 -0000

Hi Aaron,

> OK.. so the first thing that I'd really appreciate feedback on is the
> general feel of the funq syntax. While it intends to be a pragmatically

General feel - mostly ok, but I do have some issues with it.

> tags functionName(parameter list) : preconditions
> {
> 	code block
> }

1. The first thing I'm concerned about is the colon syntax for preconditions - 
it will be confused for initialization (c++), or typing (pascal, scala). I'd 
rather have an explicit keyword like 'assuming', 'requires', 'assert' or 
similar.

Like:
someFunction(a, b, c)
    requires(a > 0 && b + c < 100)
{
    something here
}

2. What would a function look like if one wants to do explicit typing for 
arguments and/or result?

> Preconditions optionally follow the the parameter list and allow various
> boolean checks to be made on the parameters. The third fibonacci function
> version checks that x is an integer and greater than 2.

3. I'm guessing that preconditions are also involved in pattern matching?

> There are no return types; functions are free to return different types.

4. Related to (2):
 - it seems strange to have a statically typed language where a function can 
return a different type depending on arguments
 - it is useful to have strict compiler-checked typing (even optional) - less 
bugs can get into the code

> part to single-assignment). Due to single-assignment, there is no need for
> a comparison operator (==). The assignment operator does both assignment

While there is no technical need for ==, it doesn't mean that the resulting 
code is readable. It is needed for usability - if you are reading a long 
function and encounter something = 2, you need to go upwards and check whether 
something was already defined or not to see whether it is a new alias or a 
comparison.


Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From notmart@gmail.com  Fri Jul 25 09:36:50 2014
Return-Path: <notmart@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x235.google.com (mail-wi0-x235.google.com
 [IPv6:2a00:1450:400c:c05::235])
 by postbox.kde.org (Postfix) with ESMTP id 2CAC3B37D91
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 09:36:45 +0000 (UTC)
Received: by mail-wi0-f181.google.com with SMTP id bs8so648657wib.14
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 02:36:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:user-agent:references:in-reply-to:mime-version
 :content-type:content-transfer-encoding:message-id;
 bh=qHL4NQP9ygM0T0TFSB1yn7Cp56Ik8j+CDYXrFILQNQY=;
 b=vkHMEjV9dQcm70EL7fTALy0ufotF/hH4VJUit1MbfQPn2F9SYQFzwx8/glZJZartZ+
 PPQR9gP6xQrCdjI5TDdnywUlJDCn0+JA4Be1SlxICT0Tmfx6qwG3IRyC3dbO8OPVYR1v
 p5460Q10ZJixQ6eETzPr0RVBxLNmeRPIWAi5NyX94xXglTCCWvnVpiSUF6Qc3u5UMJxH
 Ef8u/2jX3OsueiVnOlQlPkOr6hX1qjiL9kC+wSKXyY62z6d5v9HAixiPu/9BK/BRoOsP
 E4zLfMuMBTTEZofleYr9G3lbHACd47YYsCIWkujjCk/wKy4WF6AJBZzhzSEGgNZ+jEk5
 UuPQ==
X-Received: by 10.180.103.74 with SMTP id fu10mr3413923wib.47.1406281004932;
 Fri, 25 Jul 2014 02:36:44 -0700 (PDT)
Received: from phobos.diaunet
 (host143-134-dynamic.116-80-r.retail.telecomitalia.it. [80.116.134.143])
 by mx.google.com with ESMTPSA id wd7sm23716248wjc.36.2014.07.25.02.36.43
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 02:36:44 -0700 (PDT)
From: Marco Martin <notmart@gmail.com>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 11:36:41 +0200
User-Agent: KMail/1.13.7 (Linux/3.7.10-1.1-desktop; KDE/4.11.60; i686; ; )
References: <7068387.NbvooaTEQg@freedom> <11251826.85EFoAlLVN@drako>
In-Reply-To: <11251826.85EFoAlLVN@drako>
MIME-Version: 1.0
Content-Type: Text/Plain;
  charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Message-Id: <201407251136.41829.notmart@gmail.com>
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 09:36:50 -0000

On Friday 25 July 2014, Ivan =C4=8Cuki=C4=87 wrote:

> While there is no technical need for =3D=3D, it doesn't mean that the res=
ulting
> code is readable. It is needed for usability - if you are reading a long
> function and encounter something =3D 2, you need to go upwards and check
> whether something was already defined or not to see whether it is a new
> alias or a comparison.
>=20

unless assignment becomes this wacky thing, equivalent to comparison for al=
l=20
intents and purposes:

undefined =3D defined -> returns true, has a sideeffect: the variable that =
was=20
undefined gets assigned the value of defined
defined =3D defined -> returns true iff the two defined variables/values ha=
ve=20
the same value, no sideeffect
defined =3D undefined -> returns false, no sideeffect

not sure is a good thing tough ;)

=2D-=20
Marco Martin

From ivan.cukic@gmail.com  Fri Jul 25 09:50:26 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-we0-x22a.google.com (mail-we0-x22a.google.com
 [IPv6:2a00:1450:400c:c03::22a])
 by postbox.kde.org (Postfix) with ESMTP id C6D9CB3741F
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 09:50:19 +0000 (UTC)
Received: by mail-we0-f170.google.com with SMTP id w62so3923261wes.29
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 02:50:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :mime-version:content-transfer-encoding:content-type;
 bh=XT3QOZUeE9hvo02SViyKhX6V/EX12M87eZJzsy5s6YM=;
 b=kueoLm0dtTtO/JZH1kl8f4ZquW7J2bBUn/u33SP0yW/e6+m+YBFM1UDbfdTSi4Eyui
 4v0mwckt+XQZ3MoPORPTRmjMpFL63aHDpCorx04JeI67rembHtwk4h7zXq2IQpJn3R1S
 dyLuccle1oxygnWwat9lH1omA0CuI05FVPq0UUBcQp29LpA7W2Udd0zyT+LAKciEapKD
 puc+BXM01nPdS5ZiCdHfAqucjI5hC9VckQGqmGBJG7XHai3RWjqzLAy+BLiYN2fS2Ufp
 y0opNnlJXc/duZUjYvZ68ICCRSF3FxBaHMeiaiXzr1nEn7YZH/WkqqK1PWVSLM58RmCB
 Ue5A==
X-Received: by 10.194.62.167 with SMTP id z7mr19616365wjr.112.1406281819317;
 Fri, 25 Jul 2014 02:50:19 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id k19sm3868397wie.20.2014.07.25.02.50.18
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 02:50:18 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Various questions
Date: Fri, 25 Jul 2014 11:50:15 +0200
Message-ID: <5096807.01kQluP1d9@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 09:50:26 -0000

Hi Aaron,

> Variables are single-assignment (you can't assign a different value to a
> variable once it is set) and typing is inferred (but not dynamic, due in

One of the things you always mentioned is that one of the most important parts 
of the project statement is 'what this is *not*'. So, I guess we should 
discuss it for this project as well.

BTW, is funq going to have an introductory page somewhere?


And now, a set of completely unrelated questions:

0. The desired features should be separated into the core language features, 
and those provided by libraries. That way, we are not going to end up with a 
language that is good only for one thing.

1. What is the type definition syntax going to be like

2. Algebraic types definition and support (basic structures like {string, 
string} only go so far)

3. This one could have gone into the syntax discussion
 Why is the receiver of a message on the right side? I do get that it can be 
considered as a more natural way, but since most existing systems are the 
other way round (erlang, akka, haskell-distributed), I'd advise to follow the 
established practices.

4. In order to have a simpler parser (and not 3-passes-or-more like khm++), I 
think it would be wise to prefix function definitions with a keyword, the same 
for 'variables' and such.

5. I'm spoiled by \x -> body (haskell) and (arguments) -> body (like in 
coffeescript) something for lambda definitions. fun(...) { } seems like an 
javascript-inspired overkill.



Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From ivan.cukic@gmail.com  Fri Jul 25 10:18:31 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-we0-x22c.google.com (mail-we0-x22c.google.com
 [IPv6:2a00:1450:400c:c03::22c])
 by postbox.kde.org (Postfix) with ESMTP id 4256BB37C07
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 10:18:26 +0000 (UTC)
Received: by mail-we0-f172.google.com with SMTP id x48so4092107wes.31
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 03:18:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=eLD+xW35IwucRf4c3Zou2nJ6CKPSsoowpaCIPn7UuKo=;
 b=H/sHPoSUZ/w1vPWgLvuRxnYmquzxaUmol8/WzvMAmruSvhaTPUedtGkXExcxroQJsU
 z7P7ugMO+nZ22LM/IwxVsvxs9QQ5vTmTvw66zGyNmCBmrVB3gIQN8+laNJsKAxvtH5oZ
 kZN9Z5ES8oFI688GFJu2CN9Ux6FqplF9PN4ukCNzJYFdVOcq2uYQuQKtkbYbcXACaNKy
 kcHt9fiHRrxJ5UnWRfds78/bZth50FYpWO3nvT6/Y56POlHewpuXz00xGYqQc34wXxjO
 0eAIEIjEInVuXDaYJQHbXym7LILGwqnEPkMpSBye4dEny7Ta0HvJQvO9f3qU98EUB7+Y
 6DmA==
X-Received: by 10.180.210.132 with SMTP id mu4mr3842827wic.18.1406283505979;
 Fri, 25 Jul 2014 03:18:25 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id dj2sm4170821wib.11.2014.07.25.03.18.24
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 03:18:25 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 12:18:22 +0200
Message-ID: <1427835.Ja8sMUkcBs@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <201407251136.41829.notmart@gmail.com>
References: <7068387.NbvooaTEQg@freedom> <11251826.85EFoAlLVN@drako>
 <201407251136.41829.notmart@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 10:18:32 -0000


> undefined = defined -> returns true, has a sideeffect: the variable that was
> undefined gets assigned the value of defined

This should not be seen as a statement at all - so it should not return 
anything. It just defines a substitution value for a specific name. 

That is,
  x = 2; x * x;
does not mean, create a variable x, set its value to 2, and return x*x;

It means x in the formula x*x is the value of 2. Return 2*2.

Here we come to purity of the language. That is, are 
    f(x) + f(x)
and
    y = f(x);
    y + y;
and
    2 * f(x)
equivalent.

Aaron said that we don't want to be totally pure, but in that case we need to 
make a distinction between pure parts and impure ones. If we can count on f in 
above example to be pure, then we can do a graph redux and evaluate f(x) only 
once. (which would make the above examples equivalent.
  

Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From woodsjaya@gmail.com  Fri Jul 25 10:21:30 2014
Return-Path: <woodsjaya@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-yh0-x22d.google.com (mail-yh0-x22d.google.com
 [IPv6:2607:f8b0:4002:c01::22d])
 by postbox.kde.org (Postfix) with ESMTP id B9E53B37D9B
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 10:21:24 +0000 (UTC)
Received: by mail-yh0-f45.google.com with SMTP id 29so2745056yhl.18
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 03:21:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:cc
 :content-type; bh=jyGC9ekgF+PjTqToeThpVzwxM0vDX3BXBv6X4Vv+dqU=;
 b=TyXz8gmucy8TuPGSd/IJnQuX6y9meu3SM6nGh6can5jLiFE6V+ax08H2VzYL5fx3ER
 HAY77CWWk0wNb7mteBZ+JMTvfszSVokRNkyLOMQE+/jTtaWEWShOgdqmu3eXteWyB2VN
 XFut2TSNOIhvtmoeKPCBol9/2puD/nHaY8Wv6zn78dx3JFuu+OkwQHxb/JH4KSwaN/vM
 g8mQkSMleaiv0Deo2hju/PblQjsxwJxHuImfWWS0Q5gZcLfVk68Jx1la/CU2AYI2gJRU
 nGdKA7TDrHO2KMi69c3+TDXjgzHcecyJtdL+KTfSiKzjxlXzxdTff4Hr4B8PQNiJYaiz
 3qrA==
MIME-Version: 1.0
X-Received: by 10.236.50.138 with SMTP id z10mr2168957yhb.176.1406283683849;
 Fri, 25 Jul 2014 03:21:23 -0700 (PDT)
Received: by 10.170.189.136 with HTTP; Fri, 25 Jul 2014 03:21:23 -0700 (PDT)
In-Reply-To: <201407251136.41829.notmart@gmail.com>
References: <7068387.NbvooaTEQg@freedom> <11251826.85EFoAlLVN@drako>
 <201407251136.41829.notmart@gmail.com>
Date: Fri, 25 Jul 2014 06:21:23 -0400
Message-ID: <CABjEcM8W0a_SGn1Hw8DaPewc9FN-bqQLt=nHwp8bXGNqKMya2g@mail.gmail.com>
Subject: Re: funq: syntax that doesn't scare off C++ developers
From: Jay Woods <woodsjaya@gmail.com>
Cc: funq-devel@kde.org
Content-Type: multipart/alternative; boundary=089e01537af26deca204ff01ef96
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 10:21:30 -0000

--089e01537af26deca204ff01ef96
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

It would be interesting if:

defined =3D undefined -> returns false but now defined is undefined.


On Fri, Jul 25, 2014 at 5:36 AM, Marco Martin <notmart@gmail.com> wrote:

> On Friday 25 July 2014, Ivan =C4=8Cuki=C4=87 wrote:
>
> > While there is no technical need for =3D=3D, it doesn't mean that the
> resulting
> > code is readable. It is needed for usability - if you are reading a lon=
g
> > function and encounter something =3D 2, you need to go upwards and chec=
k
> > whether something was already defined or not to see whether it is a new
> > alias or a comparison.
> >
>
> unless assignment becomes this wacky thing, equivalent to comparison for
> all
> intents and purposes:
>
> undefined =3D defined -> returns true, has a sideeffect: the variable tha=
t
> was
> undefined gets assigned the value of defined
> defined =3D defined -> returns true iff the two defined variables/values =
have
> the same value, no sideeffect
> defined =3D undefined -> returns false, no sideeffect
>
> not sure is a good thing tough ;)
>
> --
> Marco Martin
> _______________________________________________
> Funq-devel mailing list
> Funq-devel@kde.org
> https://kde.org/mailman/listinfo/funq-devel
>

--089e01537af26deca204ff01ef96
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>It would be interesting if:<br><br></div>defined =3D =
undefined -&gt; returns false but now defined is undefined.<br></div><div c=
lass=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Fri, Jul 25, 201=
4 at 5:36 AM, Marco Martin <span dir=3D"ltr">&lt;<a href=3D"mailto:notmart@=
gmail.com" target=3D"_blank">notmart@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"">On Friday 25 July 2014, Ivan=
 =C4=8Cuki=C4=87 wrote:<br>
<br>
&gt; While there is no technical need for =3D=3D, it doesn&#39;t mean that =
the resulting<br>
&gt; code is readable. It is needed for usability - if you are reading a lo=
ng<br>
&gt; function and encounter something =3D 2, you need to go upwards and che=
ck<br>
&gt; whether something was already defined or not to see whether it is a ne=
w<br>
&gt; alias or a comparison.<br>
&gt;<br>
<br>
</div>unless assignment becomes this wacky thing, equivalent to comparison =
for all<br>
intents and purposes:<br>
<br>
undefined =3D defined -&gt; returns true, has a sideeffect: the variable th=
at was<br>
undefined gets assigned the value of defined<br>
defined =3D defined -&gt; returns true iff the two defined variables/values=
 have<br>
the same value, no sideeffect<br>
defined =3D undefined -&gt; returns false, no sideeffect<br>
<br>
not sure is a good thing tough ;)<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Marco Martin<br>
</font></span><div class=3D"HOEnZb"><div class=3D"h5">_____________________=
__________________________<br>
Funq-devel mailing list<br>
<a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
<a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D"_blank">h=
ttps://kde.org/mailman/listinfo/funq-devel</a><br>
</div></div></blockquote></div><br></div>

--089e01537af26deca204ff01ef96--

From aseigo@kde.org  Fri Jul 25 10:37:12 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id D41CFB37C07
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 10:37:05 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 0A1872DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 04:37:05 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 12:36:59 +0200
Message-ID: <8854327.ixUDbXxKRM@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <201407251115.06559.notmart@gmail.com>
References: <7068387.NbvooaTEQg@freedom> <201407251115.06559.notmart@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1704088.pudKInniXd";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 10:37:12 -0000


--nextPart1704088.pudKInniXd
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Friday, July 25, 2014 11:15:06 Marco Martin wrote:
> thinking about it, couldn't this syntax cause a bit of confusion and =
one may
> ask: why i can't put my piece of imparative code as "code block" ? is=

> probably not evitable anyways and one would have to just get over it,=
 just
> throwing a quick gut feeling ;)

the biggest reason why not is because the control flow syntax is *extre=
mely*=20
limited. currently i'm only planning on offering if/else. no loops (whi=
le, for,=20
..), no switch statements, ... so the opportunity for writing imperativ=
e style=20
code is pretty limited.

> again, wouldn't be something like
> x =3D 1;
> y =3D 3;
>=20
> be interpreted as imperative?

i'm not toooo worried about where the line is drawn. the point isn't to=
 create=20
the most rigid functional language, but something that is both usable a=
nd=20
pushes .. er .. encourages developers into writing functional style cod=
e.

> second question on this
>=20
> x =3D 1;
> x =3D 1;
>=20
> so the second line is actually a comparison and returns true.

correct

> do the first, that is an assignment "return" something?

yes, the value

> like, would
>=20
> fun()
> {
>    x =3D 1;
> }
>=20
> have any meaning whatsoever?

sure; it would assign 1 to x and then return a value of 1. hopefully th=
e=20
compiler will be smart enough to not actually include the x variable in=
 the=20
resulting generated bytecode :)

i do see the ambiguity you are referring to, however (=3D during assign=
ment, =3D=20
during comparison) ... will work on that.=20

=2D-=20
Aaron J. Seigo
--nextPart1704088.pudKInniXd
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSM04ACgkQ1rcusafx20OzEwCgjR/tBQ+j8CfrWGyzkrLEZ3lh
MRUAnjNnXr4Z4CBuJwChBTVZ8ZCFujix
=m7sM
-----END PGP SIGNATURE-----

--nextPart1704088.pudKInniXd--


From aseigo@kde.org  Fri Jul 25 11:00:40 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 9DD06B373F6
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 11:00:32 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id E98132DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 05:00:31 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 13:00:29 +0200
Message-ID: <2096247.DuPdJTCEio@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <11251826.85EFoAlLVN@drako>
References: <7068387.NbvooaTEQg@freedom> <11251826.85EFoAlLVN@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart3047104.P6BicZoCHe";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 11:00:40 -0000


--nextPart3047104.P6BicZoCHe
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Friday, July 25, 2014 11:24:12 Ivan =C4=8Cuki=C4=87 wrote:
> 1. The first thing I'm concerned about is the colon syntax for precon=
ditions
> - it will be confused for initialization (c++), or typing (pascal, sc=
ala).
> I'd rather have an explicit keyword like 'assuming', 'requires', 'ass=
ert'
> or similar.
>=20
> Like:
> someFunction(a, b, c)
>     requires(a > 0 && b + c < 100)
> {
>     something here
> }

The use of ':' is indeed terse; honestly I simply borrowed that over fr=
om=20
Erlang. A keyword like "requires" is a pretty good idea, though, for th=
e=20
reasons you note. How about "when"? As in:

someFunction(a, b, c) when (a > 0)
{
=09... block ...
}

it's just four keystrokes and when read out loud is exactly how one wou=
ld=20
explain it: "this variant of someFunction runs when a is greater than 0=
"

> 2. What would a function look like if one wants to do explicit typing=
 for
> arguments and/or result?

currently a bit messy ... the preconditions are currently being used fo=
r this=20
but i like it less and less. i'm thinking of simply allowing one to opt=
ionally
state the type in the parameter list.

> > Preconditions optionally follow the the parameter list and allow va=
rious
> > boolean checks to be made on the parameters. The third fibonacci fu=
nction
> > version checks that x is an integer and greater than 2.
>=20
> 3. I'm guessing that preconditions are also involved in pattern match=
ing?

yes. during compilation the param list and preconditions should compile=
 down=20
to a single set of comparisons.

> > There are no return types; functions are free to return different t=
ypes.
>=20
> 4. Related to (2):
>  - it seems strange to have a statically typed language where a funct=
ion can
> return a different type depending on arguments
>  - it is useful to have strict compiler-checked typing (even optional=
) -
> less bugs can get into the code

true, and i keep going back and forth on this one in my head. i want to=
 keep=20
the syntax "terse" and consistent and requiring return types to be defi=
ned or=20
making them optional works against one or the other.

there are many times when having multiple return types is very useful, =
of=20
course. if nothing else, it allows error objects to be treated as a nor=
mal=20
return value rather than an exceptional state like an exception.=20

the other nice result is that it makes many functions type-generic with=
out=20
having to think too much about it. yes, some functional languages have =
the=20
'type type' (e.g. `a) but that is one more concept for the developer to=
 learn=20
and keep straight.

i'm not entirely against return types being defined ... but currently i=
 lean=20
away from them due to the above and the fact that a number of successfu=
l=20
languages also avoid them.

hard one ...

> > part to single-assignment). Due to single-assignment, there is no n=
eed for
> > a comparison operator (=3D=3D). The assignment operator does both a=
ssignment
>=20
> While there is no technical need for =3D=3D, it doesn't mean that the=
 resulting
> code is readable. It is needed for usability - if you are reading a l=
ong
> function and encounter something =3D 2, you need to go upwards and ch=
eck
> whether something was already defined or not to see whether it is a n=
ew
> alias or a comparison.

There are unfortunate ambiguities in having '=3D=3D' present. First the=
 trivial=20
and not-too-bad example:

=09func() { a =3D=3D 2; }

The compiler could throw an "undefined variable" error there. I'd like =
to be=20
able to avoid compiler errors as they slow one down .. that is balanced=
, of=20
course, against this function:

=09func() { a =3D 2; }

doing the "least surprise" thing of returning 2 but being oddly meaning=
less as=20
Marco noted. A compiler error would at least let you know .. but then y=
ou'd=20
also get a compiler warning in that case. So for the trivial case I cou=
ld go=20
either way and think you do have a valid point in terms of usability.

The real problem comes with pattern matching assignment:

=09{ "blue", x } =3D someTuple;

Now it is a combined assignment and comparison. This will generate an e=
rror if=20
the first element of someTuple is not equal to the literal value "blue"=
. If the=20
first element is "blue", then x gets assigned.

Or:

=09y =3D "blue";
=09{ y, x } =3D someTuple;

This is the same as above ... except one variable is already defined an=
d so it=20
is a comparison while the second variable is only now being assigned an=
d so it=20
is being assigned.

Does one use '=3D' or '=3D=3D' there? with pattern matching assignment =
'=3D=3D' becomes=20
not only redundant to '=3D' but rather confusing as to its actual purpo=
se.

Pattern match based assignment is amazingly useful and not hard to get =
the=20
hang of with a little practice. It also shows up in comprehensions, of =
course.=20
So getting rid of '=3D=3D' might indeed be worse for the simple case bu=
t it=20
generates inconsistency with pattern matching thrown in.

=2D-=20
Aaron J. Seigo
--nextPart3047104.P6BicZoCHe
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSOM0ACgkQ1rcusafx20OUvwCfb93NhTHHooIFVlTo73bLexTw
wXwAn02Bc4q91pSg+paqI+167weLmGle
=iiez
-----END PGP SIGNATURE-----

--nextPart3047104.P6BicZoCHe--


From aseigo@kde.org  Fri Jul 25 11:03:36 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 487D1B37C21
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 11:03:29 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 9EC1D2DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 05:03:28 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 13:03:26 +0200
Message-ID: <7372525.8HxIaPWhC0@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <1427835.Ja8sMUkcBs@drako>
References: <7068387.NbvooaTEQg@freedom>
 <201407251136.41829.notmart@gmail.com> <1427835.Ja8sMUkcBs@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2281637.7YzhfUUlm7";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 11:03:36 -0000


--nextPart2281637.7YzhfUUlm7
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Friday, July 25, 2014 12:18:22 Ivan =C4=8Cuki=C4=87 wrote:
> Aaron said that we don't want to be totally pure, but in that case we=
 need
> to make a distinction between pure parts and impure ones. If we can c=
ount
> on f in above example to be pure, then we can do a graph redux and ev=
aluate
> f(x) only once. (which would make the above examples equivalent.

That's a very good point and indeed in this area the language should be=
=20
'purely' functional.=20

So, clarification  time: assignment doesn't return a true/false but res=
ults in=20
success/failure. On success you have the literal value of the variable =
(since=20
it _is_ that value) and on failure you get an error.

=2D-=20
Aaron J. Seigo
--nextPart2281637.7YzhfUUlm7
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSOX4ACgkQ1rcusafx20OQ6gCdFYCFDBXd6xWCtaIw/p4057nT
knYAn3cDBuSKR62L9Yu636Q0YpE4Tz6E
=D+jb
-----END PGP SIGNATURE-----

--nextPart2281637.7YzhfUUlm7--


From aseigo@kde.org  Fri Jul 25 11:48:00 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 2C4B2B37DAE
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 11:47:53 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id B386D2DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 05:47:51 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Various questions
Date: Fri, 25 Jul 2014 13:47:49 +0200
Message-ID: <2512063.mpISTUVVa0@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <5096807.01kQluP1d9@drako>
References: <5096807.01kQluP1d9@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart15635201.40AM0xUgVB";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 11:48:00 -0000


--nextPart15635201.40AM0xUgVB
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Friday, July 25, 2014 11:50:15 Ivan =C4=8Cuki=C4=87 wrote:
> Hi Aaron,
>=20
> > Variables are single-assignment (you can't assign a different value=
 to a
> > variable once it is set) and typing is inferred (but not dynamic, d=
ue in
>=20
> One of the things you always mentioned is that one of the most import=
ant
> parts of the project statement is 'what this is *not*'. So, I guess w=
e
> should discuss it for this project as well.

Agreed ...

So far I've been working with these "nots":

* It is not meant to be a perfect functional language with all the bell=
s and=20
whistles. Simplicity in learning and use trumps complex features. A "pr=
oper /=20
complete" functional language takes too much learning investment and wo=
uld, I=20
fear, produce an odd mix in a combined C++/QML/funq project.

* It is not meant to be the absolutely fastest runtime out there. While=
 I am=20
confident it can be better than, say, Erlang's performance when it come=
s to=20
numeric code and string handling, the goal is not to compete in head-to=
=2Dhead=20
benchmarks with C++ or Java. It just has to be performant enough to all=
ow=20
typical end-user applications to run smoothly on small-ish devices (e.g=
. a=20
hig-end modern smart phone or a low-end netbook). Scientific computing =
this is=20
not :) So when usability or other pragmatics threaten performance by a =
few %,=20
that's ok.

* It is not meant to be separate from Qt. Using Qt will make a *lot* of=
 things=20
much easier in the implementation phases, such as not needing to write =
our own=20
platform independent networking code. Since it is also a goal to make u=
sing=20
funq with QML natural and enjoyable, we need permission to make the des=
ign=20
work well for that use case even if it means reducing how "generic" the=
=20
language is for use without Qt.

(As with everything else at this stage, these are not set in stone; the=
y are=20
simply what I've been using so far to guide me)

> BTW, is funq going to have an introductory page somewhere?

There is also the README.md file in the top level, but it's very concep=
tual=20
rather than providing an actual introduction.=20

There is docs/core_principles.md which is also not really a proper=20
introduction but a summary of pages of brain dumps in my paper notebook=
s. (I=20
probably need to go over that document again at this point to make sure=
=20
everything in there is still accurate)

A proper introduction page is needed, but I've working "backwards" towa=
rds=20
that so far. After lots of sketching and notes on paper, I started with=
 a=20
fairly random collection of syntax examples and kept massaging them unt=
il they=20
didn't look completely like mutant horrors, then started "documenting" =
the=20
syntax with natural language (in the docs/ directory) which led to much=
 more=20
mutant-removal .. eventually things will be settled enough that a prope=
r intro=20
page can be done. Hopefully sooner than later ...

> And now, a set of completely unrelated questions:
>=20
> 0. The desired features should be separated into the core language fe=
atures,
> and those provided by libraries. That way, we are not going to end up=
 with
> a language that is good only for one thing.

Absolutely. The language itself should be very sparse and relatively=20=

featureless, with libraries providing everything that is "actually usef=
ul"=20
such as displaying/logging output (e.g. for debug/warnings), networking=
, file=20
access, database querying, etc.

The core features I want to see in the language include:

* first class functions (obviously :)
* pattern matching and comprehensions
* processes
* message queues
* unit testing framework

the usual bookkeeping details of operators, module definition, etc. nee=
d to be=20
there as well but those are syntactical requirements rather than "featu=
res".

If anyone has anything to add to that list of core features, now is a g=
reat=20
time :)

As for user tinerface, as far as I'm concerned that is QML. funq needs =
to have=20
excellent support for defining and mutating QAbstractItemModels which w=
ill be=20
one of the primary bridges between funq and QML. The other main bridge =
will=20
have to come in the form of a funq<->QmlItem bridge ... I haven't gotte=
n to=20
fleshing out specifics of that, and so only have a vague idea of what i=
t what=20
will be required to allow (for instance) properties in QML to be bound =
to=20
values that are set from funq code.

> 1. What is the type definition syntax going to be like

I'm trying to see if it is reasonable to get away without having a comp=
lex=20
system for this. Haskell's data, for example, is wonderfully powerful b=
ut also=20
low on the "intuitive" scale for those coming to it from a non-function=
al=20
background.

If it is possible to get away with just algebraic types and not have a =
full-
fledged type syntax that would be wonderful in terms of simplicity. So =
thus far=20
I've been avoiding it altogether ...

That isn't to say it won't happen later, I just want to see how far we =
can get=20
without the complexity of one.=20

> 2. Algebraic types definition and support (basic structures like {str=
ing,
> string} only go so far)

Things I know will be in funq:

* Lists with members of variable type
* Structs .. er .. records :)

I have not yet gotten to defining how the latter will look yet. I calle=
d them=20
"struct" since that is hopefully more familiar to C/C++ people than "re=
cord",=20
but a rose by any other name ....

Algebraic types are an underspecified area of funq so far as I've been =
focused=20
on base language syntax and the process model so far. If you want to ta=
ke a=20
swing at this and come up with a syntax draft, that'd be awesome :)

> 3. This one could have gone into the syntax discussion
>  Why is the receiver of a message on the right side? I do get that it=
 can be
> considered as a more natural way, but since most existing systems are=
 the
> other way round (erlang, akka, haskell-distributed), I'd advise to fo=
llow
> the established practices.

tl;dr -> this is because the target audience isn't people who use funct=
ional=20
languages but people who write in C++.

This is actually something I consider to be a usability problem with th=
ose=20
languages.=20

In the Algol family, pretty much *everything* is read left-to-right. Th=
is=20
keeps things simple due to consistency: you can read every line using t=
he same=20
reading direction and see what the code is doing one "word" at a time.

When directionality changes based on the operators or purpose of the co=
de, one=20
needs to first look at the whole statement and then choose their direct=
ion of=20
reading. This may not sound like much to ask, and personally I got very=
 used=20
to it with the various functional languages I've been kicking around th=
is=20
year, but the difference in ease of use that comes from a consistent re=
ad=20
direction became evident to me in early testing with people.

This seems to be a matter of habituation rather than a real human limit=
.=20
(There are even human writing systems where the read direction changes;=
 e.g.=20
words are written one direction and numbers the other!)

So originally I had funq with the "usual" direction for message passing=
=20
(receiver on the left, sender on the right) and comprehensions (value o=
n the=20
left, source list on the right) .. but found it was much less clear to =
those=20
coming from a C/C++ type background . Simply reversing the direction ma=
de it a=20
lot more obvious .. and since "learn it quickly, feels as familiar as=20=

possible" is an important goal for future adoption rates, I went with a=
=20
consistent LtoR read direction even though it is not consistent with wh=
at=20
functional languages usually do.

> 4. In order to have a simpler parser (and not 3-passes-or-more like k=
hm++),
> I think it would be wise to prefix function definitions with a keywor=
d, the
> same for 'variables' and such.

Can you provide an example of this that would work for you?

> 5. I'm spoiled by \x -> body (haskell) and (arguments) -> body (like =
in
> coffeescript) something for lambda definitions. fun(...) { } seems li=
ke an
> javascript-inspired overkill.

You have no idea how many times I've done a global replace of "func" wi=
th ""=20
in my text editor ;)

I have tried "(params) { body }" and people coming from C++ / Java / PH=
P /=20
Javascript etc. seem to get confused by it. Personally I'd prefer the "=
(..)=20
{...}" syntax, but was scared off of it by the results of that testing.=


I'll take this to a new thread.

=2D-=20
Aaron J. Seigo
--nextPart15635201.40AM0xUgVB
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSQ+UACgkQ1rcusafx20PnJwCfZCFwYEp2Vw7kmuxvNlxswin+
kbkAoJzBHiUa4fBXPxM5Mo2THdvsE68I
=5bM1
-----END PGP SIGNATURE-----

--nextPart15635201.40AM0xUgVB--


From ivan.cukic@gmail.com  Fri Jul 25 12:29:31 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22c.google.com (mail-wi0-x22c.google.com
 [IPv6:2a00:1450:400c:c05::22c])
 by postbox.kde.org (Postfix) with ESMTP id 7B723B37318
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 12:29:25 +0000 (UTC)
Received: by mail-wi0-f172.google.com with SMTP id n3so892351wiv.11
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 05:29:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=jdp7WoqEhl5D84DuwAxKmhEWuovXsXercuFg7zpRCcM=;
 b=IVRGyBiBAf3TqJdYXDgIo14MlBt4QNGFY4XsjfiF8V8yMIEsYQhz4/D7LVAhNNfNyn
 lg8iRt4Z3w5Xu27CsdbPALoOgkP3QZozCu9Bjb/f1sTqyds+JE4wEONF3aVNbjqNh/I/
 mMjg+Kl4Qn/N2jxx6h7eiGm/K0PwD1vWt7ULvXOCdVAi+MybZAdoSRV3iaXWKsanTz/1
 KTpT8rnvS2CEtO7lRUBajAtKTiO+Y2I7ScHcaHjZSgCVYTzwyLdHa/kWA+B9GupqVnHu
 M9DRR3BrhAouE9rM09gZIJcjcpKj4jhpDbJUnk/Dw4/XItZz/sM0+lPjrpCQdV+0DCYK
 qWiw==
X-Received: by 10.180.96.97 with SMTP id dr1mr4789666wib.19.1406291365171;
 Fri, 25 Jul 2014 05:29:25 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id bp9sm5443120wib.7.2014.07.25.05.29.23
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 05:29:24 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: Various questions
Date: Fri, 25 Jul 2014 14:29:23 +0200
Message-ID: <2258873.N4GAVECz02@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <2512063.mpISTUVVa0@freedom>
References: <5096807.01kQluP1d9@drako> <2512063.mpISTUVVa0@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 12:29:31 -0000


> So far I've been working with these "nots":
+1 for the items

> * It is not meant to be separate from Qt. Using Qt will make a *lot* of
This one I don't really like all that much, but the reasons behind it are 
sound and I will not complain :)

One additional thing that we'll need to cover at some point is ffi - the way 
to call the C code. (I'm guessing that at this time you're relying on Qt meta-
object system?)

> * first class functions (obviously :)
> * pattern matching and comprehensions
> * processes
> * message queues
> * unit testing framework

 +1

> the usual bookkeeping details of operators, module definition, etc. need to
> be there as well but those are syntactical requirements rather than
> "features".

Custom operators? (so that the message sending operator is not a hard-coded 
into the language syntax, for example)

> > 1. What is the type definition syntax going to be like
> 
> I'm trying to see if it is reasonable to get away without having a complex
> system for this. Haskell's data, for example, is wonderfully powerful but
> also low on the "intuitive" scale for those coming to it from a
> non-functional background.
> 
> If it is possible to get away with just algebraic types and not have a full-
> fledged type syntax that would be wonderful in terms of simplicity. So thus
> far I've been avoiding it altogether ...

We could do something like - define C-like structs, and go for a Either(Int, 
Float, SomeError) as an algebraic type replacement.

> > considered as a more natural way, but since most existing systems are the
> > other way round (erlang, akka, haskell-distributed), I'd advise to follow
> > the established practices.
> 
> tl;dr -> this is because the target audience isn't people who use functional
> languages but people who write in C++.
> 
> This is actually something I consider to be a usability problem with those
> languages.
> 
> In the Algol family, pretty much *everything* is read left-to-right. This

Well, this is debatable.

"Tell Aaron to go pick up the kids" is a completely normal sentence.

The usual object notation of car.turnOn is essentially a message turnOn sent 
to the car. That is, "tell the car to turn itself on", or car ! turnOn, or 
std::cout << "message".

Personally, I can get used to either. But the reason I'm advocating the 
standard approach is simple - it will be easier for funq devs to switch to 
some of the others, and vice-versa.

> > 4. In order to have a simpler parser (and not 3-passes-or-more like
> > khm++),
> > I think it would be wise to prefix function definitions with a keyword,
> > the
> > same for 'variables' and such.
> 
> Can you provide an example of this that would work for you?

I'm currently thinking of a function/lambda definition syntax that would be 
able to cover a lot of evil things. Will post it separately when it is 
finished.

> I have tried "(params) { body }" and people coming from C++ / Java / PHP /
> Javascript etc. seem to get confused by it. Personally I'd prefer the "(..)
> {...}" syntax, but was scared off of it by the results of that testing.

Agreed.


Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From ivan.cukic@gmail.com  Fri Jul 25 12:36:22 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22c.google.com (mail-wi0-x22c.google.com
 [IPv6:2a00:1450:400c:c05::22c])
 by postbox.kde.org (Postfix) with ESMTP id 53632B37318;
 Fri, 25 Jul 2014 12:36:11 +0000 (UTC)
Received: by mail-wi0-f172.google.com with SMTP id n3so898503wiv.5
 for <multiple recipients>; Fri, 25 Jul 2014 05:36:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:cc:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=rbDjSdtIeCcEZ80B4zFglJJ/Hnpeom1QFMFR+LwaKQk=;
 b=x31mMte2vkH0RrXheG1ojWzHbf69/IweQCvejHUhWsRqVRmTjwnb14ezbpYq1pPgkf
 BgqoVS0JYVLStrXW/NLuaL2UGVGCEbHs+qpExAug4Q4Y3af3dUdswk36BspYngfAJeZ2
 m1mwrqtcZhJcwJy8pCl0TM9a0OXy7CsuFficY1aMk57gkRpUfsJ0eQGgEficbuhqypsW
 VoIjt74so4bYC7x5FCYm/k0TGpjowh83QfXVMGB9yoYHtG9L0KRMB8xx3EE3MjnObv9i
 kkYh1vEj2J+UczfDCPpvMD2Hf4IJZ5wej8toY4fdAObSzKjEyf8L0CJNxovv91KOUYmf
 7VLw==
X-Received: by 10.194.62.140 with SMTP id y12mr21623901wjr.27.1406291770997;
 Fri, 25 Jul 2014 05:36:10 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id ez1sm5489029wib.15.2014.07.25.05.36.09
 for <multiple recipients>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 05:36:10 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 14:36:09 +0200
Message-ID: <1458881.4HuZXJURiN@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <2096247.DuPdJTCEio@freedom>
References: <7068387.NbvooaTEQg@freedom> <11251826.85EFoAlLVN@drako>
 <2096247.DuPdJTCEio@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 12:36:22 -0000


> someFunction(a, b, c) when (a > 0)

Something like that could make sense. As I said in the previous mail, I'm 
trying to come up with a sintax that can be terse and expressive.

> > less bugs can get into the code
> 
> true, and i keep going back and forth on this one in my head. i want to keep
> the syntax "terse" and consistent and requiring return types to be defined
> or making them optional works against one or the other.
> 
> there are many times when having multiple return types is very useful, of
> course. if nothing else, it allows error objects to be treated as a normal
> return value rather than an exceptional state like an exception.

You are right, though I'd rather have explicitly stated return types and 
errors - like Either(Real, ParsingError)

> 'type type' (e.g. `a) but that is one more concept for the developer to
> learn and keep straight.

Yes... type classes would be an overkill for the beginning :)

> 	func() { a = 2; }

I'd propose then a keyword equivalent to 'auto' in C++, or 'let', or 'val' or 
whatever for definitions. (again, it would make parsing *much* easier - no 
ambiguities)

The problem would be is it
(val x, y) = somePair // matches on y, extracts x
val (x, y) = somePair // extracts both x and y
(val x, val y) = somePair // extracts both x and y
(x, y) = somePair // matches both


Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From aseigo@kde.org  Fri Jul 25 13:21:35 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 2C2111AF6DC5
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 13:21:28 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 155B42DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 07:21:28 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Fri, 25 Jul 2014 15:21:25 +0200
Message-ID: <16554411.TQfEolRGW0@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <1458881.4HuZXJURiN@drako>
References: <7068387.NbvooaTEQg@freedom> <2096247.DuPdJTCEio@freedom>
 <1458881.4HuZXJURiN@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1803512.z4RhFJDxjf";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 13:21:35 -0000


--nextPart1803512.z4RhFJDxjf
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Friday, July 25, 2014 14:36:09 Ivan =C4=8Cuki=C4=87 wrote:
> > someFunction(a, b, c) when (a > 0)
>=20
> Something like that could make sense. As I said in the previous mail,=
 I'm
> trying to come up with a sintax that can be terse and expressive.

Ok; let's go with "when" .. I'll make the changes and push them to the =
repo in=20
a few minutes.

> > there are many times when having multiple return types is very usef=
ul, of
> > course. if nothing else, it allows error objects to be treated as a=
 normal
> > return value rather than an exceptional state like an exception.
>=20
> You are right, though I'd rather have explicitly stated return types =
and
> errors - like Either(Real, ParsingError)

Hm... indeed. I'll have to ponder this some more ...

> > =09func() { a =3D 2; }
>=20
> I'd propose then a keyword equivalent to 'auto' in C++, or 'let', or =
'val'
> or whatever for definitions. (again, it would make parsing *much* eas=
ier -
> no ambiguities)

You've convinced me, esp due to the example you provided below :)

Of these options I prefer 'let' as it says exactly what it is doing and=
 is=20
shorter than "auto"; it's common in functional languages (as you know :=
) ... I=20
don't think "auto" is quite so ingrained into C++ developer's minds yet=
, and=20
other Algol/C-derivatives use different keywords for this (e.g. perl's =
'my' and=20
javascript's 'var') so we should have some wiggle room here.

> The problem would be is it
> (val x, y) =3D somePair // matches on y, extracts x
> val (x, y) =3D somePair // extracts both x and y
> (val x, val y) =3D somePair // extracts both x and y
> (x, y) =3D somePair // matches both

That actually seems completely sane to me right as it is. It does make=20=

extract-with-match clearer without having to read back into the functio=
n for=20
context. No surprises, better chance for compile-time errors.

What does everyone else think?

=2D-=20
Aaron J. Seigo
--nextPart1803512.z4RhFJDxjf
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSWdUACgkQ1rcusafx20NrdwCfQ2nOmdP8urIQXQ3GYk7QxCEi
sBIAnilPEEGN9NSMhs0Nd9/2bTEqlJkd
=O4jv
-----END PGP SIGNATURE-----

--nextPart1803512.z4RhFJDxjf--


From aseigo@kde.org  Fri Jul 25 13:51:54 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 71E65B37318
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 13:51:45 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 719AF2DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 07:51:44 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Various questions
Date: Fri, 25 Jul 2014 15:51:42 +0200
Message-ID: <5161038.rql4GM5l97@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <2258873.N4GAVECz02@drako>
References: <5096807.01kQluP1d9@drako> <2512063.mpISTUVVa0@freedom>
 <2258873.N4GAVECz02@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart5657546.yOFMs94VQ5";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 13:51:54 -0000


--nextPart5657546.yOFMs94VQ5
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Friday, July 25, 2014 14:29:23 Ivan =C4=8Cuki=C4=87 wrote:
> One additional thing that we'll need to cover at some point is ffi - =
the way

Yep.

> to call the C code. (I'm guessing that at this time you're relying on=
 Qt
> meta- object system?)

That will be one bridge that needs to be in place, but that's a VM thin=
g=20
rather than a language level construct .. and making those metaobjects =
behave=20
reasonably like functional objects will be interesting.

I do think it makes sense to allow calling out into C/C++ code directly=
 (too=20
many useful libraries out there..) and is something I'm still researchi=
ng.=20
This wouldn't be very complicated if it weren't for the process, variab=
le and=20
memory models. :)

> > the usual bookkeeping details of operators, module definition, etc.=
 need
> > to
> > be there as well but those are syntactical requirements rather than=

> > "features".
>=20
> Custom operators? (so that the message sending operator is not a hard=
=2Dcoded
> into the language syntax, for example)

I'd like to avoid custom operators due the complexity it can land the u=
ser in.=20
The idea of being able to avoid hard-coding the message send operators =
is=20
reasonable, though. Would have to think about how exposed such a featur=
e would=20
be (or need to be) and the impact it would have at compile- and run-tim=
e

> We could do something like - define C-like structs, and go for a Eith=
er(Int,
> Float, SomeError) as an algebraic type replacement.

+1

> > > considered as a more natural way, but since most existing systems=
 are
> > > the
> > > other way round (erlang, akka, haskell-distributed), I'd advise t=
o
> > > follow
> > > the established practices.
> >=20
> > tl;dr -> this is because the target audience isn't people who use
> > functional languages but people who write in C++.
> >=20
> > This is actually something I consider to be a usability problem wit=
h those
> > languages.
> >=20
> > In the Algol family, pretty much *everything* is read left-to-right=
. This
>=20
> Well, this is debatable.
>=20
> "Tell Aaron to go pick up the kids" is a completely normal sentence.
>=20
> The usual object notation of car.turnOn is essentially a message turn=
On sent
> to the car. That is, "tell the car to turn itself on", or car ! turnO=
n, or
> std::cout << "message".

Yes, this describes the order of operations in the syntax .. but the or=
der of=20
the human reading it is still LTR, even with std::out. I'm trying to op=
timize=20
for developer reading direction and don't quite care as much for notati=
on=20
order. I suspect that the "odd" operator order of iostreams (right-to-l=
eft)=20
was motivated by this same principle: the developer reads from left-to-=
right=20
the order that things will appear.=20

> Personally, I can get used to either. But the reason I'm advocating t=
he
> standard approach is simple - it will be easier for funq devs to swit=
ch to
> some of the others, and vice-versa.

This is true; but I'm more concerned about getting people to use funq i=
n the=20
first place.

> > > 4. In order to have a simpler parser (and not 3-passes-or-more li=
ke
> > > khm++),
> > > I think it would be wise to prefix function definitions with a ke=
yword,
> > > the
> > > same for 'variables' and such.
> >=20
> > Can you provide an example of this that would work for you?
>=20
> I'm currently thinking of a function/lambda definition syntax that wo=
uld be
> able to cover a lot of evil things. Will post it separately when it i=
s
> finished.

Look forward to it :)

=2D-=20
Aaron J. Seigo
--nextPart5657546.yOFMs94VQ5
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSYO4ACgkQ1rcusafx20PglgCfa0Q8nkukS8iZsDOJQ6OWCkSz
7sQAn3o+wV66y8nQhxfqanaxVwCgnwVP
=USee
-----END PGP SIGNATURE-----

--nextPart5657546.yOFMs94VQ5--


From aseigo@kde.org  Fri Jul 25 13:58:34 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 96849B37D85
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 13:58:28 +0000 (UTC)
Received: from freedom.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id A9D642DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 07:58:27 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Quick survey: func(..) {..}  versus (..) {..}
Date: Fri, 25 Jul 2014 15:58:25 +0200
Message-ID: <3927031.xLL8ZEpcKd@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart6150803.LfRCk4R1KB";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 13:58:34 -0000


--nextPart6150803.LfRCk4R1KB
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

Quick question time!=20

How do you feel this:

=3D=3D=3D=3D=3D=3D=3D
myFunction()
{
=09let Bar =3D func() { true; }
=09Bar();
}

receiver func(PID, $auth, message) { ... }
=3D=3D=3D=3D=3D=3D=3D

compares to this:

=3D=3D=3D=3D=3D=3D=3D
myFunction()
{
=09let Bar =3D () { true; }
=09Bar();
}

receiver (PID, $auth, message) { ... }
=3D=3D=3D=3D=3D=3D=3D


for readability and clarity?


Pros of func():
=09* makes it clear that this is a function declaration

Pros of ():
=09* no reserved words
=09* less typing and reading=20

=2D-=20
Aaron J. Seigo
--nextPart6150803.LfRCk4R1KB
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPSYoEACgkQ1rcusafx20P6KACfX8fOPM2XwdfFDdV9NqQPZ8Nh
/BEAnjDwq1jud5C2VEH9jT3q5dKmssVN
=1N+p
-----END PGP SIGNATURE-----

--nextPart6150803.LfRCk4R1KB--


From woodsjaya@gmail.com  Fri Jul 25 14:10:58 2014
Return-Path: <woodsjaya@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-yh0-x22b.google.com (mail-yh0-x22b.google.com
 [IPv6:2607:f8b0:4002:c01::22b])
 by postbox.kde.org (Postfix) with ESMTP id 1FFF4B37DA9;
 Fri, 25 Jul 2014 14:10:46 +0000 (UTC)
Received: by mail-yh0-f43.google.com with SMTP id 29so2962301yhl.2
 for <multiple recipients>; Fri, 25 Jul 2014 07:10:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=TTYGGlp9dHadHZ+ZP+okx2o2mYuvw0yIWASJt1nz+gI=;
 b=k3d8z4w6Jlo8HDwQ56GHhUEECitvQV/kdfwiI0PxeckoCQwV2OEPL5yBxV/0+MEPyW
 dF47DeAAJutchs3eEmrG3uw9XHqiPJCAqZ/GarZ8gOXvUJS3/JBdS8AHPqSUnNdypEDx
 5o8rCO41hvXgHPQp/kaN9GFNyRI9+MNKELTU3AkHVGg8ur+Fjxj3NJDKGABbuLlyuMvv
 mN0k5fxMJ35Kaaeo5HW0BVkUoNU58oC0kML4OPObQ1QCqP/HLoInGxsfTxkHNiWykKPl
 Cv1CF3tBf6ci+DQIhWbP6o2/ru4nVR54UXAbLf1V2vPlDlq6BX9KRGoI7DVU75i3Yv75
 jF9Q==
MIME-Version: 1.0
X-Received: by 10.236.7.109 with SMTP id 73mr11838376yho.148.1406297446375;
 Fri, 25 Jul 2014 07:10:46 -0700 (PDT)
Received: by 10.170.189.136 with HTTP; Fri, 25 Jul 2014 07:10:46 -0700 (PDT)
In-Reply-To: <3927031.xLL8ZEpcKd@freedom>
References: <3927031.xLL8ZEpcKd@freedom>
Date: Fri, 25 Jul 2014 10:10:46 -0400
Message-ID: <CABjEcM-BOZo47scEyaYCwymNkc85qF83eXQLpVGe2BDxZuZghA@mail.gmail.com>
Subject: Re: Quick survey: func(..) {..} versus (..) {..}
From: Jay Woods <woodsjaya@gmail.com>
To: "Aaron J. Seigo" <aseigo@kde.org>, funq-devel@kde.org
Content-Type: multipart/alternative; boundary=001a1133cbaebd7e4304ff05230a
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 14:10:58 -0000

--001a1133cbaebd7e4304ff05230a
Content-Type: text/plain; charset=UTF-8

Definitely with func.

In the future, it can always be made optional (for use by the novice and
pretty print).


On Fri, Jul 25, 2014 at 9:58 AM, Aaron J. Seigo <aseigo@kde.org> wrote:

> Quick question time!
>
> How do you feel this:
>
> =======
> myFunction()
> {
>         let Bar = func() { true; }
>         Bar();
> }
>
> receiver func(PID, $auth, message) { ... }
> =======
>
> compares to this:
>
> =======
> myFunction()
> {
>         let Bar = () { true; }
>         Bar();
> }
>
> receiver (PID, $auth, message) { ... }
> =======
>
>
> for readability and clarity?
>
>
> Pros of func():
>         * makes it clear that this is a function declaration
>
> Pros of ():
>         * no reserved words
>         * less typing and reading
>
> --
> Aaron J. Seigo
> _______________________________________________
> Funq-devel mailing list
> Funq-devel@kde.org
> https://kde.org/mailman/listinfo/funq-devel
>
>

--001a1133cbaebd7e4304ff05230a
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Definitely with func. </div><div>=C2=A0</div><div>In =
the future, it can always be made optional (for use by the novice and prett=
y print).</div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
_quote">
On Fri, Jul 25, 2014 at 9:58 AM, Aaron J. Seigo <span dir=3D"ltr">&lt;<a hr=
ef=3D"mailto:aseigo@kde.org" target=3D"_blank">aseigo@kde.org</a>&gt;</span=
> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bo=
rder-left:1px #ccc solid;padding-left:1ex">
Quick question time!<br>
<br>
How do you feel this:<br>
<br>
=3D=3D=3D=3D=3D=3D=3D<br>
myFunction()<br>
{<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 let Bar =3D func() { true; }<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Bar();<br>
}<br>
<br>
receiver func(PID, $auth, message) { ... }<br>
=3D=3D=3D=3D=3D=3D=3D<br>
<br>
compares to this:<br>
<br>
=3D=3D=3D=3D=3D=3D=3D<br>
myFunction()<br>
{<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 let Bar =3D () { true; }<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Bar();<br>
}<br>
<br>
receiver (PID, $auth, message) { ... }<br>
=3D=3D=3D=3D=3D=3D=3D<br>
<br>
<br>
for readability and clarity?<br>
<br>
<br>
Pros of func():<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 * makes it clear that this is a function declar=
ation<br>
<br>
Pros of ():<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 * no reserved words<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 * less typing and reading<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Aaron J. Seigo</font></span><br>___________________________________________=
____<br>
Funq-devel mailing list<br>
<a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
<a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D"_blank">h=
ttps://kde.org/mailman/listinfo/funq-devel</a><br>
<br></blockquote></div><br></div>

--001a1133cbaebd7e4304ff05230a--

From ivan.cukic@gmail.com  Fri Jul 25 16:11:12 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22a.google.com (mail-wi0-x22a.google.com
 [IPv6:2a00:1450:400c:c05::22a])
 by postbox.kde.org (Postfix) with ESMTP id E8F40B37DB2
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 16:11:06 +0000 (UTC)
Received: by mail-wi0-f170.google.com with SMTP id f8so1351684wiw.3
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 09:11:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :mime-version:content-transfer-encoding:content-type;
 bh=whYYnp0kkg3BAr7aEmCQS4u2106E/iQxwS2Yiar1pl4=;
 b=xY9OXPW38m0EHAA8IyaMoNX4Palpu6iNPifHOeuDMAdndMx+aKSJWzDDT12BLcC5TL
 fH7Iq6qRoSem1Ot9ED/eBs6Zhmmyce605gay5nnB5Djm8VPvVElHLMTGCB9s5RHulM9D
 nWajm0mpK+VXjWyGfOgrmq/3TJg8EoWbEOc8QTZkyIqv8fCOJyEuWpWTNxyQh9+EfyZB
 Q8rKDZabUrul/RLRCEI4w1XMpVFmhMUxaBo2Zi+ZywbE26XkL8Tbvky3MfnUSEXtqK1Z
 qy+2bS1kFzsdwe0Ob2iFC60BmJbg0vhzBIJ9BZ6SHzpEq5wqI8/q1D9/ILE/nH0sNkhZ
 oFag==
X-Received: by 10.180.75.230 with SMTP id f6mr6642133wiw.5.1406304666039;
 Fri, 25 Jul 2014 09:11:06 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id lg7sm10934760wjb.9.2014.07.25.09.11.04
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 25 Jul 2014 09:11:05 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Function definition
Date: Fri, 25 Jul 2014 18:11:02 +0200
Message-ID: <11720789.3hBYssZlgt@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 16:11:12 -0000

Hi all,

This is one of the things I was thinking about. (I completely understand why 
C++ committee ended up with a not so terse syntax for lambdas :) )

Full syntax:

fun functionName(arg1, arg2, ...) -> Type
    when arg1 > 0 && arg2 < 0,
    tailrec, receiver, test, other_tags_or_annotations
{
    :::
}

Starting comments:

 - Return type is optional and easily parsed. -> is from C++ (and others), it 
could be a colon (:D) or similar.

 - Argument types: because of fun/let and similar, I think that right-side 
types should be preferred. (if Java devs are able to switch to Scala's 
number: Int, I guess c++ people could as well). So:
    let i: Int = 0  // type would be deduced, if not specified (it would not 
be specified most of the time)
    fun f(i: Int, s: String) -> String
A possible alternative would be (I'm just not used to it)
   let Int i = 0
   fun String f(Int i, String s)

 - If we had a special syntax for tags and annotations - something like 
C++11's [[something, something]] or Java's @something, @something, we could 
allow the them in the front as well as after the function head without much 
parsing problems. Something like:
    [[receiver, when a>0]] fun f(a)
as well as
    fun f(a) [[receiver, when a>0]]
    [[receiver]] f(a) [[when a>0]]
but this might be an overkill.

 - Lambdas / Anonymous functions - just skip the functionName (in the 
following examples as well)

 - If the body is a single expression (might be more complicated, but limit to 
this for the time being), and there isn't a type nor tags, we could omit 
brackets like this:
    fun functionName(a,b,c) a + b + c // though this does look strange
    fun (a,b,c) a + b + c // but bear with me

 - If using jokers, the arguments can be omitted as well:
    fun _1 + _2 + _3 // from C++ - std::placeholders
    fun _ + _ + _ // equivalent to the above
    fun _1 + _2 + _1 // if one needs to repeat an argument

 - If we can deduce that a required type at some point is a function, we might 
allow one to skip the 'fun' keyword:
    let product = list.foldl(1, _ * _)
instead of:
    let product = list.foldl(1, fun(acc, i) acc * i)
or, instead of this, if we skip all the terseness modifications:
    let product = list.foldl(1, fun(acc, i) { acc * i; })


Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From samuel.gaist@edeltech.ch  Fri Jul 25 21:19:32 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id F0A52B37C4B
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 21:19:26 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s6PLJQkP005691
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 23:19:26 +0200
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: Quick survey: func(..) {..} versus (..) {..}
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <CABjEcM-BOZo47scEyaYCwymNkc85qF83eXQLpVGe2BDxZuZghA@mail.gmail.com>
Date: Fri, 25 Jul 2014 23:19:25 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <92CE22CB-9977-4D21-AF59-88FBBAA778E6@edeltech.ch>
References: <3927031.xLL8ZEpcKd@freedom>
 <CABjEcM-BOZo47scEyaYCwymNkc85qF83eXQLpVGe2BDxZuZghA@mail.gmail.com>
To: funq-devel@kde.org
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 21:19:32 -0000

+1,

I'd rather have to read and write more if that makes the code easier to =
understand.

On 25 juil. 2014, at 16:10, Jay Woods <woodsjaya@gmail.com> wrote:

> Definitely with func.
> =20
> In the future, it can always be made optional (for use by the novice =
and pretty print).
>=20
>=20
> On Fri, Jul 25, 2014 at 9:58 AM, Aaron J. Seigo <aseigo@kde.org> =
wrote:
> Quick question time!
>=20
> How do you feel this:
>=20
> =3D=3D=3D=3D=3D=3D=3D
> myFunction()
> {
>         let Bar =3D func() { true; }
>         Bar();
> }
>=20
> receiver func(PID, $auth, message) { ... }
> =3D=3D=3D=3D=3D=3D=3D
>=20
> compares to this:
>=20
> =3D=3D=3D=3D=3D=3D=3D
> myFunction()
> {
>         let Bar =3D () { true; }
>         Bar();
> }
>=20
> receiver (PID, $auth, message) { ... }
> =3D=3D=3D=3D=3D=3D=3D
>=20
>=20
> for readability and clarity?
>=20
>=20
> Pros of func():
>         * makes it clear that this is a function declaration
>=20
> Pros of ():
>         * no reserved words
>         * less typing and reading
>=20
> --
> Aaron J. Seigo
> _______________________________________________
> Funq-devel mailing list
> Funq-devel@kde.org
> https://kde.org/mailman/listinfo/funq-devel
>=20
>=20
> _______________________________________________
> Funq-devel mailing list
> Funq-devel@kde.org
> https://kde.org/mailman/listinfo/funq-devel


From samuel.gaist@edeltech.ch  Fri Jul 25 22:17:02 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id BF5B7B37318
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 22:16:56 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s6PMGtCW005045
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 00:16:56 +0200
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: funq: syntax that doesn't scare off C++ developers
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <7068387.NbvooaTEQg@freedom>
Date: Sat, 26 Jul 2014 00:16:55 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <3819D497-78C1-457C-8A15-C210831F71A3@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom>
To: "funq-devel@kde.org" <funq-devel@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 22:17:02 -0000


On 25 juil. 2014, at 10:53, Aaron J. Seigo <aseigo@kde.org> wrote:

> Hi ...
>=20
> So .. first things first: the git url I included only works for people =
who have=20
> a KDE commit account. Sorry about that :) Here is the public url that =
should=20
> work for everyone:
>=20
> 	git clone git://anongit.kde.org/scratch/aseigo/funq
>=20
> OK.. so the first thing that I'd really appreciate feedback on is the =
general=20
> feel of the funq syntax. While it intends to be a pragmatically =
functional=20
> language[1], I have tried to make it *look* more familiar. One =
developer I=20
> showed it to without telling them what it was asked if it was Java :)
>=20
> The intention there is to make it easier for developers mostly =
familiar with=20
> the Algol family of languages (C, C++, Java, Python ...) to be able to=20=

> understand and write the code without too much rewiring of their =
brain.
>=20
> The other primary goal with the syntax is to keep it simple through =
clarity,=20
> consistency and trying to always provide "just one way to do things".
>=20
> So here is the basic anatomy of a funq function:
>=20
> tags functionName(parameter list) : preconditions
> {
> 	code block
> }
>=20
> Only the function name and code block are required and they do what =
one would=20
> expect.=20
>=20
> We can leave function tags for later discussion, but they offer hints =
to the=20
> compiler as to how the function is intended to be used (allowing =
additional=20
> compiler checks and some useful introspection tricks).
>=20
> The parameter list supports pattern matching. There is an example of a =
(not=20
> very efficient) fibonacci number function in the file:
>=20
>    fibonacci(1) { 0 }
>    fibonacci(2) { 1 }
>    fibonacci(x) : std::isType(x, std::Int) && x > 2=20
>    {
>        fibonacci(x - 1) + fibonacci(x - 2)
>    }
>=20
> These are actually the same function, and which version of them is =
called=20
> relies on the value of the parameter passed. fibonacci(1) calls the =
first=20
> version; fibonacci(2) calls the second; calling it with >2 calls the =
third=20
> version. any non-int or integer less than 1 will result in an error =
due to no=20
> matching function.
>=20
> Preconditions optionally follow the the parameter list and allow =
various=20
> boolean checks to be made on the parameters. The third fibonacci =
function=20
> version checks that x is an integer and greater than 2.
>=20
> A function version is only called if both the parameter list and =
preconditions=20
> match.
>=20
> There are no return types; functions are free to return different =
types.
>=20
> Variables are single-assignment (you can't assign a different value to =
a=20
> variable once it is set) and typing is inferred (but not dynamic, due =
in part=20
> to single-assignment). Due to single-assignment, there is no need for =
a=20
> comparison operator (=3D=3D). The assignment operator does both =
assignment and=20
> checking. So:
>=20
> 	x =3D 1; // x is now 1.. obvious :)
> 	x =3D 2; // false!
> 	1 =3D x; // true!
> 	x =3D "An awesome string"; // false!
> 	y =3D x; // true! y now also equals 1
> 	z =3D 3;=20
> 	y =3D z; // false!
> 	y =3D x; // true!
>=20
> In expressions expecting booleans such as the preconditions clause, =
true/false=20
> is the result of '=3D'. In a function body '=3D' generates no error or =
an error=20
> corresponding to true / false. On error a function stops processing =
and=20
> returns an error at that point which, if not caught, will result in =
the=20
> process it is running in to crash. Sort of like an assert.
>=20
> That should hopefully give you enough information to be able to get a =
general=20
> feel for the code in examples/syntax_samples.fqt=20
>=20
> I would love to hear your thoughts on:
>=20
> * what you found not clear enough / easy enough to read
>=20
> * any inconsistencies you spot
>=20
> * any ideas for improving readability and ease of writing new code

I was wondering if using std as the name of funq's base library is a =
good choice. C++ developers might think that it's a wrapper of the STL =
library to use in funq.

Samuel=

From aseigo@kde.org  Fri Jul 25 22:23:59 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 856D8B37BF0
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 22:23:53 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 941032DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 16:23:52 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Sat, 26 Jul 2014 00:23:42 +0200
Message-ID: <2186746.nKv0C5qtA8@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <3819D497-78C1-457C-8A15-C210831F71A3@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom>
 <3819D497-78C1-457C-8A15-C210831F71A3@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart6045508.KyRAfWWzyi";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 22:23:59 -0000


--nextPart6045508.KyRAfWWzyi
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, July 26, 2014 00:16:55 Samuel Gaist wrote:
> I was wondering if using std as the name of funq's base library is a =
good
> choice. C++ developers might think that it's a wrapper of the STL lib=
rary
> to use in funq.

actually, that's why i used it .. well, not to confuse people into thin=
king it=20
is an STL wrapper, but because it is a familiar name for the standard l=
ibrary.=20
comfort through familiarity.

it needs to be namespaced (i truly dislike using languages that pollute=
 the=20
global namespace with their standard library ...)

i'm open to suggestions ...

=2D-=20
Aaron J. Seigo
--nextPart6045508.KyRAfWWzyi
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPS2PQACgkQ1rcusafx20MW3QCfao1zf2dlxzpTa9Puv41ZoMXZ
oWIAnjOXAsHwtY83W3c9pemstxqn69Od
=QuiY
-----END PGP SIGNATURE-----

--nextPart6045508.KyRAfWWzyi--


From samuel.gaist@edeltech.ch  Fri Jul 25 22:49:06 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id 309B2B3735F
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 22:49:01 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s6PMn0k2004179
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 00:49:00 +0200
Content-Type: text/plain; charset=windows-1252
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: funq: syntax that doesn't scare off C++ developers
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <2186746.nKv0C5qtA8@freedom>
Date: Sat, 26 Jul 2014 00:48:59 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom>
 <3819D497-78C1-457C-8A15-C210831F71A3@edeltech.ch>
 <2186746.nKv0C5qtA8@freedom>
To: "funq-devel@kde.org" <funq-devel@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 22:49:06 -0000


On 26 juil. 2014, at 00:23, "Aaron J. Seigo" <aseigo@kde.org> wrote:

> On Saturday, July 26, 2014 00:16:55 Samuel Gaist wrote:
>> I was wondering if using std as the name of funq's base library is a =
good
>> choice. C++ developers might think that it's a wrapper of the STL =
library
>> to use in funq.
>=20
> actually, that's why i used it .. well, not to confuse people into =
thinking it=20
> is an STL wrapper, but because it is a familiar name for the standard =
library.=20
> comfort through familiarity.
>=20
> it needs to be namespaced (i truly dislike using languages that =
pollute the=20
> global namespace with their standard library ...)
>=20
> i'm open to suggestions =85
>=20

I see your point and find it good however that one might be a bit too =
familiar.

When you say namespaced, do you mean something like:
=20
qore.std.debug::log(z)

?



From aseigo@kde.org  Fri Jul 25 22:54:42 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 7D25EB3735F
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 22:54:36 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id ABD2D2DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 16:54:35 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 00:54:33 +0200
Message-ID: <1438966.cdAxmUk3am@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <11720789.3hBYssZlgt@drako>
References: <11720789.3hBYssZlgt@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart6260120.Wkqem187IE";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 25 Jul 2014 22:54:42 -0000


--nextPart6260120.Wkqem187IE
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Friday, July 25, 2014 18:11:02 Ivan =C4=8Cuki=C4=87 wrote:
> fun functionName(arg1, arg2, ...) -> Type
>     when arg1 > 0 && arg2 < 0,
>     tailrec, receiver, test, other_tags_or_annotations
> {
>=20
> }

Hopefully we don't have to mark functions as recursive (tail or otherwi=
se)...=20
that said ...

I actually had tags post-fixed at one point as in your example. didn't =
test=20
very well. Kevin pointed out that nearly all analogs in C++ are prefix.=


I dropped 'func' (or 'fun', whichever :) from top-level functions since=
 there=20
is no possible ambiguity there. It is only necessary when creating a fu=
nction=20
for assignment. but there's no particular harm to having them there if =
it=20
helps make things clearer for people.

If return types get added to functions, i'd like them prefixed for C-is=
hness.=20
i'm convinced that familiarity is absolutely key to getting adoption.

(Also, '->' is also intended for message passing, and so far i've been =
trying=20
to redundancies out: one way to do things, each thing does one thing.)

So.. Return types .. I need to do some "pro's and con's" about them and=
 come=20
back to this. If you have a list already, please share :)

>  - Argument types: because of fun/let and similar, I think that right=
=2Dside
> types should be preferred. (if Java devs are able to switch to Scala'=
s
> number: Int, I guess c++ people could as well). So:

It is more important that things look familiar. There will already be e=
nough=20
new things to learn, everything that doesn't absolutely have to be diff=
erent=20
should remain the same. It needs to feel comfortable, even though they =
are in=20
a slightly different world.

>     let i: Int =3D 0  // type would be deduced, if not specified (it =
would not
> be specified most of the time)
>     fun f(i: Int, s: String) -> String
> A possible alternative would be (I'm just not used to it)
>    let Int i =3D 0
>    fun String f(Int i, String s)

One of the nice opportunities in stepping away from C++ is getting away=
 from=20
the explicit typing of variables. Let the runtime infer them. "i =3D 0"=
 is=20
already clear that it is an integer (e.g.). One of the real downsides o=
f=20
explicit typing is one then needs to track the history of every assignm=
ent:

=09let int a =3D foo();

does foo() return an int? should we care? what if it returns an error a=
nd we=20
want to actually handle that rather than generate another error because=
 the=20
error doesn't match the declared type of a? This path will lead us to "=
auto"=20
;)

=09let int a =3D foo(); // apparently foo returns int :)
=09... 20 lines of code ...
=09let <?> b =3D a;

To know the type for b we have to go back and see what we did for a. Un=
less=20
there are significant benefits to explicit typing, I'd like to avoid it=
 for=20
simplicity of usage. I don't like having it optional, either, (an "impl=
icity=20
auto") because then we have some code written one way and some another.=


I do like optional typing of parameters; it adds to the pattern matchin=
g=20
capabilities and removes the need to use ugly precondition clauses for =
it=20
instead. It doesn't really add anything but clarity. So ... added :)

>  - If we had a special syntax for tags and annotations - something li=
ke
> C++11's [[something, something]] or Java's @something, @something, we=
 could
> allow the them in the front as well as after the function head withou=
t much
> parsing problems. Something like:

Do prefix tags cause ambiguities that will get in the way of parsing? E=
very use=20
I've tried thus far seems unambiguous, but maybe I've missed some cases=
.

>  - If using jokers, the arguments can be omitted as well:
>     fun _1 + _2 + _3 // from C++ - std::placeholders
>     fun _ + _ + _ // equivalent to the above
>     fun _1 + _2 + _1 // if one needs to repeat an argument

Too many rules for people to learn. Simplicity, even when it hurts, wil=
l be=20
key to making something people (inc. average and/or enthusiast develope=
rs) are=20
willing to pick up and use. Simplicity, consistency ... because getting=
 people=20
to use a kind-of functional language that asks you to split your app in=
to a=20
dozen processes is already radical enough

=2D-=20
Aaron J. Seigo
--nextPart6260120.Wkqem187IE
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPS4CkACgkQ1rcusafx20MNhgCdE+Bvz03+6mGRnZ2XncovgKPe
84AAoImZ28cKWCv/S3AuTNq2ynyR+zYb
=5NTB
-----END PGP SIGNATURE-----

--nextPart6260120.Wkqem187IE--


From aseigo@kde.org  Sat Jul 26 05:51:23 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id F064EB37C4B
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 05:51:16 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id EB2572DC040
 for <funq-devel@kde.org>; Fri, 25 Jul 2014 23:51:15 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Sat, 26 Jul 2014 07:51:02 +0200
Message-ID: <2995659.nvtENVVDeB@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom> <2186746.nKv0C5qtA8@freedom>
 <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2909468.JI8OgDZ2DI";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 05:51:23 -0000


--nextPart2909468.JI8OgDZ2DI
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, July 26, 2014 00:48:59 Samuel Gaist wrote:
> When you say namespaced, do you mean something like:
>=20
> qore.std.debug::log(z)

Exactly. The goals are:

* not too much to type (though autocomplete in editors helps a lot)
* won't conflict with your application code by accident

Funny story: one of the languages I spent a fair amount of time with wh=
ile=20
researching for this project was Erlang. Its standard library of module=
s are=20
not namespaced. One of them is called "user". Guess what happens if you=
 have a=20
module called "user"? ;)

=2D-=20
Aaron J. Seigo
--nextPart2909468.JI8OgDZ2DI
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTQdAACgkQ1rcusafx20NTYwCfVmOrAxL0dwT/n1vPSTqtu3uC
xPwAoJiew6iJRIyP31plsOft8zDWv1/8
=dEtc
-----END PGP SIGNATURE-----

--nextPart2909468.JI8OgDZ2DI--


From ivan.cukic@gmail.com  Sat Jul 26 07:08:59 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-we0-x234.google.com (mail-we0-x234.google.com
 [IPv6:2a00:1450:400c:c03::234])
 by postbox.kde.org (Postfix) with ESMTP id E4C8DB37C2C
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 07:08:52 +0000 (UTC)
Received: by mail-we0-f180.google.com with SMTP id w61so5180458wes.39
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 00:08:52 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=eP9yEQHWmb0C7KcSCIqz/wcCAFT7u+0VgSOqr6XDqoA=;
 b=onhKhl3dUTv2pyFt3dL26+HlTIXn3Iev7HyO9I/pIlbVFWMUDUsF5FeGI192q0idGh
 QNEpFhg9i8x83AslWgiYWQrd+D2bmUaINqCtU0iSFnP7POfdYKU3lizNeTACnK9gBf/P
 vdd6O+oJp/NR3115TSLqZx0Nl1bEFdey/GgMl4K48VBGMCWXg805PLNyhM+ciWYKyqm1
 CG9CrK4pN6RGY96FIxHf9PZcm/Kc34sFXZEGBDW8H0wG0HQkbgg5VnxoHkv3Le9yIFWK
 /Alg+inKzAA1Yi/FUVCydI91IX0MvByIDNHGZ8sHQlhomdYqv3kRWnFsBTMQNV4t5fzH
 CTfQ==
X-Received: by 10.180.99.65 with SMTP id eo1mr11969674wib.12.1406358532562;
 Sat, 26 Jul 2014 00:08:52 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id ut2sm31549076wjc.49.2014.07.26.00.08.51
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 26 Jul 2014 00:08:51 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Sat, 26 Jul 2014 09:08:49 +0200
Message-ID: <1982370.eJk1aTGWaH@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom> <2186746.nKv0C5qtA8@freedom>
 <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 07:08:59 -0000


> qore.std.debug::log(z)

Please, just don't put a 'q' everywhere instead of k, c etc. :)


BTW, there is another project called funq - at codeplex... :/



Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From ivan.cukic@gmail.com  Sat Jul 26 07:12:38 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-we0-x22f.google.com (mail-we0-x22f.google.com
 [IPv6:2a00:1450:400c:c03::22f])
 by postbox.kde.org (Postfix) with ESMTP id 95EC2B37C2C
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 07:12:22 +0000 (UTC)
Received: by mail-we0-f175.google.com with SMTP id t60so5207520wes.20
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 00:12:22 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=3AhxVGqCdyVSAcTEPWgJXCwtqIrnJI6v99d4jHDJaHo=;
 b=HOZBc5QRKbCJnD/NJdvOyfeeNgjNt87JLo1z/XXA3oW/oyFj1u6oRIjNtUlDAbv5lj
 2OS6k6sTJKf4UVDp27obAmn0FfQI9ftHwGCBMNedp067eyYoaYrDAtKaUeKjBYQIsBF2
 KPHsaUUWwXBRVA8EPVbY+4OgPEU87rJgAn/Tlppgv2SEi4VuSY/B+qJbXX+Lw1KDk0mF
 xINrXTZygwihQRkN7F1zp9jWho5PuwlvUeOhWD57W7umLq3WfVsZi/JnhaxmrXBlvIPZ
 +JQiv8ODdKrpSzjpdzubaZi+yop7Ge8HTi4+ZjP0XC+qVjMqvaa3YNX2sbCuNzITKpkT
 84uQ==
X-Received: by 10.194.92.148 with SMTP id cm20mr28951298wjb.57.1406358742426; 
 Sat, 26 Jul 2014 00:12:22 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id gi15sm31599234wjc.20.2014.07.26.00.12.21
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 26 Jul 2014 00:12:21 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 09:12:19 +0200
Message-ID: <11075274.sjYH4PJZzd@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <1438966.cdAxmUk3am@freedom>
References: <11720789.3hBYssZlgt@drako> <1438966.cdAxmUk3am@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 07:12:38 -0000


> Hopefully we don't have to mark functions as recursive (tail or
> otherwise)... that said ...

Was not meant as an instruction to the compiler, but as a request to get an 
error if the compiler can not make it into a loop.

Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From samuel.gaist@edeltech.ch  Sat Jul 26 08:57:02 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id B2D06B37C48;
 Sat, 26 Jul 2014 08:56:51 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s6Q8uoRt025176
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO);
 Sat, 26 Jul 2014 10:56:51 +0200
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: funq: syntax that doesn't scare off C++ developers
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <1982370.eJk1aTGWaH@drako>
Date: Sat, 26 Jul 2014 10:56:50 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <8A95096E-DA55-4185-87D7-2D67BDEB66E8@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom> <2186746.nKv0C5qtA8@freedom>
 <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch> <1982370.eJk1aTGWaH@drako>
To: =?utf-8?Q?Ivan_=C4=8Cuki=C4=87?= <ivan.cukic@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
Cc: funq-devel@kde.org
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 08:57:02 -0000


On 26 juil. 2014, at 09:08, Ivan =C4=8Cuki=C4=87 <ivan.cukic@kde.org> =
wrote:

>=20
>> qore.std.debug::log(z)
>=20
> Please, just don't put a 'q' everywhere instead of k, c etc. :)

Sorry, late night typo. I was thinking about quotation and strings at =
the same time.

Which brings this question: python style string ? Meaning single and =
double quote might be used

> BTW, there is another project called funq - at codeplex... :/

And if i've understood correctly, not even related to functional =
programming :/







From samuel.gaist@edeltech.ch  Sat Jul 26 09:14:35 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id 5365FB37C7A
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 09:14:30 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s6Q9ETuo013451
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 11:14:29 +0200
Content-Type: text/plain; charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: funq: syntax that doesn't scare off C++ developers
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <2995659.nvtENVVDeB@freedom>
Date: Sat, 26 Jul 2014 11:14:29 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <2CB658A2-C676-47F0-B19C-98C81E66EC61@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom> <2186746.nKv0C5qtA8@freedom>
 <B3FF8004-E234-47B5-B5D7-01E0BAFEA7D0@edeltech.ch>
 <2995659.nvtENVVDeB@freedom>
To: "funq-devel@kde.org" <funq-devel@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 09:14:35 -0000


On 26 juil. 2014, at 07:51, Aaron J. Seigo <aseigo@kde.org> wrote:

> On Saturday, July 26, 2014 00:48:59 Samuel Gaist wrote:
>> When you say namespaced, do you mean something like:
>>=20
>> qore.std.debug::log(z)
>=20
> Exactly. The goals are:
>=20
> * not too much to type (though autocomplete in editors helps a lot)
> * won't conflict with your application code by accident
>=20
> Funny story: one of the languages I spent a fair amount of time with =
while=20
> researching for this project was Erlang. Its standard library of =
modules are=20
> not namespaced. One of them is called "user". Guess what happens if =
you have a=20
> module called "user"? ;)
>=20

Sounds good

Just to be sure, let say the core namespace is funq, would it look like

public funq 1.0
{
   public std 1.0
   {
       public debug 1.0
       {
               func log(value) { pretty_print(value); }
       }
   }
}

On a side note, is there already a file naming convention ?

Also, how to regroup several fqt files as a library ?=

From ivan.cukic@gmail.com  Sat Jul 26 09:43:36 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x231.google.com (mail-wi0-x231.google.com
 [IPv6:2a00:1450:400c:c05::231])
 by postbox.kde.org (Postfix) with ESMTP id 372D6B37C5F
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 09:43:29 +0000 (UTC)
Received: by mail-wi0-f177.google.com with SMTP id ho1so2113063wib.10
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 02:43:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=bzAhu7OcDtjvsSmusIeZf2rNmtiNcUuP9AeThea5U/M=;
 b=Xe4OMC9lNYMwkzgtF20vkaHgTXmSSywsYhSxLvYpnZIOipgQIWciLPDDP0tEGhYKNL
 VLWBizOcrfCLAgyNTV172l+j57HWam9whYJHMIAOZI4mVs23B4hGt1HWgcOJtNg9hQHj
 G9Tu14AEGanJEYg7sBCVlVRgJu0Pmwtw2QY0QRzVtubeVJCaaVe6DJVyuT4NMq5660kZ
 j/dcUt94OQRuYWrXKGNsfZ6Ms4r90P2zePhG6v0VVdsEcs3VCUpP3QnrkfAJnBppDcJn
 gWoFfU5RJlu7scaYqEVUjSA8b2sF4WamW0W88MXRKE2lILdE82/BbOLc/vUuVlQMQy4d
 Vy/g==
X-Received: by 10.194.189.50 with SMTP id gf18mr29868979wjc.13.1406367809763; 
 Sat, 26 Jul 2014 02:43:29 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id m8sm24084001wjy.35.2014.07.26.02.43.28
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 26 Jul 2014 02:43:29 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 11:43:27 +0200
Message-ID: <1515435.kVbgeNanpH@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <1438966.cdAxmUk3am@freedom>
References: <11720789.3hBYssZlgt@drako> <1438966.cdAxmUk3am@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 09:43:36 -0000

On Saturday 26 July 2014 00:54:33 Aaron J. Seigo wrote:
> each thing does one thing.

Except for the equality sign. Is using the same tokens in different places 
that much of a problem? (irrelevant of return type and ->)

> I do like optional typing of parameters; it adds to the pattern matching
> capabilities and removes the need to use ugly precondition clauses for it
> instead. It doesn't really add anything but clarity. So ... added :)

It adds clarity, and saner compiler messages. Just think of duck-typing 
produced template error messages in C++ (essentially a back-trace of executing 
a template meta-program), as opposed to a regular early bailout for an 
unmatched argument type.

> want to actually handle that rather than generate another error because the
> error doesn't match the declared type of a? This path will lead us to
> "auto" ;)

I prefer compiler errors to the runtime ones.

Sometimes, I want the compiler to check whether I have made a mistake or not.
Usually, I want to rely on the (implicit) auto, but sometimes I want to ensure 
I got the right type, or am returning the right type. Otherwise, like with 
TMP, I'm going to detect a bug in the library a couple of layers higher.

For example, we have a comparator factory called stringComparator(locale) 
which returns comparison operators, and we have the following code
    names.sort(stringComparator("en_GB.UTF-8"))
We got an error that compare(item1, item2) can not be called. Where is the 
bug? Is it that stringComparator has returned a value 42 instead of a functor, 
is it that it returned a functor that can not handle strings (a bug in a 
function that the comparator uses?), did the factory have an if/else branch 
and one of them is not returning what it should, does the comparator have an 
issue with a specific string and returns a float instead of a bool, etc. Is 
the problem in the sort function?

If the compiler checked whether a return type in all branches was the one that 
the developer wants, we would get a precise error.

If we don't add a way for the user to enforce a type, and we add argument 
types, we will be seeing a lot of these:

    stringChecker (String s) { 0 }
    :::

    let s = intToStr(x);
    let l = log(x);
    let check_types = stringChecker(s) + floatChecker(l);

Library writers will want checks, if the ordinary users will not.

> already clear that it is an integer (e.g.). One of the real downsides of
> explicit typing is one then needs to track the history of every assignment:
> 
> 	let int a = foo();
> 
> does foo() return an int? should we care? what if it returns an error and we

What if we don't want to handle the error, and do an early bailout if the 
returned thing is not of a required type. That is, we want to enforce that 
something returned a valid value (for symmetry to the when clause and typing 
for function arguments)


> Do prefix tags cause ambiguities that will get in the way of parsing? Every
> use I've tried thus far seems unambiguous, but maybe I've missed some
> cases.

Not ambiguities (at least, I don't see them) - more of a compiler speed issue. 
When you have things on the right side, you don't need to remember them - in 
the sense of "ok, don't know what this is yet, neither this, this and that, 
and that, hmh got the '(', ..., oh here's a curly brace, this looks like a 
function definition, and I thought it was an expression. Heh, silly me".

It will be even more fun if the tags get arguments. Like
   dbus("org.kde.Test.method1)
   receiver
   someFancyCheck(...)
   method1(arguments) {
       :::
   }

Cheerio,
Ivan

p.s. I just realized I'm writing fun instead of func all the time. Not 
intentionally, I guess ML lives in my subconsciousness.

KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From woodsjaya@gmail.com  Sat Jul 26 11:58:49 2014
Return-Path: <woodsjaya@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-yh0-x22a.google.com (mail-yh0-x22a.google.com
 [IPv6:2607:f8b0:4002:c01::22a])
 by postbox.kde.org (Postfix) with ESMTP id 358CCB37D91
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 11:58:43 +0000 (UTC)
Received: by mail-yh0-f42.google.com with SMTP id a41so3744389yho.29
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 04:58:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=4tviuoJlWf+5ZV0XZtqn763SfAzjGuErz7XecRUoYAw=;
 b=q5QrQP6INUkA1VviNDGqy0/qz1Af8T67QBXvOa+wk/r2Xx8JZw6J3ZpyBTyPD9G7dR
 AzodhPVn1tpVEywWh9p7vLVLaqegnMJL5pn5MPwsvRlmu5y18bHI6J2/w7WmCscbk1iv
 wNjyz17bQj3sv36GsBCQwyNe8DgIhFC0F1tWjuVyxIK+Rj4m6a9kqyVv7qO/S21HP3uo
 s6tbTKg35AmkDLD/k+XBrVFomSFnZtq/s72BT4IB9ldNn5xEXZg0daaOZNbh0TnEqe4f
 EzcewY3DePYGyaaKVzBXr76SxAojRIiB7oVajAjrehzT2NDtTvtNTnUzKngpZ0SSv2Ts
 pr9Q==
MIME-Version: 1.0
X-Received: by 10.236.1.36 with SMTP id 24mr32905548yhc.45.1406375922336; Sat,
 26 Jul 2014 04:58:42 -0700 (PDT)
Received: by 10.170.189.136 with HTTP; Sat, 26 Jul 2014 04:58:42 -0700 (PDT)
In-Reply-To: <9E6DF120-D63D-4F1C-87D7-DDE8047F3EA9@edeltech.ch>
References: <3927031.xLL8ZEpcKd@freedom>
 <CABjEcM-BOZo47scEyaYCwymNkc85qF83eXQLpVGe2BDxZuZghA@mail.gmail.com>
 <92CE22CB-9977-4D21-AF59-88FBBAA778E6@edeltech.ch>
 <CABjEcM_Rg76tOopXmzaUWTKYcNOjutz4=qBUeWD36YLQ_pYZ+Q@mail.gmail.com>
 <9E6DF120-D63D-4F1C-87D7-DDE8047F3EA9@edeltech.ch>
Date: Sat, 26 Jul 2014 07:58:42 -0400
Message-ID: <CABjEcM_oAAzHU+DH+K7ui2=d=oM=MXKpzAugNixsrOE6OMPmPg@mail.gmail.com>
Subject: Re: Quick survey: func(..) {..} versus (..) {..}
From: Jay Woods <woodsjaya@gmail.com>
To: Samuel Gaist <samuel.gaist@edeltech.ch>, funq-devel@kde.org
Content-Type: multipart/alternative; boundary=001a1133db9445eb4804ff176955
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 11:58:49 -0000

--001a1133db9445eb4804ff176955
Content-Type: text/plain; charset=UTF-8

Something went wrong - this is probably the second post.

Here is a nonworking example based on a C function:

    fun short get_cp_amtMaxfee(double d){ i=d; return i; };

All that I had in mind was the observation to put the typing of the return
near
the return. We all, of course, have the return as the last statement in the
function. :-) The compiler could, of course, type the return from the type
of the variable or even the reverse, type the variable 'i' from the type of
the return. It would look like:

    fun get_cp_amtMaxfee(double d){ i=d; return i; } short;

This also gets around the compiler wondering if it is short that is a
function. I also like the idea of presenting the verbage of qualifiers in
order of strength.

As for what people are familiar with, let's not get too wrapped up in that.
Most programming is done with the language biases of the Indo-Europeans.
Most language usage is Chinese. Their language biases are considerably
different. We will be seeing the time and soon that those biases will drive
acceptance.


On Fri, Jul 25, 2014 at 6:51 PM, Samuel Gaist <samuel.gaist@edeltech.ch>
wrote:

> I'm not sure I'm following you right. Could you show some examples  ?
>
> On 25 juil. 2014, at 23:37, Jay Woods <woodsjaya@gmail.com> wrote:
>
> > But then I'd like to see any typing of the return after the function.
> funcName() {} string
> >
> >
> > On Fri, Jul 25, 2014 at 5:19 PM, Samuel Gaist <samuel.gaist@edeltech.ch>
> wrote:
> > +1,
> >
> > I'd rather have to read and write more if that makes the code easier to
> understand.
> >
> > On 25 juil. 2014, at 16:10, Jay Woods <woodsjaya@gmail.com> wrote:
> >
> > > Definitely with func.
> > >
> > > In the future, it can always be made optional (for use by the novice
> and pretty print).
> > >
> > >
> > > On Fri, Jul 25, 2014 at 9:58 AM, Aaron J. Seigo <aseigo@kde.org>
> wrote:
> > > Quick question time!
> > >
> > > How do you feel this:
> > >
> > > =======
> > > myFunction()
> > > {
> > >         let Bar = func() { true; }
> > >         Bar();
> > > }
> > >
> > > receiver func(PID, $auth, message) { ... }
> > > =======
> > >
> > > compares to this:
> > >
> > > =======
> > > myFunction()
> > > {
> > >         let Bar = () { true; }
> > >         Bar();
> > > }
> > >
> > > receiver (PID, $auth, message) { ... }
> > > =======
> > >
> > >
> > > for readability and clarity?
> > >
> > >
> > > Pros of func():
> > >         * makes it clear that this is a function declaration
> > >
> > > Pros of ():
> > >         * no reserved words
> > >         * less typing and reading
> > >
> > > --
> > > Aaron J. Seigo
> > > _______________________________________________
> > > Funq-devel mailing list
> > > Funq-devel@kde.org
> > > https://kde.org/mailman/listinfo/funq-devel
> > >
> > >
> > > _______________________________________________
> > > Funq-devel mailing list
> > > Funq-devel@kde.org
> > > https://kde.org/mailman/listinfo/funq-devel
> >
> > _______________________________________________
> > Funq-devel mailing list
> > Funq-devel@kde.org
> > https://kde.org/mailman/listinfo/funq-devel
> >
>
>

--001a1133db9445eb4804ff176955
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div><div>Something went wrong - this is probabl=
y the second post.<br><br></div>Here is a nonworking example based on a C f=
unction:<br><br>=C2=A0=C2=A0=C2=A0 fun short get_cp_amtMaxfee(double d){ i=
=3Dd; return i; };<br>
<br></div>All that I had in mind was the observation to put the typing of t=
he return near <br></div>the return. We all, of course, have the return as =
the last statement in the function. :-) The compiler could, of course, type=
 the return from the type of the variable or even the reverse, type the var=
iable &#39;i&#39; from the type of the return. It would look like:<br>
<br>=C2=A0=C2=A0=C2=A0 fun get_cp_amtMaxfee(double d){ i=3Dd; return i; } s=
hort;<br><br></div>This also gets around the compiler wondering if it is sh=
ort that is a function. I also like the idea of presenting the verbage of q=
ualifiers in order of strength. <br>
<br>As for what people are familiar with, let&#39;s not get too wrapped up =
in that. Most programming is done with the language biases of the Indo-Euro=
peans. Most language usage is Chinese. Their language biases are considerab=
ly different. We will be seeing the time and soon that those biases will dr=
ive acceptance. <br>
</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Fri,=
 Jul 25, 2014 at 6:51 PM, Samuel Gaist <span dir=3D"ltr">&lt;<a href=3D"mai=
lto:samuel.gaist@edeltech.ch" target=3D"_blank">samuel.gaist@edeltech.ch</a=
>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">I&#39;m not sure I&#39;m following you right=
. Could you show some examples =C2=A0?<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
On 25 juil. 2014, at 23:37, Jay Woods &lt;<a href=3D"mailto:woodsjaya@gmail=
.com">woodsjaya@gmail.com</a>&gt; wrote:<br>
<br>
&gt; But then I&#39;d like to see any typing of the return after the functi=
on. funcName() {} string<br>
&gt;<br>
&gt;<br>
&gt; On Fri, Jul 25, 2014 at 5:19 PM, Samuel Gaist &lt;<a href=3D"mailto:sa=
muel.gaist@edeltech.ch">samuel.gaist@edeltech.ch</a>&gt; wrote:<br>
&gt; +1,<br>
&gt;<br>
&gt; I&#39;d rather have to read and write more if that makes the code easi=
er to understand.<br>
&gt;<br>
&gt; On 25 juil. 2014, at 16:10, Jay Woods &lt;<a href=3D"mailto:woodsjaya@=
gmail.com">woodsjaya@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt; &gt; Definitely with func.<br>
&gt; &gt;<br>
&gt; &gt; In the future, it can always be made optional (for use by the nov=
ice and pretty print).<br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt; On Fri, Jul 25, 2014 at 9:58 AM, Aaron J. Seigo &lt;<a href=3D"ma=
ilto:aseigo@kde.org">aseigo@kde.org</a>&gt; wrote:<br>
&gt; &gt; Quick question time!<br>
&gt; &gt;<br>
&gt; &gt; How do you feel this:<br>
&gt; &gt;<br>
&gt; &gt; =3D=3D=3D=3D=3D=3D=3D<br>
&gt; &gt; myFunction()<br>
&gt; &gt; {<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 let Bar =3D func() { true; }<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 Bar();<br>
&gt; &gt; }<br>
&gt; &gt;<br>
&gt; &gt; receiver func(PID, $auth, message) { ... }<br>
&gt; &gt; =3D=3D=3D=3D=3D=3D=3D<br>
&gt; &gt;<br>
&gt; &gt; compares to this:<br>
&gt; &gt;<br>
&gt; &gt; =3D=3D=3D=3D=3D=3D=3D<br>
&gt; &gt; myFunction()<br>
&gt; &gt; {<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 let Bar =3D () { true; }<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 Bar();<br>
&gt; &gt; }<br>
&gt; &gt;<br>
&gt; &gt; receiver (PID, $auth, message) { ... }<br>
&gt; &gt; =3D=3D=3D=3D=3D=3D=3D<br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt; for readability and clarity?<br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt; Pros of func():<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 * makes it clear that this is a funct=
ion declaration<br>
&gt; &gt;<br>
&gt; &gt; Pros of ():<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 * no reserved words<br>
&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 * less typing and reading<br>
&gt; &gt;<br>
&gt; &gt; --<br>
&gt; &gt; Aaron J. Seigo<br>
&gt; &gt; _______________________________________________<br>
&gt; &gt; Funq-devel mailing list<br>
&gt; &gt; <a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
&gt; &gt; <a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D=
"_blank">https://kde.org/mailman/listinfo/funq-devel</a><br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt; _______________________________________________<br>
&gt; &gt; Funq-devel mailing list<br>
&gt; &gt; <a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
&gt; &gt; <a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D=
"_blank">https://kde.org/mailman/listinfo/funq-devel</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; Funq-devel mailing list<br>
&gt; <a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
&gt; <a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D"_bla=
nk">https://kde.org/mailman/listinfo/funq-devel</a><br>
&gt;<br>
<br>
</div></div></blockquote></div><br></div>

--001a1133db9445eb4804ff176955--

From woodsjaya@gmail.com  Sat Jul 26 13:12:46 2014
Return-Path: <woodsjaya@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-yk0-x22c.google.com (mail-yk0-x22c.google.com
 [IPv6:2607:f8b0:4002:c07::22c])
 by postbox.kde.org (Postfix) with ESMTP id 839ADB37CBC;
 Sat, 26 Jul 2014 13:12:34 +0000 (UTC)
Received: by mail-yk0-f172.google.com with SMTP id 10so3556667ykt.3
 for <multiple recipients>; Sat, 26 Jul 2014 06:12:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=WZNWeCBNO0N9ujx130qw36Se1XHCtSS52qtsTPD26io=;
 b=goKowLPi+YTd5yNxh0RVbiDRrzkbf3vHlsBLmp6cuGuLEHpSR1cJckwKWommejRMTN
 aDFqSnjkaIaV8Td6yR6e8DhFGwt/Q0IpozEs9m/l4D/UIM0o7mkDRfoxVMDLNoxdxfOh
 k6B0nWstQg/5lj32P/wXKRaxZKPak6XG7Fa+pK5QWpVHo4ELs5s8RZuZrFK8VyK7ad2U
 DvZQyBhtgJ3RA0CA365pIMDRBEtLYOHzwfZ6/xmZHKHJDkQDOEb/Q9AcIHX6iMzqGSE+
 RXbVSsribmY/jY/WWLYqEe7QxI5qaFSLbRcdhjQdt9Lbe2tmJjuuGMPTbBIvbk/74NQj
 LpMw==
MIME-Version: 1.0
X-Received: by 10.236.1.36 with SMTP id 24mr33495437yhc.45.1406380353540; Sat,
 26 Jul 2014 06:12:33 -0700 (PDT)
Received: by 10.170.189.136 with HTTP; Sat, 26 Jul 2014 06:12:33 -0700 (PDT)
In-Reply-To: <1515435.kVbgeNanpH@drako>
References: <11720789.3hBYssZlgt@drako> <1438966.cdAxmUk3am@freedom>
 <1515435.kVbgeNanpH@drako>
Date: Sat, 26 Jul 2014 09:12:33 -0400
Message-ID: <CABjEcM8N_i93UXTGR+GNhaC7h7n-27sjqCSDe4Z5EuPLGUGYMw@mail.gmail.com>
Subject: Re: Function definition
From: Jay Woods <woodsjaya@gmail.com>
To: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@kde.org>
Content-Type: multipart/alternative; boundary=001a1133db9464580f04ff18718d
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
Cc: funq-devel@kde.org
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 13:12:46 -0000

--001a1133db9464580f04ff18718d
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

The kind of analysis you go through here reminds me of some design
considerations for the running of the compiler.

It would be handy to have a switch that can be turned on and off around
some dicey piece of code. The switch would be for the
"stream-of-consciousness" mode. Have the compiler tell you what is going on
rather than having a bunch of code to do the same. After all, with a
switch, it all goes away when you understand and act on what is happening.


On Sat, Jul 26, 2014 at 5:43 AM, Ivan =C4=8Cuki=C4=87 <ivan.cukic@kde.org> =
wrote:

> On Saturday 26 July 2014 00:54:33 Aaron J. Seigo wrote:
> > each thing does one thing.
>
> Except for the equality sign. Is using the same tokens in different place=
s
> that much of a problem? (irrelevant of return type and ->)
>
> > I do like optional typing of parameters; it adds to the pattern matchin=
g
> > capabilities and removes the need to use ugly precondition clauses for =
it
> > instead. It doesn't really add anything but clarity. So ... added :)
>
> It adds clarity, and saner compiler messages. Just think of duck-typing
> produced template error messages in C++ (essentially a back-trace of
> executing
> a template meta-program), as opposed to a regular early bailout for an
> unmatched argument type.
>
> > want to actually handle that rather than generate another error because
> the
> > error doesn't match the declared type of a? This path will lead us to
> > "auto" ;)
>
> I prefer compiler errors to the runtime ones.
>
> Sometimes, I want the compiler to check whether I have made a mistake or
> not.
> Usually, I want to rely on the (implicit) auto, but sometimes I want to
> ensure
> I got the right type, or am returning the right type. Otherwise, like wit=
h
> TMP, I'm going to detect a bug in the library a couple of layers higher.
>
> For example, we have a comparator factory called stringComparator(locale)
> which returns comparison operators, and we have the following code
>     names.sort(stringComparator("en_GB.UTF-8"))
> We got an error that compare(item1, item2) can not be called. Where is th=
e
> bug? Is it that stringComparator has returned a value 42 instead of a
> functor,
> is it that it returned a functor that can not handle strings (a bug in a
> function that the comparator uses?), did the factory have an if/else bran=
ch
> and one of them is not returning what it should, does the comparator have
> an
> issue with a specific string and returns a float instead of a bool, etc. =
Is
> the problem in the sort function?
>
> If the compiler checked whether a return type in all branches was the one
> that
> the developer wants, we would get a precise error.
>
> If we don't add a way for the user to enforce a type, and we add argument
> types, we will be seeing a lot of these:
>
>     stringChecker (String s) { 0 }
>     :::
>
>     let s =3D intToStr(x);
>     let l =3D log(x);
>     let check_types =3D stringChecker(s) + floatChecker(l);
>
> Library writers will want checks, if the ordinary users will not.
>
> > already clear that it is an integer (e.g.). One of the real downsides o=
f
> > explicit typing is one then needs to track the history of every
> assignment:
> >
> >       let int a =3D foo();
> >
> > does foo() return an int? should we care? what if it returns an error
> and we
>
> What if we don't want to handle the error, and do an early bailout if the
> returned thing is not of a required type. That is, we want to enforce tha=
t
> something returned a valid value (for symmetry to the when clause and
> typing
> for function arguments)
>
>
> > Do prefix tags cause ambiguities that will get in the way of parsing?
> Every
> > use I've tried thus far seems unambiguous, but maybe I've missed some
> > cases.
>
> Not ambiguities (at least, I don't see them) - more of a compiler speed
> issue.
> When you have things on the right side, you don't need to remember them -
> in
> the sense of "ok, don't know what this is yet, neither this, this and tha=
t,
> and that, hmh got the '(', ..., oh here's a curly brace, this looks like =
a
> function definition, and I thought it was an expression. Heh, silly me".
>
> It will be even more fun if the tags get arguments. Like
>    dbus("org.kde.Test.method1)
>    receiver
>    someFancyCheck(...)
>    method1(arguments) {
>        :::
>    }
>
> Cheerio,
> Ivan
>
> p.s. I just realized I'm writing fun instead of func all the time. Not
> intentionally, I guess ML lives in my subconsciousness.
>
> KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/
> gpg key id: 850B6F76, keyserver.pgp.com
> _______________________________________________
> Funq-devel mailing list
> Funq-devel@kde.org
> https://kde.org/mailman/listinfo/funq-devel
>

--001a1133db9464580f04ff18718d
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>The kind of analysis you go through here reminds me o=
f some design considerations for the running of the compiler. <br><br></div=
>It would be handy to have a switch that can be turned on and off around so=
me dicey piece of code. The switch would be for the &quot;stream-of-conscio=
usness&quot; mode. Have the compiler tell you what is going on rather than =
having a bunch of code to do the same. After all, with a switch, it all goe=
s away when you understand and act on what is happening.<br>
</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Sat,=
 Jul 26, 2014 at 5:43 AM, Ivan =C4=8Cuki=C4=87 <span dir=3D"ltr">&lt;<a hre=
f=3D"mailto:ivan.cukic@kde.org" target=3D"_blank">ivan.cukic@kde.org</a>&gt=
;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">On Saturday 26 July 2014 00:54:33 Aaron J. S=
eigo wrote:<br>
&gt; each thing does one thing.<br>
<br>
Except for the equality sign. Is using the same tokens in different places<=
br>
that much of a problem? (irrelevant of return type and -&gt;)<br>
<div class=3D""><br>
&gt; I do like optional typing of parameters; it adds to the pattern matchi=
ng<br>
&gt; capabilities and removes the need to use ugly precondition clauses for=
 it<br>
&gt; instead. It doesn&#39;t really add anything but clarity. So ... added =
:)<br>
<br>
</div>It adds clarity, and saner compiler messages. Just think of duck-typi=
ng<br>
produced template error messages in C++ (essentially a back-trace of execut=
ing<br>
a template meta-program), as opposed to a regular early bailout for an<br>
unmatched argument type.<br>
<div class=3D""><br>
&gt; want to actually handle that rather than generate another error becaus=
e the<br>
&gt; error doesn&#39;t match the declared type of a? This path will lead us=
 to<br>
&gt; &quot;auto&quot; ;)<br>
<br>
</div>I prefer compiler errors to the runtime ones.<br>
<br>
Sometimes, I want the compiler to check whether I have made a mistake or no=
t.<br>
Usually, I want to rely on the (implicit) auto, but sometimes I want to ens=
ure<br>
I got the right type, or am returning the right type. Otherwise, like with<=
br>
TMP, I&#39;m going to detect a bug in the library a couple of layers higher=
.<br>
<br>
For example, we have a comparator factory called stringComparator(locale)<b=
r>
which returns comparison operators, and we have the following code<br>
=C2=A0 =C2=A0 names.sort(stringComparator(&quot;en_GB.UTF-8&quot;))<br>
We got an error that compare(item1, item2) can not be called. Where is the<=
br>
bug? Is it that stringComparator has returned a value 42 instead of a funct=
or,<br>
is it that it returned a functor that can not handle strings (a bug in a<br=
>
function that the comparator uses?), did the factory have an if/else branch=
<br>
and one of them is not returning what it should, does the comparator have a=
n<br>
issue with a specific string and returns a float instead of a bool, etc. Is=
<br>
the problem in the sort function?<br>
<br>
If the compiler checked whether a return type in all branches was the one t=
hat<br>
the developer wants, we would get a precise error.<br>
<br>
If we don&#39;t add a way for the user to enforce a type, and we add argume=
nt<br>
types, we will be seeing a lot of these:<br>
<br>
=C2=A0 =C2=A0 stringChecker (String s) { 0 }<br>
=C2=A0 =C2=A0 :::<br>
<br>
=C2=A0 =C2=A0 let s =3D intToStr(x);<br>
=C2=A0 =C2=A0 let l =3D log(x);<br>
=C2=A0 =C2=A0 let check_types =3D stringChecker(s) + floatChecker(l);<br>
<br>
Library writers will want checks, if the ordinary users will not.<br>
<div class=3D""><br>
&gt; already clear that it is an integer (e.g.). One of the real downsides =
of<br>
&gt; explicit typing is one then needs to track the history of every assign=
ment:<br>
&gt;<br>
&gt; =C2=A0 =C2=A0 =C2=A0 let int a =3D foo();<br>
&gt;<br>
&gt; does foo() return an int? should we care? what if it returns an error =
and we<br>
<br>
</div>What if we don&#39;t want to handle the error, and do an early bailou=
t if the<br>
returned thing is not of a required type. That is, we want to enforce that<=
br>
something returned a valid value (for symmetry to the when clause and typin=
g<br>
for function arguments)<br>
<div class=3D""><br>
<br>
&gt; Do prefix tags cause ambiguities that will get in the way of parsing? =
Every<br>
&gt; use I&#39;ve tried thus far seems unambiguous, but maybe I&#39;ve miss=
ed some<br>
&gt; cases.<br>
<br>
</div>Not ambiguities (at least, I don&#39;t see them) - more of a compiler=
 speed issue.<br>
When you have things on the right side, you don&#39;t need to remember them=
 - in<br>
the sense of &quot;ok, don&#39;t know what this is yet, neither this, this =
and that,<br>
and that, hmh got the &#39;(&#39;, ..., oh here&#39;s a curly brace, this l=
ooks like a<br>
function definition, and I thought it was an expression. Heh, silly me&quot=
;.<br>
<br>
It will be even more fun if the tags get arguments. Like<br>
=C2=A0 =C2=A0dbus(&quot;org.kde.Test.method1)<br>
=C2=A0 =C2=A0receiver<br>
=C2=A0 =C2=A0someFancyCheck(...)<br>
=C2=A0 =C2=A0method1(arguments) {<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0:::<br>
=C2=A0 =C2=A0}<br>
<br>
Cheerio,<br>
Ivan<br>
<br>
p.s. I just realized I&#39;m writing fun instead of func all the time. Not<=
br>
intentionally, I guess ML lives in my subconsciousness.<br>
<div class=3D"HOEnZb"><div class=3D"h5"><br>
KDE, ivan.cukic at <a href=3D"http://kde.org" target=3D"_blank">kde.org</a>=
, <a href=3D"http://ivan.fomentgroup.org/" target=3D"_blank">http://ivan.fo=
mentgroup.org/</a><br>
gpg key id: 850B6F76, <a href=3D"http://keyserver.pgp.com" target=3D"_blank=
">keyserver.pgp.com</a><br>
_______________________________________________<br>
Funq-devel mailing list<br>
<a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
<a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D"_blank">h=
ttps://kde.org/mailman/listinfo/funq-devel</a><br>
</div></div></blockquote></div><br></div>

--001a1133db9464580f04ff18718d--

From aseigo@kde.org  Sat Jul 26 13:34:19 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 69A7DB37DA4
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 13:34:13 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id D958C2DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 07:34:11 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 15:34:09 +0200
Message-ID: <4310631.aISEbcXn6H@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <11075274.sjYH4PJZzd@drako>
References: <11720789.3hBYssZlgt@drako> <1438966.cdAxmUk3am@freedom>
 <11075274.sjYH4PJZzd@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1998994.XU2t9uVyVN";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 13:34:19 -0000


--nextPart1998994.XU2t9uVyVN
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Saturday, July 26, 2014 09:12:19 Ivan =C4=8Cuki=C4=87 wrote:
> > Hopefully we don't have to mark functions as recursive (tail or
> > otherwise)... that said ...
>=20
> Was not meant as an instruction to the compiler, but as a request to =
get an
> error if the compiler can not make it into a loop.

the compiler should be able to detect tail recursion on its own. it's a=
=20
special case of what is needed for tail call optimization anyways.

what could be nice in the compiler is to warn when any function is=20
recursive[1] and grows the stack with each recurse.

in fact, if there was to be such a tag i'd prefer to see a "developer k=
nows,=20
stop bugging me" tag that gets applied to non-tail-recursive functions =
stating=20
that the function is known to be such. that way developers would have t=
o tag=20
functions that can potentially blow the stack, otherwise face a warning=
.

possible downside: it's often quite OK to have non-tail-recursive funct=
ions if=20
you *know* the number of iterations is small (e.g. due to a known to be=
 small=20
data set) and that might lead to a more functions than desired being ma=
rked=20
this way?

what do you think?=20

[1] or for extra niftiness: mutually recursive .. perhaps even N-cycle=20=

multiple recursion for a reason N

=2D-=20
Aaron J. Seigo
--nextPart1998994.XU2t9uVyVN
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTrlEACgkQ1rcusafx20PGzACfX5/WLE3GmiRremdxwZM7Wiw4
/JcAoKbiKZPFQsLd8nlw0wxuleyTdl8t
=RnCn
-----END PGP SIGNATURE-----

--nextPart1998994.XU2t9uVyVN--


From aseigo@kde.org  Sat Jul 26 13:45:11 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 6D060B37D91
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 13:45:05 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 883822DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 07:45:04 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 15:45:02 +0200
Message-ID: <7450946.EhCm2akukG@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <1515435.kVbgeNanpH@drako>
References: <11720789.3hBYssZlgt@drako> <1438966.cdAxmUk3am@freedom>
 <1515435.kVbgeNanpH@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart7694919.2ZZ5lhWoJh";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 13:45:11 -0000


--nextPart7694919.2ZZ5lhWoJh
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Saturday, July 26, 2014 11:43:27 Ivan =C4=8Cuki=C4=87 wrote:
> On Saturday 26 July 2014 00:54:33 Aaron J. Seigo wrote:
> > each thing does one thing.
>=20
> Except for the equality sign. Is using the same tokens in different p=
laces
> that much of a problem? (irrelevant of return type and ->)

The equality sign is a "comparative assignment" operator, so it actuall=
y does=20
just one thing, though that one thing is a compound action. While it is=
=20
probably unavoidable to have every single operator do just one thing*, =
the=20
more instances of that we avoid the better for the developer.

* conceptually one thing; the '+' operator will be associated with mult=
iple=20
operations, technically: 1 + 2, "string" + "concatenation"

> > I do like optional typing of parameters; it adds to the pattern mat=
ching
> > capabilities and removes the need to use ugly precondition clauses =
for it
> > instead. It doesn't really add anything but clarity. So ... added :=
)
>=20
> It adds clarity, and saner compiler messages. Just think of duck-typi=
ng
> produced template error messages in C++ (essentially a back-trace of
> executing a template meta-program), as opposed to a regular early bai=
lout
> for an unmatched argument type.

Yeah, very true.

> > want to actually handle that rather than generate another error bec=
ause
> > the
> > error doesn't match the declared type of a? This path will lead us =
to
> > "auto" ;)
>=20
> I prefer compiler errors to the runtime ones.

I do as well ...

> Library writers will want checks, if the ordinary users will not.

OK, I'm convinced :)

Optional type declarations. Prefixed, however, to make it kind on C++=20=

developers. With no type being equivalent to auto.

> > already clear that it is an integer (e.g.). One of the real downsid=
es of
> >=20
> > explicit typing is one then needs to track the history of every=20
assignment:
> > =09let int a =3D foo();
> >=20
> > does foo() return an int? should we care? what if it returns an err=
or and
> > we
> What if we don't want to handle the error, and do an early bailout if=
 the
> returned thing is not of a required type.=20

Early baillout =3D=3D crash of process

"Let it crash" is a positively awesome way of developing imho as it get=
s away=20
from=20defensive programming altogether. *But* it means you have to allow=
 the=20
developer to write reasonably flexible code so that errors are not crea=
ted too=20
easily.

> > Do prefix tags cause ambiguities that will get in the way of parsin=
g?
> > Every
> > use I've tried thus far seems unambiguous, but maybe I've missed so=
me
> > cases.
>=20
> Not ambiguities (at least, I don't see them) - more of a compiler spe=
ed
> issue.=20

Given the systems that are used for compiling and the simplicity of the=
 rest=20
of the syntax, I'm not too worried about this. If the speed is simply n=
ot=20
suitable, then we can change the placement.

Ah .. perhaps I'm leaving out an important detail here: while this abso=
lutely=20
must have a REPL, applications should be compiled to bytecode for deplo=
yment.=20
I don't want to build an interpreted language, so compile-time is a one=
=2Dtime=20
thing and probably happens before the application gets to the user.

Of course, having compile times as close to zero as possible makes for =
a=20
better developer experience and that is an area funq could end up provi=
ding a=20
better experience of over C++, which could draw developers in. (I would=
=20
actually like to see compile cycles be implicit actions during developm=
ent:=20
either when a file changes on disk or a load-this-file command hits the=
 REPL=20
compilation will happen automatically)

So my opinion on this is: let's try and keep it familiar to C++ people =
and if=20
we find that the way to get the needed / desired compile speed is to me=
ss with=20
the ordering, then we can do so then.

I fully expect to have a couple releases of the compiler before committ=
ing to=20
syntax, let alone backwards compatible bytecode.

=2D-=20
Aaron J. Seigo
--nextPart7694919.2ZZ5lhWoJh
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTsN4ACgkQ1rcusafx20OiGACffzbs18UPs/MmYJ5MzEWXQSbr
7koAn2GOhFDQm6A3dRt7iM6CLY701YTt
=N1q8
-----END PGP SIGNATURE-----

--nextPart7694919.2ZZ5lhWoJh--


From aseigo@kde.org  Sat Jul 26 13:50:32 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 27C07B37D57
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 13:50:25 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id D947F2DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 07:50:24 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 15:50:22 +0200
Message-ID: <2068895.z11rP3vG5z@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <CABjEcM8N_i93UXTGR+GNhaC7h7n-27sjqCSDe4Z5EuPLGUGYMw@mail.gmail.com>
References: <11720789.3hBYssZlgt@drako> <1515435.kVbgeNanpH@drako>
 <CABjEcM8N_i93UXTGR+GNhaC7h7n-27sjqCSDe4Z5EuPLGUGYMw@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2349840.rUsdYCNfzV";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 13:50:32 -0000


--nextPart2349840.rUsdYCNfzV
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, July 26, 2014 09:12:33 Jay Woods wrote:
> It would be handy to have a switch that can be turned on and off arou=
nd
> some dicey piece of code. The switch would be for the
> "stream-of-consciousness" mode. Have the compiler tell you what is go=
ing on
> rather than having a bunch of code to do the same. After all, with a
> switch, it all goes away when you understand and act on what is happe=
ning.

Erlang has a couple interesting modes with its compiler. Depending on w=
hat you=20
pass to the compile command it will generate:

* "common Erlang" which is an intermediate language complete with let=20=

statements and an extremely pedantic, but equally clear, syntax that wo=
uld=20
make even LISP blush (this is what languages like Elixir get mutated in=
to=20
before getting processed further)
* beam (Erlang's VM) assembler
* bytecode that is ready to be run on the VM

It's a neat approach.

Thought perhaps I'm thinking of something different than you here ... w=
hat sort=20
of output from the compiler would you be looking for? What kind of "dic=
ey=20
code" do you have in mind?

=2D-=20
Aaron J. Seigo
--nextPart2349840.rUsdYCNfzV
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTsh4ACgkQ1rcusafx20MiOwCeOg/+cnpfhLjKhwF3zf3TnwbI
ibkAmwccrZ1sYULW/yPZc9nlob37JUMe
=GP7k
-----END PGP SIGNATURE-----

--nextPart2349840.rUsdYCNfzV--


From ivan.cukic@gmail.com  Sat Jul 26 13:55:07 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22b.google.com (mail-wi0-x22b.google.com
 [IPv6:2a00:1450:400c:c05::22b])
 by postbox.kde.org (Postfix) with ESMTP id 28813B37D57
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 13:55:01 +0000 (UTC)
Received: by mail-wi0-f171.google.com with SMTP id hi2so2294358wib.10
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 06:55:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=oPucnRm67tFZarYKq6KCP0r6/Vof4Trlg2pR2OpGl+M=;
 b=mHCw0XlYijY/waVQQOqU4/P9divLXdJ7hkekVCXMRQ4PFIgYZdDVOofcmnSwHeDmTg
 scN9++RziMMxjcUX53R+MRWUgzxvAqYC+CNlEywArzK+QjKTgsDgYPmgbReJTWSRDimg
 MtBkilnbxriABBFckT/V3M6ADTnH98phv9LVOtxw7ZiVC/ZH8x7ZRGuXCb9RFf0AXvZi
 1tatVx4eF47Bof9FbWfojNSPGozp5mM6vfqDYcb57mwIXrq676RlNqM6zjY0wxFDSLE7
 8urfAzABGmWahchpORCAxrvRIp/nSURAvzHBdn2PkziejLoz61i8k2zHVdMpF4YRex4Y
 Mk2w==
X-Received: by 10.180.8.10 with SMTP id n10mr13919538wia.41.1406382900929;
 Sat, 26 Jul 2014 06:55:00 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id bp9sm7786798wib.7.2014.07.26.06.54.59
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 26 Jul 2014 06:54:59 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 15:54:58 +0200
Message-ID: <2028072.RTufpb6hdy@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <7450946.EhCm2akukG@freedom>
References: <11720789.3hBYssZlgt@drako> <1515435.kVbgeNanpH@drako>
 <7450946.EhCm2akukG@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 13:55:07 -0000


> Optional type declarations. Prefixed, however, to make it kind on C++=

> developers. With no type being equivalent to auto.

Cool :)

> Early baillout =3D=3D crash of process
>=20
> "Let it crash" is a positively awesome way of developing imho as it g=
ets
> away from defensive programming altogether. *But* it means you have t=
o
> allow the developer to write reasonably flexible code so that errors =
are
> not created too easily.

Agreed.

> Ah .. perhaps I'm leaving out an important detail here: while this
> absolutely must have a REPL, applications should be compiled to bytec=
ode
> for deployment. I don't want to build an interpreted language, so
> compile-time is a one-time thing and probably happens before the
> application gets to the user.

I was expecting that. This ain=E2=80=99t no friggin' basic ;)

> So my opinion on this is: let's try and keep it familiar to C++ peopl=
e and
> if we find that the way to get the needed / desired compile speed is =
to
> mess with the ordering, then we can do so then.

No problems with that. I just like complaining ;)


Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/=20
gpg key id: 850B6F76, keyserver.pgp.com

From ivan.cukic@gmail.com  Sat Jul 26 13:58:16 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wg0-x22c.google.com (mail-wg0-x22c.google.com
 [IPv6:2a00:1450:400c:c00::22c])
 by postbox.kde.org (Postfix) with ESMTP id 11C17B37D63
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 13:58:11 +0000 (UTC)
Received: by mail-wg0-f44.google.com with SMTP id m15so5399083wgh.27
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 06:58:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=A8Kygszp6XD5hEuH56BBOfjQfuje6kQlnxO26OZ7k/k=;
 b=OQG7obvwdt/7U0ZRwcL4hvGFM+KmO1skLkA2ug4+t15x+BzAjIz3n9xQPuba4hwlnh
 yzQfrY9ZXF9GtBN4Df+Rv5DRd7ytjfg4JxjS0idRTjEabJ+dNujV6aoJ0d1s/qVifzi1
 kVMirWkT2TUk7Z2690H6chxoK5v5YuZXu2uPVJraRPn+Ga3T9GALarj/YmEUihQUNZkY
 tQIFtyg6eb9yy4jvMtHGz+vbbL2ZarPIJlMEqVbRhf73HQoBrSter6uHsTsBUQGIB83X
 DcjrP8EHJTonEUcH3HJh/qCdJkHHByD2MYOftxshwCO+5DOImANiU0xGbnoSwNC4M0tt
 9orQ==
X-Received: by 10.194.200.3 with SMTP id jo3mr31386829wjc.110.1406383090886;
 Sat, 26 Jul 2014 06:58:10 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id de6sm33868827wjc.16.2014.07.26.06.58.09
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 26 Jul 2014 06:58:10 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 15:58:08 +0200
Message-ID: <6573467.047O6llMN8@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <4310631.aISEbcXn6H@freedom>
References: <11720789.3hBYssZlgt@drako> <11075274.sjYH4PJZzd@drako>
 <4310631.aISEbcXn6H@freedom>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 13:58:17 -0000


> have to tag functions that can potentially blow the stack, otherwise face a
> warning.

> possible downside: it's often quite OK to have non-tail-recursive functions
> if you *know* the number of iterations is small (e.g. due to a known to be
> small data set) and that might lead to a more functions than desired being
> marked this way?

This makes sense +1

> [1] or for extra niftiness: mutually recursive .. perhaps even N-cycle
> multiple recursion for a reason N

This is a bit more involved, but yes, it could be a nifty feature.


Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From aseigo@kde.org  Sat Jul 26 14:03:59 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 0BCF9B37318
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 14:03:53 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 3C3AB2DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 08:03:52 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Quick survey: func(..) {..} versus (..) {..}
Date: Sat, 26 Jul 2014 16:03:50 +0200
Message-ID: <7450952.jBAg3jIcCj@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <CABjEcM_oAAzHU+DH+K7ui2=d=oM=MXKpzAugNixsrOE6OMPmPg@mail.gmail.com>
References: <3927031.xLL8ZEpcKd@freedom>
 <9E6DF120-D63D-4F1C-87D7-DDE8047F3EA9@edeltech.ch>
 <CABjEcM_oAAzHU+DH+K7ui2=d=oM=MXKpzAugNixsrOE6OMPmPg@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1418971.oWZbODWokf";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 14:03:59 -0000


--nextPart1418971.oWZbODWokf
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, July 26, 2014 07:58:42 Jay Woods wrote:
> Something went wrong - this is probably the second post.
>=20
> Here is a nonworking example based on a C function:
>=20
>     fun short get_cp_amtMaxfee(double d){ i=3Dd; return i; };
>=20
> All that I had in mind was the observation to put the typing of the r=
eturn
> near
> the return. We all, of course, have the return as the last statement =
in the
> function. :-) The compiler could, of course, type the return from the=
 type
> of the variable or even the reverse, type the variable 'i' from the t=
ype of
> the return. It would look like:

As long as it is optional, this is ok. It does make the compiler more c=
omplex,=20
however, as it would have different internal rules for functions with r=
eturn=20
typing and those without.

Taken to the extreme, one could allow defining multiple return types an=
d/or=20
always implicitly assume that a return type of error is possible.

(We haven't yet gotten to the "let it crash" philosophy .. but this is=20=

related. http://c2.com/cgi/wiki?LetItCrash )

My concern here is that it makes it very easy to write code that is les=
s=20
generic than necessary, which generates unnecessary errors due to devel=
oper=20
over-strictness (e.g. defining a method to return "int" because that's =
is what=20
htey have used it for so far, when everything in the function can equal=
ly work=20
on strings).

There's a certain lazy beauty about being able to just make functions a=
nd not=20
think about them in terms of return values.

If variables can be typed, this moves the need to type functions to the=
=20
receiver, which is really the end point that matters. It is less import=
ant for=20
the function to return a $TYPE than it is for the receiver to be $TYPE.=


.. and yes, this is a trade-off between development flexibility and the=
 number=20
of compiler-time errors that can be caught.

I actually expect there to be real-world limits on such things anyways =
as=20
there is no guarantee that Module A used by  Module B will retain the s=
ame=20
return signatures when the code is reloaded at runtime (hot reloading).=


Given the importance I'd like to see on multi-process architectures and=
=20
therefore the message passing that will happen, the semantics of functi=
on=20
calls are only going to be a certain (hopefully somewhat small) % of th=
e means=20
by which code is coupled together. I half-expect message passing typing=
 to be=20
more important than function return typing.

> As for what people are familiar with, let's not get too wrapped up in=
 that.
> Most programming is done with the language biases of the Indo-Europea=
ns.
> Most language usage is Chinese. Their language biases are considerabl=
y
> different. We will be seeing the time and soon that those biases will=
 drive
> acceptance.

Except that Chinese programmers are learning C. That is what they know =
when it=20
comes to programming. Most importantly, the audience today for funq is =
~100%=20
C++ developers.

Based on a number of conversations I've had on this topic with=20
C/C++/Java/PHP/Python developers who don't touch fucnctional languaes,=20=

syntatic familiarity seems to be significant part of the reason many de=
velopers=20
avoid functional languages. It's not a good reason, but when did that s=
top=20
anyone ;)

=2D-=20
Aaron J. Seigo
--nextPart1418971.oWZbODWokf
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTtUYACgkQ1rcusafx20Me4QCbBF5nqYyu3tyHz/tVmMuQxJp/
MUwAnjdd1e+k50FKVPTsA5U/gTQMqra2
=S8Jy
-----END PGP SIGNATURE-----

--nextPart1418971.oWZbODWokf--


From ivan.cukic@gmail.com  Sat Jul 26 14:07:00 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22b.google.com (mail-wi0-x22b.google.com
 [IPv6:2a00:1450:400c:c05::22b])
 by postbox.kde.org (Postfix) with ESMTP id 5C490B37318
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 14:06:55 +0000 (UTC)
Received: by mail-wi0-f171.google.com with SMTP id hi2so2310798wib.4
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 07:06:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=mejU/+S8TooWilrckmPA6CdLRRv4+3ZydOuRJA8q6kk=;
 b=ywvhORO4ZReewKysw30lfbl2+LQNlwXxfwuz7q4THfEwUxwhrNnb3vVDmXaztJATsM
 LJM9jBvdA1/mbGPy1jQgg1HND7s36LZtpQICdqynUmjNWJJ0X8NHlLpwPcGChpWlHofP
 J1lZyf0lgAm1YkAqqPLeJcw7oiokHynQM5WmAadzIbbpenj+ofSSTkLFFbueYFjEjoje
 yuRGtVDVyuekkixVnsuKWY0zZc+E2khqh3znGqm7hE/g8Hj2NERi4BAyXQofqBOd3QcJ
 Nrfte6T5uBSwLVyJ10bpkE/deEktE/jYsrCDKZexCxv1TZyqoZ9gOCOPo+Sn6mZyUae+
 vkVA==
X-Received: by 10.194.249.98 with SMTP id yt2mr31686441wjc.66.1406383615068;
 Sat, 26 Jul 2014 07:06:55 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id n2sm33894140wjf.40.2014.07.26.07.06.53
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Sat, 26 Jul 2014 07:06:54 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: Quick survey: func(..) {..} versus (..) {..}
Date: Sat, 26 Jul 2014 16:06:52 +0200
Message-ID: <2460296.VpTydXgmq0@drako>
Organization: KDE
User-Agent: KMail/4.14 beta3 (Linux/3.14-1-amd64; KDE/4.13.95; x86_64;
 git-9e51c2f; 2014-07-24)
In-Reply-To: <CABjEcM_oAAzHU+DH+K7ui2=d=oM=MXKpzAugNixsrOE6OMPmPg@mail.gmail.com>
References: <3927031.xLL8ZEpcKd@freedom>
 <9E6DF120-D63D-4F1C-87D7-DDE8047F3EA9@edeltech.ch>
 <CABjEcM_oAAzHU+DH+K7ui2=d=oM=MXKpzAugNixsrOE6OMPmPg@mail.gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 14:07:00 -0000


>     fun get_cp_amtMaxfee(double d){ i=d; return i; } short;

Return types are important for the function users. It would be quite tedious 
for one to go to the end of the implementation of a function just in order to 
see what is its return type. Especially since it is optional, in which case 
you got to the closing bracket and got nothing to show for it.

You might argue that a potential IDE would solve this by showing the return 
type to the user. But having an IDE is not an excuse for something, IDEs are 
just there to make warts in languages less prominent.

Cheerio,
Ivan

From aseigo@kde.org  Sat Jul 26 14:11:35 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 296BAB37D73
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 14:11:29 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 39D5A2DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 08:11:28 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Sat, 26 Jul 2014 16:11:25 +0200
Message-ID: <8234237.Dk0aaOYkzv@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <2CB658A2-C676-47F0-B19C-98C81E66EC61@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom> <2995659.nvtENVVDeB@freedom>
 <2CB658A2-C676-47F0-B19C-98C81E66EC61@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart11537506.D2qdXZsxMU";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 14:11:35 -0000


--nextPart11537506.D2qdXZsxMU
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, July 26, 2014 11:14:29 Samuel Gaist wrote:
> Just to be sure, let say the core namespace is funq, would it look li=
ke
>=20
> public funq 1.0
> {
>    public std 1.0
>    {
>        public debug 1.0
>        {
>                func log(value) { pretty_print(value); }
>        }
>    }
> }

I'd prefer something simpler like:

public funq.std.debug=20
{=20
....
}

(or just funq.debug)

public funq.process
{
....
}

It's a simplification to be sure, but I'd like to avoid nested modules =
for a=20
few reasons (the horror of massive indentation and curly-brace-nesting =
hell;=20
simpler scoping rules; parser and compiler simplicity)

This does remind me that for libraries modules also need the public tag=
 so=20
that modules can be hidden as internals. Will add right now!

> On a side note, is there already a file naming convention ?
>=20
> Also, how to regroup several fqt files as a library ?

Undefined at this point. There's an empty "packaging.md" file in docs w=
aiting=20
for someone to fill it in. Since the idea is to compile things down to=20=

bytecode, it would make sense to have define a file system layout for w=
here=20
those resulting binary files should end up. It may also make sense to h=
ave a=20
standardized layout for source code distribution. In both cases it ough=
t to=20
specify a metadata file containing at the minimum licensing information=
. Being=20
able to automatically check the licensing status of an application will=
 be a=20
godsend.

I'd like to see this modeled after existing best practices in QML, Java=
 and=20
Plasma::Package. .. and not because I think any of those have awesome=20=

mechanisms, but because they are what our audience will already be fami=
liar=20
with (I'd put C++ in there if there was anything like a distribution st=
andard=20
:)

I'd be quite fine if someone wanted to take on the task of writing up a=
 draft=20
specification for this ...

=2D-=20
Aaron J. Seigo
--nextPart11537506.D2qdXZsxMU
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTtw0ACgkQ1rcusafx20PLBACfTCab82PDRtxsvQjwbzwtaXl7
kSUAnA1SXx0WB6j1zMaKP3MeKiuatq2b
=QsE6
-----END PGP SIGNATURE-----

--nextPart11537506.D2qdXZsxMU--


From aseigo@kde.org  Sat Jul 26 14:13:02 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 382ABB37D73
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 14:12:56 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 2B8DC2DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 08:12:55 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Sat, 26 Jul 2014 16:12:52 +0200
Message-ID: <2516693.ng6JGr2pmS@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <8234237.Dk0aaOYkzv@freedom>
References: <7068387.NbvooaTEQg@freedom>
 <2CB658A2-C676-47F0-B19C-98C81E66EC61@edeltech.ch>
 <8234237.Dk0aaOYkzv@freedom>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart4927196.ULBHBTWXY6";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 14:13:02 -0000


--nextPart4927196.ULBHBTWXY6
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, July 26, 2014 16:11:25 Aaron J. Seigo wrote:
> This does remind me that for libraries modules also need the public t=
ag so
> that modules can be hidden as internals. Will add right now!

It's actually already specified in docs/modules.md ..=20

=2D-=20
Aaron J. Seigo
--nextPart4927196.ULBHBTWXY6
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTt2QACgkQ1rcusafx20PSvACdFAMtWmazlMXhOYTgHfn2hBHo
s3cAnRK/nQsT7j75x1c0++vliYJ+/QZs
=/1iM
-----END PGP SIGNATURE-----

--nextPart4927196.ULBHBTWXY6--


From aseigo@kde.org  Sat Jul 26 14:18:13 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 097C5B37318
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 14:18:08 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 365B52DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 08:18:07 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: funq: syntax that doesn't scare off C++ developers
Date: Sat, 26 Jul 2014 16:18:05 +0200
Message-ID: <1654663.hYLdFzqf7f@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <8A95096E-DA55-4185-87D7-2D67BDEB66E8@edeltech.ch>
References: <7068387.NbvooaTEQg@freedom> <1982370.eJk1aTGWaH@drako>
 <8A95096E-DA55-4185-87D7-2D67BDEB66E8@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2507788.gXOmDaZaXN";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 14:18:13 -0000


--nextPart2507788.gXOmDaZaXN
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Saturday, July 26, 2014 10:56:50 Samuel Gaist wrote:
> On 26 juil. 2014, at 09:08, Ivan =C4=8Cuki=C4=87 <ivan.cukic@kde.org>=
 wrote:
> >> qore.std.debug::log(z)
> >=20
> > Please, just don't put a 'q' everywhere instead of k, c etc. :)
>=20
> Sorry, late night typo. I was thinking about quotation and strings at=
 the
> same time.
>=20
> Which brings this question: python style string ? Meaning single and =
double
> quote might be used

Strings are another topic for discussion indeed. Personally, I'd like t=
o avoid=20
any difference between 'string' and "string".

I did play around with the idea that "string" could be a translatable s=
tring=20
(e.g. because it appears in the GUI) and 'string' could be a non-transl=
atable=20
constant (e.g. for use as a configuration key) .. but that least all of=
 about=20
30s until I remembered that there is need for things like plural transl=
ation=20
different from normal translation, translation comments, etc.

In general, my plan was to be very unimaginative with strings and map t=
o what=20
QString does so that we can use QString in the runtime. I wouldn't norm=
ally do=20
that except that if funq is to be used with QML and existing Qt librari=
es and=20
application code, using QString as the native internal string system me=
ans no=20
translation wall in the VM when strings cross that barrier. This turned=
 out to=20
be one of the big wins with the new Javascript engine for QML2 ...

> > BTW, there is another project called funq - at codeplex... :/
>=20
> And if i've understood correctly, not even related to functional prog=
ramming
> :/

It has 2 ratings and isn't a language. I'm fine with the duplication.

=2D-=20
Aaron J. Seigo
--nextPart2507788.gXOmDaZaXN
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTuJ0ACgkQ1rcusafx20PRvgCgkLgfJ+e8RSXVY09YWeM6wNe9
nYsAmwbEe3P6iJ1lnIdmXPIREwha5WBR
=Lj9Y
-----END PGP SIGNATURE-----

--nextPart2507788.gXOmDaZaXN--


From aseigo@kde.org  Sat Jul 26 14:20:11 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id DF07BB37318
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 14:20:04 +0000 (UTC)
Received: from freedom.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 1F3F22DC040
 for <funq-devel@kde.org>; Sat, 26 Jul 2014 08:20:04 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Function definition
Date: Sat, 26 Jul 2014 16:20:02 +0200
Message-ID: <3905571.vK41ElYNK9@freedom>
User-Agent: KMail/4.14 pre (Linux/3.11.10-17-desktop; KDE/4.14.60; i686;
 git-95c820f; 2014-03-05)
In-Reply-To: <2028072.RTufpb6hdy@drako>
References: <11720789.3hBYssZlgt@drako> <7450946.EhCm2akukG@freedom>
 <2028072.RTufpb6hdy@drako>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2668341.pi4s4Mu1qk";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 14:20:11 -0000


--nextPart2668341.pi4s4Mu1qk
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Saturday, July 26, 2014 15:54:58 Ivan =C4=8Cuki=C4=87 wrote:
> > So my opinion on this is: let's try and keep it familiar to C++ peo=
ple and
> > if we find that the way to get the needed / desired compile speed i=
s to
> > mess with the ordering, then we can do so then.
>=20
> No problems with that. I just like complaining ;)

I enjoy your complaints. ;) Seriously: They are making me think ever ha=
rder=20
about the details, which is exactly what is needed. Keep it coming! :)

=2D-=20
Aaron J. Seigo
--nextPart2668341.pi4s4Mu1qk
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPTuRIACgkQ1rcusafx20PF4gCeOe8EBiOdHoazt/ABmiN7oZnO
j3gAn0qQ0qF8AqH3mLyUzEkpLO1KaIyc
=O0Ar
-----END PGP SIGNATURE-----

--nextPart2668341.pi4s4Mu1qk--


From richmoore44@gmail.com  Sat Jul 26 19:47:33 2014
Return-Path: <richmoore44@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-qg0-x236.google.com (mail-qg0-x236.google.com
 [IPv6:2607:f8b0:400d:c04::236])
 by postbox.kde.org (Postfix) with ESMTP id 82A25B373EC;
 Sat, 26 Jul 2014 19:47:22 +0000 (UTC)
Received: by mail-qg0-f54.google.com with SMTP id z60so6677878qgd.41
 for <multiple recipients>; Sat, 26 Jul 2014 12:47:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=f1kNjZ1bBV6ADatoIlkaxOW5LMRxQuTbnEFAmMVNRTE=;
 b=j5G1gqqKsJkrfTeFQLsck/C/xKtOOL/CnS0SGjudSz4vN84xPoX2u80IFvK6zsOAzn
 Nsd0hlBFvfUacWJEzzqWZmcAb5RFWm7QR1XgpSblAMvEApPy76OxLmNOKlmllV7JuThE
 7qDXK/z3C2j24exVc6cAQLNBUaJa9OAlfmTaXYK0IVchN6tg4BjMCyv7bPpB9q8uFV5+
 +mL5ilBNlmxaQFzjJb+R0kt2QMoXiXoc+v4F2jpdjn2iZfPEIZnrQlEnpUP/8qhqEO6u
 kukIV1X7IzQaxe7cD12+LIxXSOToRpK0VZvHoJkVkKfaJHlyA1i09sXuHy+o/MReq+p9
 9yug==
MIME-Version: 1.0
X-Received: by 10.224.131.71 with SMTP id w7mr40862366qas.91.1406404041551;
 Sat, 26 Jul 2014 12:47:21 -0700 (PDT)
Received: by 10.224.69.130 with HTTP; Sat, 26 Jul 2014 12:47:21 -0700 (PDT)
In-Reply-To: <7450952.jBAg3jIcCj@freedom>
References: <3927031.xLL8ZEpcKd@freedom>
 <9E6DF120-D63D-4F1C-87D7-DDE8047F3EA9@edeltech.ch>
 <CABjEcM_oAAzHU+DH+K7ui2=d=oM=MXKpzAugNixsrOE6OMPmPg@mail.gmail.com>
 <7450952.jBAg3jIcCj@freedom>
Date: Sat, 26 Jul 2014 20:47:21 +0100
Message-ID: <CAMp7mVskG=nVEJwubwxc_powwDhJy7Lk=08ckaO9E-+nf_6uTQ@mail.gmail.com>
Subject: Re: Quick survey: func(..) {..} versus (..) {..}
From: Richard Moore <richmoore44@gmail.com>
To: "Aaron J. Seigo" <aseigo@kde.org>
Content-Type: multipart/alternative; boundary=001a11c281544eba7704ff1df5d8
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
Cc: funq-devel@kde.org
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 26 Jul 2014 19:47:33 -0000

--001a11c281544eba7704ff1df5d8
Content-Type: text/plain; charset=ISO-8859-1

On 26 July 2014 15:03, Aaron J. Seigo <aseigo@kde.org> wrote:

> On Saturday, July 26, 2014 07:58:42 Jay Woods wrote:I actually expect
> there to be real-world limits on such things anyways as
> there is no guarantee that Module A used by  Module B will retain the same
> return signatures when the code is reloaded at runtime (hot reloading).
>
> Given the importance I'd like to see on multi-process architectures and
> therefore the message passing that will happen, the semantics of function
> calls are only going to be a certain (hopefully somewhat small) % of the
> means
> by which code is coupled together. I half-expect message passing typing to
> be
> more important than function return typing.
>
>
An example of an area where this causes problems is Java. In Java even
though it uses checked exceptions, the exceptions aren't part of the
function signature. It turns out that in some cases having an unexpected
exception thrown can cause the JVM to crash if you mix older code with
newer library versions (this was with stuff built against 1.2 running
against 1.3).

Rich.

--001a11c281544eba7704ff1df5d8
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
_quote">On 26 July 2014 15:03, Aaron J. Seigo <span dir=3D"ltr">&lt;<a href=
=3D"mailto:aseigo@kde.org" target=3D"_blank">aseigo@kde.org</a>&gt;</span> =
wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"">On Saturday, July 26, 2014 0=
7:58:42 Jay Woods wrote:I actually expect there to be real-world limits on =
such things anyways as<br>
</div>
there is no guarantee that Module A used by =A0Module B will retain the sam=
e<br>
return signatures when the code is reloaded at runtime (hot reloading).<br>
<br>
Given the importance I&#39;d like to see on multi-process architectures and=
<br>
therefore the message passing that will happen, the semantics of function<b=
r>
calls are only going to be a certain (hopefully somewhat small) % of the me=
ans<br>
by which code is coupled together. I half-expect message passing typing to =
be<br>
more important than function return typing.<br>
<div class=3D""><br></div></blockquote><div><br></div><div>An example of an=
 area where this causes problems is Java. In Java even though it uses check=
ed exceptions, the exceptions aren&#39;t part of the function signature. It=
 turns out that in some cases having an unexpected exception thrown can cau=
se the JVM to crash if you mix older code with newer library versions (this=
 was with stuff built against 1.2 running against 1.3).</div>
<div><br></div><div>Rich.</div><div>=A0</div></div></div></div>

--001a11c281544eba7704ff1df5d8--

From aseigo@kde.org  Mon Aug  4 17:57:49 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 97E0CB37353
 for <funq-devel@kde.org>; Mon,  4 Aug 2014 17:57:43 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 94CD22DC040
 for <funq-devel@kde.org>; Mon,  4 Aug 2014 11:57:42 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: processes
Date: Mon, 04 Aug 2014 19:57:31 +0200
Message-ID: <4991412.KO4pPSftTG@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart234530606.sUYmv3xkIZ";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 04 Aug 2014 17:57:49 -0000


--nextPart234530606.sUYmv3xkIZ
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

Hi everyone ...=20

Was a busy week for me here (including a laptop hardware failure... meh=
) so=20
didn't get back to the list until now. I have continued to push forward=
 the=20
specifications, however, and after a good number of revisions processes=
 and=20
supervision are ready for your review and feedback.

One of the key features of funq will be these in-process "processes"; m=
uch=20
like green threads which are run inside a VM and look like threads to t=
he=20
application but which are not actually native threads, these "green pro=
cesses"=20
look and behave very much like "real" OS processes but are just long-ru=
nning=20
functions which have their execution transparently suspended and starte=
d by a=20
scheduler in the VM. This makes them quite cheap and a lot less complex=
 to=20
handle.

The goal is to encourage breaking applications up into many cooperative=
=20
processes. This allows:

* compartmentalizing failure: an error in one part of the code leading =
to a=20
crash will not bring down the whole application
* confident coding: most of us have been taught to check and catch all =
error=20
conditions in our code; not only do many developers fail to do this, bu=
t it=20
leads to hard to maintain code in many cases. If it is a valid idiom to=
 allow=20
an error to crash a component, then one can ignore most errors and only=
 code=20
for the success paths. A crash then becomes a generic error handler whi=
ch the=20
application can cope with easily.
* concurrency: each VM will be able to run 1 or more schedulers and div=
ide the=20
running processes between them; this will allow applications to scale a=
long=20
with the number of processor cores available to it
* distribution: rather than having to run an entire application on just=
 one=20
computer system, breaking things into processes will allow an applicati=
on to=20
be distributed across multiple discreet computers at runtime and largel=
y=20
transparently to the application.[1]

In support of these goals, two important features are available:

1) Message queues: each process gets a message queue and processes can =
send=20
messages to each other. These message queues are asynchronous and can b=
e=20
filtered by the receiver

2) Supervisors: a supervisor is a process whose only job is to start pr=
ocess=20
and sit and then watch them. Supervisors can restart processes when the=
y crash=20
(supports the 'confident coding' concept) as well as manage pools of re=
sources=20
(e.g. a pool of database connection processes)

I have documented processes and supervision as I currently intend to im=
plement=20
in the git repository under docs/processes.md and docs/supervision.md.

Feedback on them is most welcome ....

A quick overview of relevant API:

// start a process
PID =3D std.process::exec(MyModule::MyFunc, [param1, param2]);

// send a message to a process without expecting a reply
{ $numbers, [1, 2, 3] } -> PID;

// send a message to a process as a two-way conversation
ConversationId =3D { $numbers, [1, 2, 3] } <-> PID;

Those are the most important basics when it comes to processes. I'll to=
uch on=20
supervision in the next email ...

[1] this opens the door to some truly exciting prospects such as pratic=
al=20
multi-agent systems=20

=2D-=20
Aaron J. Seigo
--nextPart234530606.sUYmv3xkIZ
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPfyZEACgkQ1rcusafx20MA2QCfULEkyrwu3uvM07fGlU3GbD4r
Vs0An3u7/WYNEWfQfxbMqIBEIjjgg+W3
=J/Vp
-----END PGP SIGNATURE-----

--nextPart234530606.sUYmv3xkIZ--


From aseigo@kde.org  Mon Aug  4 18:18:02 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id EFE43B37322
 for <funq-devel@kde.org>; Mon,  4 Aug 2014 18:17:54 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 2E2052DC040
 for <funq-devel@kde.org>; Mon,  4 Aug 2014 12:17:53 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Subject: supervision
Date: Mon, 04 Aug 2014 20:17:48 +0200
Message-ID: <4010479.kyjBc1uzVc@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart3243771.tHzeXr0ENl";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 04 Aug 2014 18:18:02 -0000


--nextPart3243771.tHzeXr0ENl
Content-Type: multipart/mixed; boundary="nextPart2505302.Nh0JiN6EAd"
Content-Transfer-Encoding: quoted-printable

This is a multi-part message in MIME format.

=2D-nextPart2505302.Nh0JiN6EAd
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"

Hi ..

As explained in the previous email, supervisors oversee processes. To make 
this as easy and evident as possible, I decided to allow defining how the 
supervisors in an application should be constructed with a declarative syntax 
that is modeled after Qt's QML.

An example (from the git repo) is attached. Documentation is in 
docs/supervision.md. It's not particularly complex, or at least I hope it 
isn't :)

The funq compiler will turn the declarative syntax into a data structure that 
is available at runtime which reflects the supervision processes. There are 
still some details that I'm working out, but I am already fairly happy with 
where it is now.. 

One point I'm still very undecided on, however, is supervisors that run user 
functions: currently in the design supervisors are processes which are 
entirely defined and managed by the funq compiler and runtime. This keeps is 
simple. It could be possible to allow supervisors to also run a user defined 
function as its "main"; process management would happen in addition to that 
function running with the only caveat being that it could be possible for the 
user defined function to enter a non-halting state which would prevent the 
process management code from being run. A way around this would be to make 
supervisors truly special processes internally rather than just regular funq 
functions-in-a-process with the scheduler actively 'pre-empting' such 
supervisors to do process management. This would make the internals a little 
more complex, which is why I haven't designed that in, but it could be quite 
useful to have. I keep going back and forth on whether to do it or not :)

=2D- 
Aaron J. Seigo
=2D-nextPart2505302.Nh0JiN6EAd
Content-Disposition: attachment; filename="supervision.fnqs"
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="UTF-8"; name="supervision.fnqs"

Supervisor {
    id: cardTradingGame

    Policy {
        id: restarter
        restart: yes
        maxFails: 5
        timeout: 5000
        log: true
    }

    Policy {
        id: quitOnExit
        func: org.myproject.shutdown
        log: true
    }

    onFailure: restarter
    onCleanExit: quitOnExit

    Supervisor {
        id: networking

        Process {
            id: networkBroker
            func: org.myproject.NetworkPool.pool(localhost, 8000)
            poolSize: 5

            onFailure: {
                restart: all,
                maxFails: 10,
                timeout: 1000
            }
        }
    }

    Supervisor {
        id: negotiations

        onFailure: {
            restart: no
        }

        Process {
            id: sale
            func: org.myroject.negotiate.sell
            createOnDemand: true
            poolSize: 20
        }

        Process {
            id: auction
            func: org.myroject.negotiate.auction
            createOnDemand: true
        }
    }

    Supervisor {
        id: pools
        func: std.resourcePool

        onFailure: restarter

        Process {
            id: resource
            createOnDemand: true
        }
    }

    Process {
        id: userInterface
        func: org.myproject.GUI
        priority: critical // ensure it gets more cycles
    }
}
=2D-nextPart2505302.Nh0JiN6EAd--
This is a multi-part message in MIME format.

--nextPart2505302.Nh0JiN6EAd
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"

Hi ..

As explained in the previous email, supervisors oversee processes. To make 
this as easy and evident as possible, I decided to allow defining how the 
supervisors in an application should be constructed with a declarative syntax 
that is modeled after Qt's QML.

An example (from the git repo) is attached. Documentation is in 
docs/supervision.md. It's not particularly complex, or at least I hope it 
isn't :)

The funq compiler will turn the declarative syntax into a data structure that 
is available at runtime which reflects the supervision processes. There are 
still some details that I'm working out, but I am already fairly happy with 
where it is now.. 

One point I'm still very undecided on, however, is supervisors that run user 
functions: currently in the design supervisors are processes which are 
entirely defined and managed by the funq compiler and runtime. This keeps is 
simple. It could be possible to allow supervisors to also run a user defined 
function as its "main"; process management would happen in addition to that 
function running with the only caveat being that it could be possible for the 
user defined function to enter a non-halting state which would prevent the 
process management code from being run. A way around this would be to make 
supervisors truly special processes internally rather than just regular funq 
functions-in-a-process with the scheduler actively 'pre-empting' such 
supervisors to do process management. This would make the internals a little 
more complex, which is why I haven't designed that in, but it could be quite 
useful to have. I keep going back and forth on whether to do it or not :)

-- 
Aaron J. Seigo
--nextPart2505302.Nh0JiN6EAd
Content-Disposition: attachment; filename="supervision.fnqs"
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="UTF-8"; name="supervision.fnqs"

Supervisor {
    id: cardTradingGame

    Policy {
        id: restarter
        restart: yes
        maxFails: 5
        timeout: 5000
        log: true
    }

    Policy {
        id: quitOnExit
        func: org.myproject.shutdown
        log: true
    }

    onFailure: restarter
    onCleanExit: quitOnExit

    Supervisor {
        id: networking

        Process {
            id: networkBroker
            func: org.myproject.NetworkPool.pool(localhost, 8000)
            poolSize: 5

            onFailure: {
                restart: all,
                maxFails: 10,
                timeout: 1000
            }
        }
    }

    Supervisor {
        id: negotiations

        onFailure: {
            restart: no
        }

        Process {
            id: sale
            func: org.myroject.negotiate.sell
            createOnDemand: true
            poolSize: 20
        }

        Process {
            id: auction
            func: org.myroject.negotiate.auction
            createOnDemand: true
        }
    }

    Supervisor {
        id: pools
        func: std.resourcePool

        onFailure: restarter

        Process {
            id: resource
            createOnDemand: true
        }
    }

    Process {
        id: userInterface
        func: org.myproject.GUI
        priority: critical // ensure it gets more cycles
    }
}
--nextPart2505302.Nh0JiN6EAd--

--nextPart3243771.tHzeXr0ENl
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPfzkwACgkQ1rcusafx20MgSQCZAQqiN/fygcnKv2+5N/XpGquq
AE8AoKu7npC1q/UufmMoiJOA8Cc7DJg4
=fFt0
-----END PGP SIGNATURE-----

--nextPart3243771.tHzeXr0ENl--


From aseigo@kde.org  Mon Aug  4 18:36:41 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 1CCF2B37322
 for <funq-devel@kde.org>; Mon,  4 Aug 2014 18:36:35 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 4D5D82DC040
 for <funq-devel@kde.org>; Mon,  4 Aug 2014 12:36:34 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Subject: compiler toolchain
Date: Mon, 04 Aug 2014 20:36:29 +0200
Message-ID: <2166318.R74jllJQQO@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2963908.svBCq4Vah4";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 04 Aug 2014 18:36:41 -0000


--nextPart2963908.svBCq4Vah4
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

A short word on my thoughts for the compiler toolchain to allow your mi=
nds to=20
start working through the implications and start dreaming ideas ;)

The plan is to give the compiler hooks throughout for additional system=
s to=20
tap into. The obvious example to use here is clang (http://clang.llvm.o=
rg/)

The plan is to expose not just an AST (IDE-friendly and all that) but t=
o allow=20
hooks for instrumenting, adding and changing the generated results at v=
arious=20
steps. Compiler plugins will be able to extend the functionality of the=
=20
compiler using these hooks.

For instance, the integrated testing framework will be implemented as a=
=20
compiler plugin. In non-release builds it will instrument the compiled =
code to=20
allow it to capture which functions and lines get run while running any=
 given=20
test. This will allow for:

* very useful code coverage reports that go beyond "this line was run 8=
 times=20
in testing"

* automated running of unit tests which touch functions that have been =
changed=20
since the last run

* code injection to support patterns like mocking that are based on act=
ual=20
modules / functions in the code

The integrated documentation system will similarly be able to note=20
documentation coverage, when documentation no longer matches what it=20=

documents, ....

Refactoring tools will also be more easily added with this kind of=20
infrastructure.

Another benefit to this approach is that funq can provide things like a=
n=20
integrated testing and documentation framework without welding it too t=
ightly=20
to the compiler and runtime.

It should be possible to write these plugins in funq itself, though a C=
++ API=20
will probably also be offered for use by more complex tools or IDEs.

=2D-=20
Aaron J. Seigo
--nextPart2963908.svBCq4Vah4
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPf0q0ACgkQ1rcusafx20NesgCfXeCMUM8iZ6/cFhxuqQRKTHqN
AXUAoKT/pfc4Tkn0Lp3gP7J8Hf3Q21T7
=D252
-----END PGP SIGNATURE-----

--nextPart2963908.svBCq4Vah4--


From notmart@gmail.com  Tue Aug  5 15:34:56 2014
Return-Path: <notmart@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wg0-x233.google.com (mail-wg0-x233.google.com
 [IPv6:2a00:1450:400c:c00::233])
 by postbox.kde.org (Postfix) with ESMTP id AE258B37C57
 for <funq-devel@kde.org>; Tue,  5 Aug 2014 15:34:50 +0000 (UTC)
Received: by mail-wg0-f51.google.com with SMTP id b13so1196443wgh.10
 for <funq-devel@kde.org>; Tue, 05 Aug 2014 08:34:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:user-agent:references:in-reply-to:mime-version
 :content-type:content-transfer-encoding:message-id;
 bh=NwjIUW86uRtYl+mmoIgKdK9hnOJgwMFZtaKJFRHyKlU=;
 b=GoCUK6f6kLBMNNeQSwDELvh/uq9XrPnuE/rFNstbTGqibSyf7jAFONiNgzpOKVKiz2
 0usnYAPLxg25hCjdv/TULVQhUNHPNWT8N+O6X0n70w2m2V0EwO/KLohSav/ZoRTAtPzK
 r+DcqXpDrn8wwUs6DvFHzB87Vv1FKHmLjkdWEMJsOTAkJblwB+urFjB7uXsHe11FSMqg
 P6tS1d4TiQ8C/n4W/WBvLIoEzyjiNzYlGtObbu+KMES5nloKZRPGNi99MJf+4yayEGHO
 w+K5ueLq5wbkYVG0kdyCSJkILxLznCe4xrnWxl+o9BTis4KyFPLj1oET2cv3jbtcfIIA
 6Lzw==
X-Received: by 10.180.80.225 with SMTP id u1mr7412309wix.69.1407252889307;
 Tue, 05 Aug 2014 08:34:49 -0700 (PDT)
Received: from phobos.diaunet
 (host251-213-dynamic.1-79-r.retail.telecomitalia.it. [79.1.213.251])
 by mx.google.com with ESMTPSA id cx5sm4961566wjb.8.2014.08.05.08.34.45
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Tue, 05 Aug 2014 08:34:48 -0700 (PDT)
From: Marco Martin <notmart@gmail.com>
To: funq-devel@kde.org
Subject: Re: supervision
Date: Tue, 5 Aug 2014 17:34:43 +0200
User-Agent: KMail/1.13.7 (Linux/3.7.10-1.1-desktop; KDE/4.11.60; i686; ; )
References: <4010479.kyjBc1uzVc@serenity>
In-Reply-To: <4010479.kyjBc1uzVc@serenity>
MIME-Version: 1.0
Content-Type: Text/Plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Message-Id: <201408051734.44152.notmart@gmail.com>
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Tue, 05 Aug 2014 15:34:56 -0000

On Monday 04 August 2014, Aaron J. Seigo wrote:
> 
> One point I'm still very undecided on, however, is supervisors that run
> user functions: currently in the design supervisors are processes which
> are entirely defined and managed by the funq compiler and runtime. This
> keeps is simple. It could be possible to allow supervisors to also run a

could this cause a supervisor that supervises a supervisor that supervises a 
supervisor.. maybe even a circular dependency?



-- 
Marco Martin

From aseigo@kde.org  Tue Aug  5 20:34:27 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id AB217B37C77
 for <funq-devel@kde.org>; Tue,  5 Aug 2014 20:34:21 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 60E4A2DC040
 for <funq-devel@kde.org>; Tue,  5 Aug 2014 14:34:20 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: supervision
Date: Tue, 05 Aug 2014 22:34:13 +0200
Message-ID: <26062001.dqMCBY34x4@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <201408051734.44152.notmart@gmail.com>
References: <4010479.kyjBc1uzVc@serenity>
 <201408051734.44152.notmart@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart6119998.VDzZYDrjHj";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Tue, 05 Aug 2014 20:34:27 -0000


--nextPart6119998.VDzZYDrjHj
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Tuesday, August 5, 2014 17.34:43 Marco Martin wrote:
> On Monday 04 August 2014, Aaron J. Seigo wrote:
> > One point I'm still very undecided on, however, is supervisors that=
 run
> > user functions: currently in the design supervisors are processes w=
hich
> > are entirely defined and managed by the funq compiler and runtime. =
This
> > keeps is simple. It could be possible to allow supervisors to also =
run a
>=20
> could this cause a supervisor that supervises a supervisor that super=
vises a
> supervisor..=20

supervisors that supervise other supervisors is a common pattern in Erl=
ang and=20
is already allowed for in the current funq conceptual design. this allo=
ws one=20
to have different supervision policies for different sets of processes =
while=20
still having a single "top" process that you can stop to stop the entir=
e=20
application.

in any case, having user code also running in the supervisor does make =
it more=20
complex and it certainly opens up more possibilities for the user to "g=
et it=20
wrong". this is why i'm really on the fence with whether to allow this =
or not.

unless i can find a really compelling use case, i'm probably going to l=
eave it=20
out at least for now and add it later if it turns out to be actually us=
eful.

i do like the "cleanliness" of having supervisors do only that: supervi=
se.

=2D-=20
Aaron J. Seigo
--nextPart6119998.VDzZYDrjHj
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPhP8UACgkQ1rcusafx20PYbACeLAz4QjccrWwAXd2dfJiLBo5i
rJwAnRSvVtb4gHPJCwgNS5curliirNEo
=Mvjo
-----END PGP SIGNATURE-----

--nextPart6119998.VDzZYDrjHj--


From aseigo@kde.org  Tue Aug  5 21:10:15 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 7126DB37C8D
 for <funq-devel@kde.org>; Tue,  5 Aug 2014 21:10:09 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 52BB02DC040
 for <funq-devel@kde.org>; Tue,  5 Aug 2014 15:10:08 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: documentation
Date: Tue, 05 Aug 2014 23:10:01 +0200
Message-ID: <1558147.axcyTr3Tsq@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart27064372.HlHtRCVuA8";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Tue, 05 Aug 2014 21:10:15 -0000


--nextPart27064372.HlHtRCVuA8
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

Hi :)

So, documentation. That thing developers often don't write ;)

There are a few goals for documentation support in funq:

* make it easy to write _good_ documentation
* encourage standardized formatting
* give the developer good hints as to how well they are doing with docu=


There are a few different types of documentation in scope:

* module licensing: who wrote it, what is the license, ...?
* module documentation: what does the module do? how should it be used?=

* function documentation: what does a function do? parameters?

The idea is to create a documentation system that plugs into the compil=
er=20
toolchain so that there is maximum opportunity to do useful, powerful t=
hings.

Examples:

For licensing .. this is generally the same for every file in a project=
. What=20
changes, if anything, is the people who have contributed to that file. =
That=20
information is often *wrong* in headers in C / C++ projects because it =
is a=20
tedious, manual process. When someone's email changes it means changing=
 it in=20
many files (thank goodness for multi-file search and replace). So perha=
ps=20
instead there should be a top-level file containing licensing entities =
like:

License {
=09id: aseigo_gpl
=09who: Aaron Seigo
=09email: aseigo@kde.org
=09license: GPLv2+
}

and then in a module:

MyModule 1.0 {

/*
=09License: aseigo_gpl, notmart_gpl
=09...
*/


When writing a function it would be nice to be able to pick between a c=
ouple=20
standard forms of function documentation such as "functional overview" =
and=20
"parameter-by-parameter description". The AST API should expose a way f=
or a=20
text editor / IDE to request the boilerplate for the current function f=
or it=20
to insert. So a simple editor macro could get you a good way to standar=
dized=20
documentation; it could even be used to drive a simple UI .. imagine an=
 IDE=20
where the documentation was not shown as plain text but as an editable =
form.=20
(It would be saved as plain text, of course :)

This should also allow a project to be checked for licensing cleanlines=
s. It=20
would mean that when a file is copied from one project to another that =
the=20
licensing entity would also need to be brought over separately, but ent=
ities=20
w/out definition could be caught and reported as warnings / errors.


It should be possible to get warned when documentation no longer matche=
s a=20
function (or even better: automatically alter documentation as the func=
tion=20
changes; e.g. if a parameter changes name, change the documentation to =
reflect=20
this automatically).


It should be possible to request documentation coverage reports. These =
could=20
include not only the raw numbers but even reinforcing feedback in the f=
orm of=20
a star rating or points system to provide positive reinforcement to the=
=20
developer for doing a good job.


Thoughts? Ideas?

I'm still looking for the exact syntax to use for documentation. It oug=
ht to=20
be easily machine parseable without ambiguity, allow for reasonable amo=
unts of=20
formatting, referencing other functions, referencing parameters .. and =
be easy=20
to learn. Prior art includes doxygen (not my favorite thing in the worl=
d, but=20
ubiquitous), pydoc, perldoc ...

If anyone would like to work on defining the syntax,.... :) If not, I'l=
l get=20
to it once I have documented a few of the more "boring" pieces like ope=
rators=20
and comprehensions ...

=2D-=20
Aaron J. Seigo
--nextPart27064372.HlHtRCVuA8
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPhSCkACgkQ1rcusafx20PJHQCgoF8O8dS8Qu/TDtrySKGUWjMp
+kwAmgL0ODT0yx76x5a5s4nazdcBioUY
=U5PL
-----END PGP SIGNATURE-----

--nextPart27064372.HlHtRCVuA8--


From notmart@gmail.com  Wed Aug  6 09:11:45 2014
Return-Path: <notmart@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x231.google.com (mail-wi0-x231.google.com
 [IPv6:2a00:1450:400c:c05::231])
 by postbox.kde.org (Postfix) with ESMTP id D7558B373EE
 for <funq-devel@kde.org>; Wed,  6 Aug 2014 09:11:39 +0000 (UTC)
Received: by mail-wi0-f177.google.com with SMTP id ho1so2843651wib.4
 for <funq-devel@kde.org>; Wed, 06 Aug 2014 02:11:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:user-agent:references:in-reply-to:mime-version
 :content-type:content-transfer-encoding:message-id;
 bh=8qiHvDc1hH65edeCMleb2MjB8XPty8wMfKrq/HlQtNc=;
 b=pBn/NrPpibvWcyHwJial6MUSdIc0FXdiXpPxLG5IeC+fRyugm0Dgcvqap0h1RwVHZm
 uye7fx5gZdIQfpBAPFDYuGS354J/ZSb9o5tHk0/N9ffOjJ5YW3ZjAdn3gg3MKO9r3zEC
 HvhY0FiimTgguXbXzheu1WzRaZhHkkuBiKQZoAuddBKsb+ATrA1bIsFQtBop7bigikiP
 0y5SwW9RS+dqFNJt5Hf0kAMua34RiNKuea1A9kqQXIUIEa/Jv9/Gsavd1bzMblGIGbaM
 VQ5ZSCDut4sT/imc3BdoH99hI1Dt+G7WLosFnIROQT0hNj/Vr4YAD/YWaZFv/0Rul4vH
 U6Dg==
X-Received: by 10.194.185.238 with SMTP id ff14mr14205853wjc.9.1407316299622; 
 Wed, 06 Aug 2014 02:11:39 -0700 (PDT)
Received: from phobos.diaunet
 (host126-37-dynamic.183-80-r.retail.telecomitalia.it. [80.183.37.126])
 by mx.google.com with ESMTPSA id fb8sm16301139wib.15.2014.08.06.02.11.38
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Wed, 06 Aug 2014 02:11:38 -0700 (PDT)
From: Marco Martin <notmart@gmail.com>
To: funq-devel@kde.org
Subject: Re: documentation
Date: Wed, 6 Aug 2014 11:11:34 +0200
User-Agent: KMail/1.13.7 (Linux/3.7.10-1.1-desktop; KDE/4.11.60; i686; ; )
References: <1558147.axcyTr3Tsq@serenity>
In-Reply-To: <1558147.axcyTr3Tsq@serenity>
MIME-Version: 1.0
Content-Type: Text/Plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Message-Id: <201408061111.35011.notmart@gmail.com>
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Wed, 06 Aug 2014 09:11:45 -0000

On Tuesday 05 August 2014, Aaron J. Seigo wrote:
> Hi :)
> 
> So, documentation. That thing developers often don't write ;)
> 
> There are a few goals for documentation support in funq:
> 
> * make it easy to write _good_ documentation
> * encourage standardized formatting
> * give the developer good hints as to how well they are doing with docu
> 
> There are a few different types of documentation in scope:
> 
> * module licensing: who wrote it, what is the license, ...?
> * module documentation: what does the module do? how should it be used?
> * function documentation: what does a function do? parameters?
> 
> The idea is to create a documentation system that plugs into the compiler
> toolchain so that there is maximum opportunity to do useful, powerful
> things.
> 
> Examples:
> 
> For licensing .. this is generally the same for every file in a project.
> What changes, if anything, is the people who have contributed to that
> file. That information is often *wrong* in headers in C / C++ projects
> because it is a tedious, manual process. When someone's email changes it
> means changing it in many files (thank goodness for multi-file search and
> replace). So perhaps instead there should be a top-level file containing
> licensing entities like:
> 
> License {
> 	id: aseigo_gpl
> 	who: Aaron Seigo
> 	email: aseigo@kde.org
> 	license: GPLv2+
> }
> 
> and then in a module:
> 
> MyModule 1.0 {
> 
> /*
> 	License: aseigo_gpl, notmart_gpl
> 	...
> */

wouldn't it allow also
License: aseigo_gpl, notmart_bsd

that would mix 2 licenses in the same file?

maybe something like
 MyModule 1.0 {
  License {
    license: GPLv2+
    ids: aseigo_gpl, notmart_gpl
  }

so it checks they are all the same?


-- 
Marco Martin

From aseigo@kde.org  Wed Aug  6 09:33:56 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 3FEFFB37C54
 for <funq-devel@kde.org>; Wed,  6 Aug 2014 09:33:50 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 4CA182DC040
 for <funq-devel@kde.org>; Wed,  6 Aug 2014 03:33:49 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: documentation
Date: Wed, 06 Aug 2014 11:33:38 +0200
Message-ID: <2228198.63Y8dcnS7B@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <201408061111.35011.notmart@gmail.com>
References: <1558147.axcyTr3Tsq@serenity>
 <201408061111.35011.notmart@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1465860.ozofT9RmOP";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Wed, 06 Aug 2014 09:33:56 -0000


--nextPart1465860.ozofT9RmOP
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Wednesday, August 6, 2014 11.11:34 Marco Martin wrote:
> that would mix 2 licenses in the same file?

yes; and with some simple processing tools it should be able to tell yo=
u the=20
*actual* final license of your application and whether or not there are=
 any=20
licensing problems.

> maybe something like
>  MyModule 1.0 {
>   License {
>     license: GPLv2+
>     ids: aseigo_gpl, notmart_gpl
>   }

indeed, probably needs to communicate the intended license as it can no=
t just=20
be derived from the combined contributions in all cases. so, yes, this =
kind of=20
syntax will absolutely be needed.

additional information such as bug tracker location, homepage, etc. sho=
uld=20
also be allowed in the top-level project metadata. modules would not ne=
ed to=20
reference that, but having it in the package would be rather nice compa=
red to=20
what we tend to do today. (e.g. put some values there once and then fai=
l to=20
keep it up to date. ;)


aside: i've also contemplated things like having the ability to registe=
r your=20
information in a central location so that you can change your personal=20=

information (e.g. email) in one place and have it reflected in *all* pr=
ojects=20
that use your code. not sure exactly how to do that (where to put such =
things,=20
etc.) but it would be nice to eventually get there in the future ...

=2D-=20
Aaron J. Seigo
--nextPart1465860.ozofT9RmOP
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPh9nYACgkQ1rcusafx20OKOwCfTdf0GtNOqlObWCGEfR5XHyXK
YNMAoJ0Zbzx9BdQHNM8mbyWedIhx3q9N
=J5hF
-----END PGP SIGNATURE-----

--nextPart1465860.ozofT9RmOP--


From samuel.gaist@edeltech.ch  Fri Aug  8 22:33:07 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id EE276B372F7
 for <funq-devel@kde.org>; Fri,  8 Aug 2014 22:33:01 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s78MX1i2010022
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Sat, 9 Aug 2014 00:33:01 +0200
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: supervision
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <26062001.dqMCBY34x4@serenity>
Date: Sat, 9 Aug 2014 00:33:00 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <034B9EF1-C72E-44AA-84D0-C90D68A81909@edeltech.ch>
References: <4010479.kyjBc1uzVc@serenity>
 <201408051734.44152.notmart@gmail.com> <26062001.dqMCBY34x4@serenity>
To: "funq-devel@kde.org" <funq-devel@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 08 Aug 2014 22:33:07 -0000


On 5 ao=FBt 2014, at 22:34, Aaron J. Seigo <aseigo@kde.org> wrote:

> On Tuesday, August 5, 2014 17.34:43 Marco Martin wrote:
>> On Monday 04 August 2014, Aaron J. Seigo wrote:
>>> One point I'm still very undecided on, however, is supervisors that =
run
>>> user functions: currently in the design supervisors are processes =
which
>>> are entirely defined and managed by the funq compiler and runtime. =
This
>>> keeps is simple. It could be possible to allow supervisors to also =
run a
>>=20
>> could this cause a supervisor that supervises a supervisor that =
supervises a
>> supervisor..=20
>=20
> supervisors that supervise other supervisors is a common pattern in =
Erlang and=20
> is already allowed for in the current funq conceptual design. this =
allows one=20
> to have different supervision policies for different sets of processes =
while=20
> still having a single "top" process that you can stop to stop the =
entire=20
> application.
>=20
> in any case, having user code also running in the supervisor does make =
it more=20
> complex and it certainly opens up more possibilities for the user to =
"get it=20
> wrong". this is why i'm really on the fence with whether to allow this =
or not.
>=20
> unless i can find a really compelling use case, i'm probably going to =
leave it=20
> out at least for now and add it later if it turns out to be actually =
useful.
>=20
> i do like the "cleanliness" of having supervisors do only that: =
supervise.
>=20

+1 for the cleanliness.=20

Is there any limit on how deep a supervisor tree can/should go ?


From samuel.gaist@edeltech.ch  Fri Aug  8 22:45:07 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id 6E5BAB372F7;
 Fri,  8 Aug 2014 22:44:56 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s78MitFT028732
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO);
 Sat, 9 Aug 2014 00:44:56 +0200
Content-Type: text/plain; charset=windows-1252
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: processes
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <4991412.KO4pPSftTG@serenity>
Date: Sat, 9 Aug 2014 00:44:54 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <096B7505-D932-43F8-B54C-BC233F1FC78A@edeltech.ch>
References: <4991412.KO4pPSftTG@serenity>
To: "Aaron J. Seigo" <aseigo@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
Cc: funq-devel@kde.org
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 08 Aug 2014 22:45:07 -0000


On 4 ao=FBt 2014, at 19:57, Aaron J. Seigo <aseigo@kde.org> wrote:

> Hi everyone ...=20
>=20
> Was a busy week for me here (including a laptop hardware failure... =
meh) so=20
> didn't get back to the list until now. I have continued to push =
forward the=20
> specifications, however, and after a good number of revisions =
processes and=20
> supervision are ready for your review and feedback.
>=20
> One of the key features of funq will be these in-process "processes"; =
much=20
> like green threads which are run inside a VM and look like threads to =
the=20
> application but which are not actually native threads, these "green =
processes"=20
> look and behave very much like "real" OS processes but are just =
long-running=20
> functions which have their execution transparently suspended and =
started by a=20
> scheduler in the VM. This makes them quite cheap and a lot less =
complex to=20
> handle.
>=20
> The goal is to encourage breaking applications up into many =
cooperative=20
> processes. This allows:
>=20
> * compartmentalizing failure: an error in one part of the code leading =
to a=20
> crash will not bring down the whole application
> * confident coding: most of us have been taught to check and catch all =
error=20
> conditions in our code; not only do many developers fail to do this, =
but it=20
> leads to hard to maintain code in many cases. If it is a valid idiom =
to allow=20
> an error to crash a component, then one can ignore most errors and =
only code=20
> for the success paths. A crash then becomes a generic error handler =
which the=20
> application can cope with easily.
> * concurrency: each VM will be able to run 1 or more schedulers and =
divide the=20
> running processes between them; this will allow applications to scale =
along=20
> with the number of processor cores available to it
> * distribution: rather than having to run an entire application on =
just one=20
> computer system, breaking things into processes will allow an =
application to=20
> be distributed across multiple discreet computers at runtime and =
largely=20
> transparently to the application.[1]
>=20
> In support of these goals, two important features are available:
>=20
> 1) Message queues: each process gets a message queue and processes can =
send=20
> messages to each other. These message queues are asynchronous and can =
be=20
> filtered by the receiver
>=20
> 2) Supervisors: a supervisor is a process whose only job is to start =
process=20
> and sit and then watch them. Supervisors can restart processes when =
they crash=20
> (supports the 'confident coding' concept) as well as manage pools of =
resources=20
> (e.g. a pool of database connection processes)
>=20
> I have documented processes and supervision as I currently intend to =
implement=20
> in the git repository under docs/processes.md and docs/supervision.md.
>=20
> Feedback on them is most welcome ....
>=20
> A quick overview of relevant API:
>=20
> // start a process
> PID =3D std.process::exec(MyModule::MyFunc, [param1, param2]);
>=20
> // send a message to a process without expecting a reply
> { $numbers, [1, 2, 3] } -> PID;
>=20
> // send a message to a process as a two-way conversation
> ConversationId =3D { $numbers, [1, 2, 3] } <-> PID;
>=20
> Those are the most important basics when it comes to processes. I'll =
touch on=20
> supervision in the next email ...
>=20
> [1] this opens the door to some truly exciting prospects such as =
pratical=20
> multi-agent systems=20
>=20
> --=20

About scheduling, you wrote that it will be run-time configurable. Does =
it mean there's only one scheduler implementation that can be tweaked ? =
Or will there be several (e.g. Network priority / IO Priority etc=85) =
that one can switch dynamically ?



From samuel.gaist@edeltech.ch  Fri Aug  8 22:54:02 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id B9D01B37C41;
 Fri,  8 Aug 2014 22:53:51 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s78Mross011324
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO);
 Sat, 9 Aug 2014 00:53:51 +0200
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: documentation
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <2228198.63Y8dcnS7B@serenity>
Date: Sat, 9 Aug 2014 00:53:50 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <8309A70D-A1F4-4A05-BADE-5C81545B3E2C@edeltech.ch>
References: <1558147.axcyTr3Tsq@serenity>
 <201408061111.35011.notmart@gmail.com> <2228198.63Y8dcnS7B@serenity>
To: "Aaron J. Seigo" <aseigo@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
Cc: funq-devel@kde.org
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 08 Aug 2014 22:54:02 -0000


On 6 ao=FBt 2014, at 11:33, Aaron J. Seigo <aseigo@kde.org> wrote:

> On Wednesday, August 6, 2014 11.11:34 Marco Martin wrote:
>> that would mix 2 licenses in the same file?
>=20
> yes; and with some simple processing tools it should be able to tell =
you the=20
> *actual* final license of your application and whether or not there =
are any=20
> licensing problems.
>=20
>> maybe something like
>> MyModule 1.0 {
>>  License {
>>    license: GPLv2+
>>    ids: aseigo_gpl, notmart_gpl
>>  }
>=20
> indeed, probably needs to communicate the intended license as it can =
not just=20
> be derived from the combined contributions in all cases. so, yes, this =
kind of=20
> syntax will absolutely be needed.
>=20
> additional information such as bug tracker location, homepage, etc. =
should=20
> also be allowed in the top-level project metadata. modules would not =
need to=20
> reference that, but having it in the package would be rather nice =
compared to=20
> what we tend to do today. (e.g. put some values there once and then =
fail to=20
> keep it up to date. ;)
>=20
>=20
> aside: i've also contemplated things like having the ability to =
register your=20
> information in a central location so that you can change your personal=20=

> information (e.g. email) in one place and have it reflected in *all* =
projects=20
> that use your code. not sure exactly how to do that (where to put such =
things,=20
> etc.) but it would be nice to eventually get there in the future ...
>=20
> --=20

Are you thinking of something like svn keyword substitution ?


From aseigo@kde.org  Sat Aug  9 07:20:38 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id C979AB37309
 for <funq-devel@kde.org>; Sat,  9 Aug 2014 07:20:32 +0000 (UTC)
Received: from serenity.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 64B3B2DC040
 for <funq-devel@kde.org>; Sat,  9 Aug 2014 01:20:31 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Subject: Re: supervision
Date: Sat, 09 Aug 2014 09:20:18 +0200
Message-ID: <2677416.674OHmGNNS@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <16A2B5ED-F845-4256-AC93-A4473CEAB974@edeltech.ch>
References: <4010479.kyjBc1uzVc@serenity> <26062001.dqMCBY34x4@serenity>
 <16A2B5ED-F845-4256-AC93-A4473CEAB974@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart13034474.6026H0p4Dd";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 09 Aug 2014 07:20:38 -0000


--nextPart13034474.6026H0p4Dd
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="iso-8859-1"

On Saturday, August 9, 2014 00.31:23 Samuel Gaist wrote:
> On 5 ao=FBt 2014, at 22:34, Aaron J. Seigo <aseigo@kde.org> wrote:
> > unless i can find a really compelling use case, i'm probably going =
to
> > leave it out at least for now and add it later if it turns out to b=
e
> > actually useful.
> >=20
> > i do like the "cleanliness" of having supervisors do only that: sup=
ervise.
>=20
> +1 for the cleanliness.

It is decided, then :)

> Is there any limit on how deep a tree can go ?

No.

=2D-=20
Aaron J. Seigo
--nextPart13034474.6026H0p4Dd
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPly7YACgkQ1rcusafx20PgmgCgpviYTfmfY+vNYdokuhqIXbJ2
0aIAoKVJhHjkY9pDO13jpStXXgRDXN5J
=ocDL
-----END PGP SIGNATURE-----

--nextPart13034474.6026H0p4Dd--


From aseigo@kde.org  Sat Aug  9 11:25:48 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 16E9EB37323
 for <funq-devel@kde.org>; Sat,  9 Aug 2014 11:25:42 +0000 (UTC)
Received: from serenity.localnet (80-254-69-9.dynamic.monzoon.net
 [80.254.69.9])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id DB6E52DC040
 for <funq-devel@kde.org>; Sat,  9 Aug 2014 05:25:40 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Subject: Re: processes
Date: Sat, 09 Aug 2014 13:25:26 +0200
Message-ID: <1411834.bVMhSexvo1@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <096B7505-D932-43F8-B54C-BC233F1FC78A@edeltech.ch>
References: <4991412.KO4pPSftTG@serenity>
 <096B7505-D932-43F8-B54C-BC233F1FC78A@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2682541.gcYugmrJBf";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 09 Aug 2014 11:25:48 -0000


--nextPart2682541.gcYugmrJBf
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Saturday, August 9, 2014 00.44:54 you wrote:
> About scheduling, you wrote that it will be run-time configurable. Do=
es it
> mean there's only one scheduler implementation that can be tweaked ? =
Or
> will there be several (e.g. Network priority / IO Priority etc=E2=80=A6=
) that one
> can switch dynamically ?

Those are really good questions and I really have not yet decided this =
firmly.=20
I suspect that over the first few years of usage, the scheduler is one =
part of=20
the system that will see significant modification; put another way: I d=
on't=20
expect to get it Perfec/Right the first time. With that expectation in =
mind,=20
the scheduler really needs to be loosely coupled with the rest of the r=
untime=20
so that it can be replaced without much pain. That brings the possibili=
ty of=20
having different schedulers that one can choose between at runtime.

Some of the runtime configuration will probably happen in the supervisi=
on=20
definition: being able to mark certain processes as having more priorit=
y (or=20
less), ... I've also been toying with the idea of whether or not it wou=
ld be=20
useful to mark processes as being I/O or CPU bound, but it is too early=
 to=20
really say. A first scheduler implementation is needed from which=20
experimentation can commence.

Initially I plan to implement a "completely fair" type scheduler with t=
he goal=20
of getting the multi-threaded aspect of the scheduler done right. That =
is=20
something that any scheduler will need to be able to scale across multi=
=2Dcore=20
systems, so it seems like a good place to start.

.. and yes, I think it is likely that different scheduler threads will =
end up=20
supporting different scheduler strategies. This could (e.g.) allow proc=
esses=20
that are driving a user interface to remain responsive (in their own sc=
heduler=20
thread, perhaps) while CPU-bound processes churn away in another schedu=
ler.

There are a lot of possibilities here to really get the most from the d=
esign=20
concept. I expect that in turn means "more than one scheduler strategy"=
.
=09
=2D-=20
Aaron J. Seigo
--nextPart2682541.gcYugmrJBf
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPmBSwACgkQ1rcusafx20N9UwCeNbq/gmAo3p+IyHGpyqD0/Dww
BYsAn1mJG9MGrczn6vYvCvSOeMKGNGlI
=Nc13
-----END PGP SIGNATURE-----

--nextPart2682541.gcYugmrJBf--


From aseigo@kde.org  Sat Aug  9 11:27:32 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 22294B37323
 for <funq-devel@kde.org>; Sat,  9 Aug 2014 11:27:27 +0000 (UTC)
Received: from serenity.localnet (80-254-69-9.dynamic.monzoon.net
 [80.254.69.9])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 55A832DC040
 for <funq-devel@kde.org>; Sat,  9 Aug 2014 05:27:26 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: documentation
Date: Sat, 09 Aug 2014 13:27:18 +0200
Message-ID: <2187118.MTU8lEKBhI@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <8309A70D-A1F4-4A05-BADE-5C81545B3E2C@edeltech.ch>
References: <1558147.axcyTr3Tsq@serenity> <2228198.63Y8dcnS7B@serenity>
 <8309A70D-A1F4-4A05-BADE-5C81545B3E2C@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart2020918.e0YXpVG0Nb";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sat, 09 Aug 2014 11:27:33 -0000


--nextPart2020918.e0YXpVG0Nb
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Saturday, August 9, 2014 00.53:50 Samuel Gaist wrote:
> Are you thinking of something like svn keyword substitution ?

Yes, very much like that. There is simply no reason I can think of to h=
ave=20
duplicate information in every single file when that information is not=
 even=20
static over time.

=2D-=20
Aaron J. Seigo
--nextPart2020918.e0YXpVG0Nb
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPmBZYACgkQ1rcusafx20M9BACgkoT39TjX8ooFXKP3rrieeClh
IuEAn1lKZ9N4dkEyMJlyoPqcIXVOn7ww
=gNT2
-----END PGP SIGNATURE-----

--nextPart2020918.e0YXpVG0Nb--


From heliocastro@gmail.com  Mon Aug 11 12:36:09 2014
Return-Path: <heliocastro@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-vc0-x236.google.com (mail-vc0-x236.google.com
 [IPv6:2607:f8b0:400c:c03::236])
 by postbox.kde.org (Postfix) with ESMTP id 74401B37C85
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 12:36:03 +0000 (UTC)
Received: by mail-vc0-f182.google.com with SMTP id hy4so11627982vcb.27
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 05:36:02 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-type
 :content-transfer-encoding;
 bh=xfQ0ai4rctdSJjJpf5m5y5s7IKA/Ue8W3CQmgAxF6LY=;
 b=WYccESjESm8q6h1vwEdCHEU6qXnpzLOdy6NMpSzE7p4CfK+Xgn3BL43NROXi9FbVil
 p65iTm+7BvHnq7bHlUuH2nAAhbkbz5WljnrxXYTVcPRcs9SmG8zPK86czuR19bF+hazE
 Rg//TwNi3XHgFmM8VwktnkwFIOndbQUaaPx5zRqBzTJLrvos0WsZo9MkqN8ulmjzm7zo
 2a6BNWfD8PMN/Cqljn/Q+4M4r/LrAa94K3rek9JMulRp6RJxAdRQLzudkJk8M7uwM8QH
 3n0BHyuT7m6z9IkT1jWKFctkvGgJNZpUrYhcFFnkukxAqPiEjJSLVm/glVzKG60LmhW9
 jjwg==
X-Received: by 10.53.9.133 with SMTP id ds5mr96650vdd.66.1407760562569;
 Mon, 11 Aug 2014 05:36:02 -0700 (PDT)
Received: from tiefighter.sabiax ([201.64.109.82])
 by mx.google.com with ESMTPSA id pa15sm34332427vdb.14.2014.08.11.05.36.00
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Mon, 11 Aug 2014 05:36:01 -0700 (PDT)
Sender: Helio Chissini de Castro <heliocastro@gmail.com>
From: Helio Chissini de Castro <helio@kde.org>
To: funq-devel@kde.org
Subject: Re: supervision
Date: Mon, 11 Aug 2014 09:35:54 -0300
Message-ID: <1884976.Gn6QMiWqzN@tiefighter.sabiax>
Organization: KDE
User-Agent: KMail/4.13.3 (Linux/3.15.6-200.fc20.x86_64; KDE/4.13.3; x86_64; ; )
In-Reply-To: <2677416.674OHmGNNS@serenity>
References: <4010479.kyjBc1uzVc@serenity>
 <16A2B5ED-F845-4256-AC93-A4473CEAB974@edeltech.ch>
 <2677416.674OHmGNNS@serenity>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="nextPart16574842.6vsSaLgbQX"
Content-Transfer-Encoding: 7Bit
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Aug 2014 12:36:09 -0000

This is a multi-part message in MIME format.

--nextPart16574842.6vsSaLgbQX
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="iso-8859-1"

On Saturday 09 August 2014 09:20:18 Aaron J. Seigo wrote:
> On Saturday, August 9, 2014 00.31:23 Samuel Gaist wrote:
> > On 5 ao=FBt 2014, at 22:34, Aaron J. Seigo <aseigo@kde.org> wrote:
> > > unless i can find a really compelling use case, i'm probably goin=
g to
> > > leave it out at least for now and add it later if it turns out to=
 be
> > > actually useful.
> > >=20
> > > i do like the "cleanliness" of having supervisors do only that:
> > > supervise.
> >=20
> > +1 for the cleanliness.
>=20
> It is decided, then :)
>=20
> > Is there any limit on how deep a tree can go ?
>=20
> No.

I have a fundamental question on this pattern considering who "owns" th=
e supervisor.
Imagining a regular unix process idea, we can have several processes, b=
ut each one=20
has different owners.
In a rough mode, imagine that kernel is a supervisor of root ownership,=
 but we can=20
plug on it another "tree" of processes, but ownered by another ownershi=
p, not root, a=20
common user.

Passing this idea to the supervisor pattern, should we allow, even more=
, should be=20
possible to have different supervisors ownership on same structure, and=
 as Aaron=20
mentioned before, the top process can control the lower ones ?

[]'s Helio

--=20
Helio Chissini de Castro
KDE and Linux Developer

--nextPart16574842.6vsSaLgbQX
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset="iso-8859-1"

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/=
REC-html40/strict.dtd">
<html><head><meta name=3D"qrichtext" content=3D"1" /><style type=3D"tex=
t/css">
p, li { white-space: pre-wrap; }
</style></head><body style=3D" font-family:'Monospace'; font-size:10pt;=
 font-weight:400; font-style:normal;">
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">On =
Saturday 09 August 2014 09:20:18 Aaron J. Seigo wrote:</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; On Saturday, August 9, 2014 00.31:23 Samuel Gaist wrote:</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; On 5 ao=FBt 2014, at 22:34, Aaron J. Seigo &lt;aseigo@kde.org&gt=
; wrote:</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; &gt; unless i can find a really compelling use case, i'm probabl=
y going to</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; &gt; leave it out at least for now and add it later if it turns =
out to be</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; &gt; actually useful.</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; &gt; </p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; &gt; i do like the &quot;cleanliness&quot; of having supervisors=
 do only that:</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; &gt; supervise.</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; </p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; +1 for the cleanliness.</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; </p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; It is decided, then :)</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; </p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; &gt; Is there any limit on how deep a tree can go ?</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; </p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt=
; No.</p>
<p style=3D"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px=
; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0p=
x; ">&nbsp;</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">I h=
ave a fundamental question on this pattern considering who &quot;owns&q=
uot; the supervisor.</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">Ima=
gining a regular unix process idea, we can have several processes, but =
each one has different owners.</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">In =
a rough mode, imagine that kernel is a supervisor of root ownership, bu=
t we can plug on it another &quot;tree&quot; of processes, but ownered =
by another ownership, not root, a common user.</p>
<p style=3D"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px=
; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0p=
x; ">&nbsp;</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">Pas=
sing this idea to the supervisor pattern, should we allow, even more, s=
hould be possible to have different supervisors ownership on same struc=
ture, and as Aaron mentioned before, the top process can control the lo=
wer ones ?</p>
<p style=3D"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px=
; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0p=
x; ">&nbsp;</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">[]'=
s Helio</p>
<p style=3D"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px=
; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0p=
x; ">&nbsp;</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">-- =
</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">Hel=
io Chissini de Castro</p>
<p style=3D" margin-top:0px; margin-bottom:0px; margin-left:0px; margin=
-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">KDE=
 and Linux Developer</p></body></html>
--nextPart16574842.6vsSaLgbQX--


From aseigo@kde.org  Mon Aug 11 14:11:48 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id A7F7DB37CE7
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 14:11:39 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 6C8642DC040
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 08:11:38 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: supervision
Date: Mon, 11 Aug 2014 16:11:25 +0200
Message-ID: <11542966.pRHRG7zmBy@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <1884976.Gn6QMiWqzN@tiefighter.sabiax>
References: <4010479.kyjBc1uzVc@serenity> <2677416.674OHmGNNS@serenity>
 <1884976.Gn6QMiWqzN@tiefighter.sabiax>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1815696.IW3xVGyPx4";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Aug 2014 14:11:49 -0000


--nextPart1815696.IW3xVGyPx4
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Monday, August 11, 2014 09.35:54 Helio Chissini de Castro wrote:
> I have a fundamental question on this pattern considering who "owns" =
the
> supervisor.

In the current design, the VM as a whole "owns" the processes in the se=
nse=20
that within a given VM any process can can see any other process if it =
has=20
either the PID or a registered name. This includes being able to kill o=
ther=20
processes.

This lack of access control makes writing multi-process applications ve=
ry=20
easy. As such, I have not yet specified a security model for processes =
...=20
though I know one will eventually be necessary to achieve certain goals=
.

> Imagining a regular unix process idea, we can have several
> processes, but each one has different owners.
> In a rough mode, imagine that kernel is a supervisor of root ownershi=
p, but
> we can plug on it another "tree" of processes, but ownered by another=

> ownership, not root, a common user.
>=20
> Passing this idea to the supervisor pattern, should we allow, even mo=
re,
> should be possible to have different supervisors ownership on same
> structure, and as Aaron mentioned before, the top process can control=
 the
> lower ones ?

It should be possible to *only* allow processes that are "related" by a=
 common=20
supervisor to have certain access to each other, or any other similar m=
ode of=20
access control. The VM will have knowledge of the process tree, manage =
the=20
process queues and provides the scheduling. The questions are:

* what are the use cases?
* what exactly should be tunable / controlled?

What sorts of applications did you have in mind?

=3D=3D=3D=3D=3D=3D
One use case I'd like to see is the following:

VM 1 is running application X.
VM 2 is running application Y.

Application Y has a "border control zone" (BCZ) where it is accepting=20=

"ambassador" processes.

Application X sends an ambassador process from VM 1 to VM 2 where it pa=
sses=20
through Application Y's BCZ and put into a sandbox with minimal access =
to API=20
and resources.

From=20the user's POV:

They get into the car with their phone. The phone announces itself to t=
he car.=20
The phone rings and the car automatically mutes the music that is playi=
ng.

During this entire exchange the phone's ambassador process is limited b=
y VM2=20
and ultimately managed by Application Y which can kill it, revoke acces=
s from=20
VM1, etc.

=3D=3D=3D=3D=3D=3D

So not only is process control needed, but API, auth and resource acces=
s.

As for process control, it could also be possible to eventually add thi=
ngs=20
like per-supervisor resource limits (beyond the simple but useful proce=
ss=20
count limits in pools). I want to punt *that* thinking until the basics=
 are in=20
place first and we can see what would be useful there. This also will b=
e=20
somewhat constrained by the memory model in the VM.

=2D-=20
Aaron J. Seigo
--nextPart1815696.IW3xVGyPx4
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPozxEACgkQ1rcusafx20NThgCeOkLzyWslpuDu4lTTbg93Agua
P9YAn2N1s7RtihmDb1Aqh5N4+wBCr+W6
=BrrL
-----END PGP SIGNATURE-----

--nextPart1815696.IW3xVGyPx4--


From heliocastro@gmail.com  Mon Aug 11 14:49:07 2014
Return-Path: <heliocastro@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-vc0-x234.google.com (mail-vc0-x234.google.com
 [IPv6:2607:f8b0:400c:c03::234])
 by postbox.kde.org (Postfix) with ESMTP id 4A74DB37322
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 14:49:01 +0000 (UTC)
Received: by mail-vc0-f180.google.com with SMTP id ij19so11593523vcb.39
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 07:49:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-type
 :content-transfer-encoding;
 bh=ZqZ5aQkuVNQ+wUbXEoaiqQWxpao9cnAL5a+mxLZutNw=;
 b=iK16OVxtEwcjZXHWdEAVaUHYpMpPdRlGxJYYnF17eZq/oJNVFVHun28v2zaNU2OBXC
 5ST00SWm6sfpjdQDDIwyGNPZzmGfcmoevqDBq6OK7fmvtNx2HDFhgPk1NScKbCpUxkZz
 IM88xN9zhe0U6V5zDU+QIaW2UbkxrvLOxIqzuN8Ri/dtTyovfyyWKjeR+/bpIdNoJyc9
 v+SfnkVaZmAClUVyJyIHlAdn9ue9kZZ3oonJBSrWToPqagHHwRscfUB+lBYJbeW4LHTL
 voPW74pFGnxqHvqdmkMZIsHtkUB+Np034i92U3TXg4Rq/agASiB0SaSxs78vlJQRixwa
 IV6g==
X-Received: by 10.220.200.71 with SMTP id ev7mr36850839vcb.24.1407768540661;
 Mon, 11 Aug 2014 07:49:00 -0700 (PDT)
Received: from tiefighter.sabiax ([201.64.109.82])
 by mx.google.com with ESMTPSA id fu19sm35291474vdb.2.2014.08.11.07.48.58
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Mon, 11 Aug 2014 07:48:59 -0700 (PDT)
Sender: Helio Chissini de Castro <heliocastro@gmail.com>
From: Helio Chissini de Castro <helio@kde.org>
To: funq-devel@kde.org
Subject: Re: supervision
Date: Mon, 11 Aug 2014 11:48:51 -0300
Message-ID: <2563259.LXdoERzZ5r@tiefighter.sabiax>
Organization: KDE
User-Agent: KMail/4.13.3 (Linux/3.15.6-200.fc20.x86_64; KDE/4.13.3; x86_64; ; )
In-Reply-To: <11542966.pRHRG7zmBy@serenity>
References: <4010479.kyjBc1uzVc@serenity>
 <1884976.Gn6QMiWqzN@tiefighter.sabiax> <11542966.pRHRG7zmBy@serenity>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="nextPart12045163.xj1aHfeqmS"
Content-Transfer-Encoding: 7Bit
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Aug 2014 14:49:07 -0000

This is a multi-part message in MIME format.

--nextPart12045163.xj1aHfeqmS
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"

On Monday 11 August 2014 16:11:25 Aaron J. Seigo wrote:
> * what are the use cases?
> * what exactly should be tunable / controlled?
> 
> What sorts of applications did you have in mind?
> 

Use cases, for example is a setup for studio musicians/ live setups on shows / lights


Case:

VM 1 is running a application such as Live or Cubase, usually modern usage contains 
several software based synths running on same machine, and is resource hungry

VM 2 is running a visual effects software that need be in sync with the music app on 
VM1, but is another resource monster eater

VM 3 is running a proper distribution channels for all the video and audio directions, 
like you have a museum multimedia installation where all parts are interconnected in 
different rooms

It can spans in case of live presentations to have mixed live video with recorded video 
and video effects.

For the current world, it relies in external solutions, like several computers, all running 
independent software, using an specific control method, that, when is not proprietary, 
it relies on MIDI time code. 

So, unless you have a well designed several multicore computer ( and backup ) with 
applications designed to work each other ( not likely ), only complex solutions to 
control and supervise this several machines is needed.

The idea behind the process owner would help in plug proceses that could not affect 
the master controller to mess with other resources


I know is a little bit more complex than the car, but match the needs


-- 
Helio Chissini de Castro
KDE and Linux Developer

--nextPart12045163.xj1aHfeqmS
Content-Transfer-Encoding: 7Bit
Content-Type: text/html; charset="us-ascii"

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Monospace'; font-size:10pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">On Monday 11 August 2014 16:11:25 Aaron J. Seigo wrote:</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt; * what are the use cases?</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt; * what exactly should be tunable / controlled?</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt; </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt; What sorts of applications did you have in mind?</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">&gt; </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">Use cases, for example is a setup for studio musicians/ live setups on shows / lights</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">Case:</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">VM 1 is running a application such as Live or Cubase, usually modern usage contains several software based synths running on same machine, and is resource hungry</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">VM 2 is running a visual effects software that need be in sync with the music app on VM1, but is another resource monster eater</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">VM 3 is running a proper distribution channels for all the video and audio directions, like you have a museum multimedia installation where all parts are interconnected in different rooms</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">It can spans in case of live presentations to have mixed live video with recorded video and video effects.</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">For the current world, it relies in external solutions, like several computers, all running independent software, using an specific control method, that, when is not proprietary, it relies on MIDI time code. </p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">So, unless you have a well designed several multicore computer ( and backup ) with applications designed to work each other ( not likely ), only complex solutions to control and supervise this several machines is needed.</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">The idea behind the process owner would help in plug proceses that could not affect the master controller to mess with other resources</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">I know is a little bit more complex than the car, but match the needs</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; ">&nbsp;</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">-- </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">Helio Chissini de Castro</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:0;">KDE and Linux Developer</p></body></html>
--nextPart12045163.xj1aHfeqmS--


From aseigo@kde.org  Mon Aug 11 16:39:22 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 69C70B37C55
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 16:39:16 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 6BC2C2DC040
 for <funq-devel@kde.org>; Mon, 11 Aug 2014 10:39:15 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: supervision
Date: Mon, 11 Aug 2014 18:39:02 +0200
Message-ID: <1625759.gXKkZelAod@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <2563259.LXdoERzZ5r@tiefighter.sabiax>
References: <4010479.kyjBc1uzVc@serenity> <11542966.pRHRG7zmBy@serenity>
 <2563259.LXdoERzZ5r@tiefighter.sabiax>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart7738927.Pa7bI8lDyP";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 11 Aug 2014 16:39:22 -0000


--nextPart7738927.Pa7bI8lDyP
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Monday, August 11, 2014 11.48:51 Helio Chissini de Castro wrote:
> The idea behind the process owner would help in plug proceses that co=
uld not
> affect the master controller to mess with other resources

Makes sense; so something similar to what one gets with cgroups + names=
paces.=20
I've added notes to the documentation for this and will push that short=
ly

> I know is a little bit more complex than the car, but match the needs=


It is actually a *very* interesting use case and one that should be tak=
en into=20
consideration.. thanks for sharing it.

=2D-=20
Aaron J. Seigo
--nextPart7738927.Pa7bI8lDyP
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPo8aoACgkQ1rcusafx20NPTwCfXfp4G3Y0bme3/yZqjOC+BwvP
YE0AnR/YULeKEydZ8mLF/6kk0zC39Bxg
=u411
-----END PGP SIGNATURE-----

--nextPart7738927.Pa7bI8lDyP--


From samuel.gaist@edeltech.ch  Wed Aug 13 20:44:24 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id A5896B37301
 for <funq-devel@kde.org>; Wed, 13 Aug 2014 20:44:18 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7DKiHRS013675
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Wed, 13 Aug 2014 22:44:18 +0200
From: Samuel Gaist <samuel.gaist@edeltech.ch>
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
Subject: Random Ideas
Message-Id: <DB8B20D4-81DF-40FB-95FB-236DB52E0C58@edeltech.ch>
Date: Wed, 13 Aug 2014 22:44:16 +0200
To: "funq-devel@kde.org" <funq-devel@kde.org>
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Wed, 13 Aug 2014 20:44:24 -0000

Hi,

Since we are still in the design phase, it might be a bit soon for that =
but anyway, food for thoughts.

I've attended a presentation about a new web platform designed to =
improve Reproducible Researches by providing a mean to create =
experiments (algorithms etc=85). And If I understood correctly, one of =
the most used language for that is Python. Then I've thought: wouldn't =
be something where funq would be an interesting language to use ?

=46rom that point, it went a bit wild: gpufunq or funqCL? Already =
thought about ? Heresy ?

Cheers !

Samuel=

From aseigo@kde.org  Fri Aug 15 08:36:28 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 0742FB37BD8
 for <funq-devel@kde.org>; Fri, 15 Aug 2014 08:36:22 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id C612D2DC040
 for <funq-devel@kde.org>; Fri, 15 Aug 2014 02:36:20 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Random Ideas
Date: Fri, 15 Aug 2014 10:35:58 +0200
Message-ID: <1694285.cYvI7l3iC0@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <DB8B20D4-81DF-40FB-95FB-236DB52E0C58@edeltech.ch>
References: <DB8B20D4-81DF-40FB-95FB-236DB52E0C58@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart4809672.rVeeBWSLfo";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 15 Aug 2014 08:36:28 -0000


--nextPart4809672.rVeeBWSLfo
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Wednesday, August 13, 2014 22.44:16 Samuel Gaist wrote:
> I've attended a presentation about a new web platform designed to imp=
rove
> Reproducible Researches by providing a mean to create experiments
> (algorithms etc=E2=80=A6). And If I understood correctly, one of the =
most used
> language for that is Python. Then I've thought: wouldn't be something=
 where
> funq would be an interesting language to use ?

Python has become quite popular in this area because it is well support=
ed,=20
easy to use and has reasonable performance.  That has led to a number o=
f=20
python libs that are aimed at the scientific community. Hopefully funq =
can=20
reach those same goals while adding the benefits of functional programm=
ing to=20
the mix. Being able to access C++ libraries easily, a topic I haven't d=
ug into=20
enough yet, could be a big help in terms of easily adding features spec=
ific=20
communities need.

> From that point, it went a bit wild: gpufunq or funqCL? Already thoug=
ht
> about ? Heresy ?

I've spent a bit of time thinking about JIT-style rewriting of the gene=
rated=20
bytecode. Obviously it is a bit early for that, but it influences the d=
esign=20
of the VM.=20

One nice by-product of the multi-process approach is that it may be pos=
sible=20
to run specific processes on specialized hardware (e.g. GPU), perhaps w=
ith=20
some restrictions as to the library calls they have access to.

With appropriate runtime bytecode rewriting support, it should be possi=
ble to=20
target some funq processes to GPU and leave some on the CPU, allowing j=
ust the=20
computationally intensive parts to run on GPU (e.g.).

This is all a ways off from where we are now, but it's good to keep suc=
h goals=20
in mind ...

=2D-=20
Aaron J. Seigo
--nextPart4809672.rVeeBWSLfo
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPtxngACgkQ1rcusafx20PUMwCfVifflscNSx9dzluau7b4mHcd
2c0AnAi4sk6AxqNDToAmZXRlX2Bk3aPg
=738J
-----END PGP SIGNATURE-----

--nextPart4809672.rVeeBWSLfo--


From aseigo@kde.org  Mon Aug 18 14:48:48 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 66DF1B37C75
 for <funq-devel@kde.org>; Mon, 18 Aug 2014 14:48:42 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 4B5F82DC040
 for <funq-devel@kde.org>; Mon, 18 Aug 2014 08:48:41 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: pre-boarding call
Date: Mon, 18 Aug 2014 16:48:25 +0200
Message-ID: <1427936.1qOos1b2Dj@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart4027822.gQb6MXpOLC";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 18 Aug 2014 14:48:48 -0000


--nextPart4027822.gQb6MXpOLC
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

hi all ...

While i'm working on filling in the remaining critical bits of the=20
specification (which there is still a fair amount, to be honest), i'm a=
lso=20
starting to sketch out what shape the tools will take.

There will be a number of tasks that should be highly automated for the=
 user,=20
including:

* creating a new project on disk (see docs/packaging.md for my thoughts=
 there)
* generating documentation
* running tests
* fetching compile/run-time dependencies (modeled on node's npm)
* compiling code
* creating packages for distribution
* ...=20

You get the picture: all the usual jobs and tasks that get in our way a=
s=20
developers ;)

For many projects this means using a large number of tools that were ne=
ver=20
really meant to be used together, but which tackle one type of task and=
=20
hopefully do it well. As Qt devs we all know g++ (and others), doxygen,=
 qmake,=20
cmake, ...

Even languages like perl and python ship both a runtime as well as a do=
c=20
generator, a package manager, etc. as separate tools.

Meanwhile, a lot of traditional middleware has been going through a=20
"unification" process for tooling. The various and random iptools appli=
cations=20
are now just one "ip" command with lots of capabilities; git does nearl=
y=20
bloody everything and the kitchen sink for revision control; modern pac=
kage=20
managers do everything in one tool (unlike debian's older apt-* tools) =
...

I lean towards a single tool (i.e. named "funq") that provides all the=20=

necessary functionality behind one sleek tool. This won't reflect the c=
ode=20
design which will be componentized, unit tested, etc. We don't want a b=
ig=20
spaghetti ball of a monster, after all ;) but having one `funq` tool th=
at=20
gives one access to all the functionality is alluring to me.

The reasons / benefits I see:

* `funq help <something>` would let one learn about all parts of the sy=
stem
* `funq` on its own would start a REPL, which seems elegant
* user interface consistency is more easily maintained with one tool ra=
ther=20
than many
* it might feel "less scary" when there is just one tool rather than N =
for the=20
newcomer
* reflects rather naturally the envisaged integrated/modular compiler s=
ystem

Possible cons:

* could become git-level scary if the user interface is not carefully=20=

considered

The design I'm playing with is putting each set of functionality into i=
ts own=20
library with `funq` being a thin wrapper on top of them that gives them=
 a=20
unified user interface on the command line.

Each library would optionally add grammar to the tool allowing the tool=
 to=20
naturally grow with time, and also help catch command collisions should=
 they=20
happen. So the packaging features would be in one library and add a gra=
mmar=20
sth like:

=09funq create project <name> <relative path>
=09funq create package [<platform>]
=09funq install deps
=09funq list deps

I'd also like to have a second command description input method: JSON. =
Given=20
how every language has JSON support these days, and funq gets it for fr=
ee via=20
Qt, having a JSON equivalent to the command line grammar would make it =
rather=20
nicer to use from many higher level tools than cobbling together comman=
d=20
lines. In this mode it would also respond with JSON, taking parsing com=
mand=20
output out of the equation.

Do you prefer "one tool to rule them all" or "a suite of separately nam=
ed=20
tools, one per task"?

What are your thoughts on what would make for an excellent command inpu=
t=20
system?

=2D-=20
Aaron J. Seigo
--nextPart4027822.gQb6MXpOLC
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPyEjwACgkQ1rcusafx20PBGwCglo6OxQFjCkj4WgdNKWGZbSuT
xtgAn1KKe/usPbUPHChcgGFLkYRjW5Qy
=jh1u
-----END PGP SIGNATURE-----

--nextPart4027822.gQb6MXpOLC--


From notmart@gmail.com  Mon Aug 18 18:44:33 2014
Return-Path: <notmart@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-we0-x22b.google.com (mail-we0-x22b.google.com
 [IPv6:2a00:1450:400c:c03::22b])
 by postbox.kde.org (Postfix) with ESMTP id 82DC7B37309
 for <funq-devel@kde.org>; Mon, 18 Aug 2014 18:44:27 +0000 (UTC)
Received: by mail-we0-f171.google.com with SMTP id p10so5407005wes.30
 for <funq-devel@kde.org>; Mon, 18 Aug 2014 11:44:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:user-agent:references:in-reply-to:mime-version
 :content-type:content-transfer-encoding:message-id;
 bh=UD/l1TTJFbA1W+eD3++gqkWSVRiGjEp2aLRsYT8EtsE=;
 b=d7boYXz5AoIv9uXrtpHeP6Bv3G3lNgOnNywA8XmzzLsa8vJvk8FpWGRPAYP2yS8fRD
 BlJ+EuO8qG7xl7evVbb7oiKkA8WyfUPROks1j+Ip9Tsxzqsyjm0jeMR/B94OHEAj2IrO
 QG97BqOaVukdaZ6Pnxc4m/l88B0pxcYQEW0RoacvKSMzwgFyJ01QUyolqc1GAp0ilE/3
 xUiPti8ZOzYBuLJRSt9nQiumgennvqH1jYyMgu2M9tvnBzH0WawFxcZeNJMEnib+5R/3
 a/zfm+h3RgL75FXr59fL8CUSEm2onTADT4njnAI7JQPxkEx1j/I2/fOYxHtKezixesWW
 hbxA==
X-Received: by 10.194.200.74 with SMTP id jq10mr10810652wjc.110.1408387467284; 
 Mon, 18 Aug 2014 11:44:27 -0700 (PDT)
Received: from phobos.diaunet
 (host49-212-dynamic.1-79-r.retail.telecomitalia.it. [79.1.212.49])
 by mx.google.com with ESMTPSA id ck5sm14335348wjb.24.2014.08.18.11.44.25
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Mon, 18 Aug 2014 11:44:26 -0700 (PDT)
From: Marco Martin <notmart@gmail.com>
To: funq-devel@kde.org
Subject: Re: pre-boarding call
Date: Mon, 18 Aug 2014 20:44:23 +0200
User-Agent: KMail/1.13.7 (Linux/3.7.10-1.1-desktop; KDE/4.11.60; i686; ; )
References: <1427936.1qOos1b2Dj@serenity>
In-Reply-To: <1427936.1qOos1b2Dj@serenity>
MIME-Version: 1.0
Content-Type: Text/Plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Message-Id: <201408182044.23775.notmart@gmail.com>
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 18 Aug 2014 18:44:33 -0000

On Monday 18 August 2014, Aaron J. Seigo wrote:
> Possible cons:
> 
> * could become git-level scary if the user interface is not carefully
> considered

one key here is enough of saying no to new features/command switches that are 
not completely, absolutely needed...


> Do you prefer "one tool to rule them all" or "a suite of separately named
> tools, one per task"?

would go for one to rule them all with syntax like
funq command subcommand [options]

-- 
Marco Martin

From samuel.gaist@edeltech.ch  Mon Aug 18 19:34:32 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id 175E1B37309
 for <funq-devel@kde.org>; Mon, 18 Aug 2014 19:34:27 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7IJYQrj028054
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Mon, 18 Aug 2014 21:34:26 +0200
Content-Type: text/plain; charset=windows-1252
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: pre-boarding call
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <201408182044.23775.notmart@gmail.com>
Date: Mon, 18 Aug 2014 21:34:25 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <0C53FB8E-45C4-4597-8F70-01BD5944999A@edeltech.ch>
References: <1427936.1qOos1b2Dj@serenity>
 <201408182044.23775.notmart@gmail.com>
To: "funq-devel@kde.org" <funq-devel@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 18 Aug 2014 19:34:32 -0000


On 18 ao=FBt 2014, at 20:44, Marco Martin <notmart@gmail.com> wrote:

> On Monday 18 August 2014, Aaron J. Seigo wrote:
>> Possible cons:
>>=20
>> * could become git-level scary if the user interface is not carefully
>> considered
>=20
> one key here is enough of saying no to new features/command switches =
that are=20
> not completely, absolutely needed=85
>=20
+1
However, would a hook or plugin architecture be something to consider =
for people wanting to extend the command ?

>=20
>> Do you prefer "one tool to rule them all" or "a suite of separately =
named
>> tools, one per task"?
>=20
> would go for one to rule them all with syntax like
> funq command subcommand [options]
>=20
+1, it will also simply deployment of the sdk

Resent to the list, excuse me Marco.


From aseigo@kde.org  Tue Aug 19 07:33:13 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 8C1C8B373EE
 for <funq-devel@kde.org>; Tue, 19 Aug 2014 07:33:07 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 48BE82DC040
 for <funq-devel@kde.org>; Tue, 19 Aug 2014 01:33:06 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: pre-boarding call
Date: Tue, 19 Aug 2014 09:32:46 +0200
Message-ID: <2042153.sLuezSHRK4@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <0C53FB8E-45C4-4597-8F70-01BD5944999A@edeltech.ch>
References: <1427936.1qOos1b2Dj@serenity>
 <201408182044.23775.notmart@gmail.com>
 <0C53FB8E-45C4-4597-8F70-01BD5944999A@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1717321.38v2tGU1VU";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Tue, 19 Aug 2014 07:33:13 -0000


--nextPart1717321.38v2tGU1VU
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="utf-8"

On Monday, August 18, 2014 21.34:25 Samuel Gaist wrote:
> On 18 ao=C3=BBt 2014, at 20:44, Marco Martin <notmart@gmail.com> wrot=
e:
> > On Monday 18 August 2014, Aaron J. Seigo wrote:
> >> Possible cons:
> >>=20
> >> * could become git-level scary if the user interface is not carefu=
lly
> >> considered
> >=20
> > one key here is enough of saying no to new features/command switche=
s that
> > are not completely, absolutely needed=E2=80=A6
>=20
> +1

Also agreed. It must follow the Only What Is Needed principle. Consiste=
ncy in=20
the commands will be another goal so there is "less" to learn.

> However, would a hook or plugin architecture be something to consider=
 for
> people wanting to extend the command ?

This is actually how I (currently) plan to implement the "core" functio=
nality.=20
Each component (project packages, compiling, documentation, testing, ..=
.) will=20
implement a yet-to-be-design C++ interface which will dynamically add=20=

functionality to the funq command.

Once that interface is well and truly tested by the core functionality,=
 I=20
would then like to make it a public API. It will provide some basic=20
functionality to be shared between components as well, such as how to n=
avigate=20
a project tree on disk as that will be a common task to most if not all=
=20
components.

Hopefully one day we'll even be able to write addons in funq; in fact, =
I see=20
no reason why not, once things are that far along.

> >> Do you prefer "one tool to rule them all" or "a suite of separatel=
y named
> >> tools, one per task"?
> >=20
> > would go for one to rule them all with syntax like
> > funq command subcommand [options]
>=20
> +1, it will also simply deployment of the sdk

So that's four in favour of a single command with a reasonable grammar.=
 (Kevin=20
gave his +1 on irc yesterday...) So let's call that a wrap and go in th=
at=20
direction.

=2D-=20
Aaron J. Seigo
--nextPart1717321.38v2tGU1VU
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlPy/aQACgkQ1rcusafx20M8NgCeJGNHMZ+198zSY1U9oJv0ZsrB
0GEAn3ocazHD3Z0kLcKflFKFM7DtkQpg
=dT65
-----END PGP SIGNATURE-----

--nextPart1717321.38v2tGU1VU--


From ivan.cukic@gmail.com  Tue Aug 19 08:26:30 2014
Return-Path: <ivan.cukic@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-wi0-x22e.google.com (mail-wi0-x22e.google.com
 [IPv6:2a00:1450:400c:c05::22e])
 by postbox.kde.org (Postfix) with ESMTP id C60CFB373EE
 for <funq-devel@kde.org>; Tue, 19 Aug 2014 08:26:23 +0000 (UTC)
Received: by mail-wi0-f174.google.com with SMTP id d1so4986496wiv.13
 for <funq-devel@kde.org>; Tue, 19 Aug 2014 01:26:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:from:to:subject:date:message-id:organization:user-agent
 :in-reply-to:references:mime-version:content-transfer-encoding
 :content-type; bh=S0yFpbSMAe2XvJ8rLCWwFNvDXMJ64qbuHSmvniFSYNo=;
 b=Z1cIeFN/OpWMyKbCeWfoihFQNbAsoiTxgP6geq3XKu+LVR1h19IWYNKW6kBD45Fq6N
 slogt9W16sxrxtbVDVpvts2LYXePAh/WMpo4XAJbIACRIFEY76TDQsHHxSkc/EGrAQSi
 l0FvSGRMty0L4ep88hA1/WYff3g5tfTXX51Sn/ZLrhv0OY8DGTWSvyTI8M6HbSwdXgHv
 RRDhqjwmEJbNACi0+U9g+zNfAnwizhJ3j31woBfo/lOOdJ/mvrikrAAG+Syp2/l7qFU3
 DsAqIGqyTioojqYa0QwO2EvEkq7X92sWjO8m+WEEJ/cMdoL3Bhc2/6mzXRiC3cfo0L+l
 3daw==
X-Received: by 10.180.12.38 with SMTP id v6mr4900933wib.4.1408436783555;
 Tue, 19 Aug 2014 01:26:23 -0700 (PDT)
Received: from drako.localnet (cable-178-148-120-90.dynamic.sbb.rs.
 [178.148.120.90])
 by mx.google.com with ESMTPSA id qa2sm48578815wjc.45.2014.08.19.01.26.22
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Tue, 19 Aug 2014 01:26:22 -0700 (PDT)
Sender: =?UTF-8?B?SXZhbiDEjHVracSH?= <ivan.cukic@gmail.com>
From: Ivan =?utf-8?B?xIx1a2nEhw==?= <ivan.cukic@kde.org>
To: funq-devel@kde.org
Subject: Re: pre-boarding call
Date: Tue, 19 Aug 2014 10:26:21 +0200
Message-ID: <352110857.rS3vvdhjHz@drako>
Organization: KDE
User-Agent: KMail/4.14 rc (Linux/3.14-2-amd64; KDE/4.13.97; x86_64; git-a208508;
 2014-08-05)
In-Reply-To: <2042153.sLuezSHRK4@serenity>
References: <1427936.1qOos1b2Dj@serenity>
 <0C53FB8E-45C4-4597-8F70-01BD5944999A@edeltech.ch>
 <2042153.sLuezSHRK4@serenity>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Tue, 19 Aug 2014 08:26:30 -0000


> So that's four in favour of a single command with a reasonable grammar.
> (Kevin gave his +1 on irc yesterday...) So let's call that a wrap and go in
> that direction.

I'm joining the +1 crowd on this :)

-- 

Cheerio,
Ivan


KDE, ivan.cukic at kde.org, http://ivan.fomentgroup.org/ 
gpg key id: 850B6F76, keyserver.pgp.com

From samuel.gaist@edeltech.ch  Sun Aug 24 19:04:12 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp4.infomaniak.ch (smtp4.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:18cc])
 by postbox.kde.org (Postfix) with ESMTP id C02EBB37C43
 for <funq-devel@kde.org>; Sun, 24 Aug 2014 19:04:06 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp4.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7OJ45r8017047
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Sun, 24 Aug 2014 21:04:06 +0200
From: Samuel Gaist <samuel.gaist@edeltech.ch>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable
Subject: operators !=
Message-Id: <2D71FF7E-8788-4FF6-A6E5-4ABAC18C54A5@edeltech.ch>
Date: Sun, 24 Aug 2014 21:04:05 +0200
To: "funq-devel@kde.org" <funq-devel@kde.org>
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sun, 24 Aug 2014 19:04:12 -0000

Hi,

There's something I'm currently not understanding about the !=3D =
operator.
=46rom the doc:
    val x !=3D 3; // new variable x now equals 3
    x !=3D 3; // x is 3 (from above): success

That doesn't sound logic to me but I may be missing some background =
knowledge. Can somebody enlighten me ?



From samuel.gaist@edeltech.ch  Sun Aug 24 20:58:02 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id 4756CB37C3F
 for <funq-devel@kde.org>; Sun, 24 Aug 2014 20:57:57 +0000 (UTC)
Received: from [192.168.1.103] (146-117.63-188.cust.bluewin.ch
 [188.63.117.146]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7OKvugH003234
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Sun, 24 Aug 2014 22:57:56 +0200
From: Samuel Gaist <samuel.gaist@edeltech.ch>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable
Subject: Build System
Message-Id: <12600DA0-A092-471B-8CEF-7D530CB485AD@edeltech.ch>
Date: Sun, 24 Aug 2014 22:57:56 +0200
To: "funq-devel@kde.org" <funq-devel@kde.org>
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Sun, 24 Aug 2014 20:58:02 -0000

Hi,

=46rom the docs, cmake seems to be one of the choices as a build system =
for funq. If that were the case (there's also e.g. qbs) I think one =
interesting thing that should be provided is a project skeleton/template =
files and some guidelines to help newcomers wanting to start =
development. It will also help keep some consistency between the modules =
and overall which would be nice.=20
I was thinking about this because cmake offers several ways to achieve =
the same goal, so having a set of rules to begin with may also help when =
one has problem getting things built.

Thoughts ?=

From aseigo@kde.org  Mon Aug 25 05:47:58 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id A78BBB37309
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 05:47:52 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 512AD2DC040
 for <funq-devel@kde.org>; Sun, 24 Aug 2014 23:47:51 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: operators !=
Date: Mon, 25 Aug 2014 07:47:24 +0200
Message-ID: <3791387.OkltknZ739@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <2D71FF7E-8788-4FF6-A6E5-4ABAC18C54A5@edeltech.ch>
References: <2D71FF7E-8788-4FF6-A6E5-4ABAC18C54A5@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart7498290.dxqySjzYrW";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 05:47:58 -0000


--nextPart7498290.dxqySjzYrW
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Sunday, August 24, 2014 21.04:05 Samuel Gaist wrote:
> Hi,
>=20
> There's something I'm currently not understanding about the !=3D oper=
ator.
>=20
> >From the doc:
>     val x !=3D 3; // new variable x now equals 3
>     x !=3D 3; // x is 3 (from above): success
>=20
> That doesn't sound logic to me but I may be missing some background
> knowledge. Can somebody enlighten me ?

It's not you, it's me. That was a copy and paste error on my part.

This is actually one part of the syntax I'm not happy with yet ... '!=3D=
' is the=20
antonym of '=3D=3D' which is just '=3D' in funq; however, '=3D' is also=
 assignment=20
which facilitates pattern matching based assignment which is rather use=
ful.

so if:

=09var x =3D 3; // asigns
=09x =3D 3; // confirms
=09(x, var y) =3D [ 3, 4 ] // assigns 4 to y after confirming element 0=
 equals x

then to preserve symmetry:

=09var x !=3D 3; // assigns=20
=09x !=3D 4; // confirms
=09(x, var y) !=3D [ 5, 4 ] // assigns y after confirming element 0 !=3D=
 x

This is nice and symmetric, but it feels rather more odd than the behav=
ior of=20
'=3D' to me, though I'm unsure if that is just because it is unusual to=
 me or if=20
it is really actually flaws in some way.

As usual, opinions / feedback welcome

.. and I'll fix the documentation in the git repository.

Oh, and I didn't get any time this weekend for working on these things;=
 busy=20
family weekend. This week is rather more open again though :)

=2D-=20
Aaron J. Seigo
--nextPart7498290.dxqySjzYrW
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEUEABECAAYFAlP6zfIACgkQ1rcusafx20MV9QCgjLGfr780NXxtcVG9Um8aIBrT
RXYAmLWgyMg1O9RJXP2gVnKUYsUgLq8=
=WT6C
-----END PGP SIGNATURE-----

--nextPart7498290.dxqySjzYrW--


From aseigo@kde.org  Mon Aug 25 06:53:05 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 3565FB37C59
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 06:53:00 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 586BA2DC040
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 00:52:59 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: Build System
Date: Mon, 25 Aug 2014 08:52:38 +0200
Message-ID: <1619666.C6jWci89ii@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <12600DA0-A092-471B-8CEF-7D530CB485AD@edeltech.ch>
References: <12600DA0-A092-471B-8CEF-7D530CB485AD@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart3100491.CkMi0kSIp3";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 06:53:06 -0000


--nextPart3100491.CkMi0kSIp3
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Sunday, August 24, 2014 22.57:56 Samuel Gaist wrote:
> >From the docs, cmake seems to be one of the choices as a build syste=
m for
> >funq.=20

Only for included native code; I envision three primary ways of using f=
unq:

a) only funq code (with QML if it has a GUI)
b) funq code (+ QML if GUI) with some small bits of C++ used by the QML=
/funq
c) C++ application with some funq modules that are used in the C++ appl=
ication

For (a), the intention is to have no explicit build system. Just follow=
 the=20
on-disk format for a funq package and everything will be handled=20
automatically.

For (b) there is the added complication of native compilation in suppor=
t of=20
the funq application. By standardizing on cmake for that, it will allow=
 us to=20
extend case (a) with a hook to run cmake in the native source dir(s)

For (c) the developer is "on their own" for figuring out the build syst=
em,=20
though some sample cmake files would be absolutely in order there.

=2D-=20
Aaron J. Seigo
--nextPart3100491.CkMi0kSIp3
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlP63TsACgkQ1rcusafx20M0yACfR5JlRy+0TsXbOGiSIAIVMO2P
bbEAnigAsAPQTeegdqh9t2oNUg1P/Owi
=tdC3
-----END PGP SIGNATURE-----

--nextPart3100491.CkMi0kSIp3--


From samuel.gaist@edeltech.ch  Mon Aug 25 09:06:30 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id D5A3DB373CE
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 09:06:24 +0000 (UTC)
Received: from [172.29.19.236] (171-180-109-153-snat.guest.idiap.ch
 [153.109.180.171]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7P96Oxw032382
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 11:06:24 +0200
From: Samuel Gaist <samuel.gaist@edeltech.ch>
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
Subject: Fwd: operators !=
Date: Mon, 25 Aug 2014 11:06:23 +0200
References: <FAD2E05D-4F51-4E4D-B3C5-F6BFA37637A1@edeltech.ch>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Message-Id: <0656DDB2-E0BB-42BB-869E-F88590ECC3C2@edeltech.ch>
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 09:06:30 -0000

Forgot to reply to the mailing list=85

Begin forwarded message:

> From: Samuel Gaist <samuel.gaist@edeltech.ch>
> Subject: Re: operators !=3D
> Date: 25 ao=FBt 2014 09:17:03 UTC+02:00
> To: Aaron J. Seigo <aseigo@kde.org>
>=20
>=20
> On 25 ao=FBt 2014, at 07:47, Aaron J. Seigo <aseigo@kde.org> wrote:
>=20
>> On Sunday, August 24, 2014 21.04:05 Samuel Gaist wrote:
>>> Hi,
>>>=20
>>> There's something I'm currently not understanding about the !=3D =
operator.
>>>=20
>>>> =46rom the doc:
>>>   val x !=3D 3; // new variable x now equals 3
>>>   x !=3D 3; // x is 3 (from above): success
>>>=20
>>> That doesn't sound logic to me but I may be missing some background
>>> knowledge. Can somebody enlighten me ?
>>=20
>> It's not you, it's me. That was a copy and paste error on my part.
>=20
> You almost got me scared with that one ! :)
>=20
>> This is actually one part of the syntax I'm not happy with yet ... =
'!=3D' is the=20
>> antonym of '=3D=3D' which is just '=3D' in funq; however, '=3D' is =
also assignment=20
>> which facilitates pattern matching based assignment which is rather =
useful.
>>=20
>> so if:
>>=20
>> 	var x =3D 3; // asigns
>> 	x =3D 3; // confirms
>> 	(x, var y) =3D [ 3, 4 ] // assigns 4 to y after confirming =
element 0 equals x
>>=20
>> then to preserve symmetry:
>>=20
>> 	var x !=3D 3; // assigns=20
>> 	x !=3D 4; // confirms
>> 	(x, var y) !=3D [ 5, 4 ] // assigns y after confirming element 0 =
!=3D x
>=20
> So if we expend this thing a bit, it might look like:
> var x !=3D 3;=20
> which would be the same as:
> var x =3D !0x03;
> which would translate to
> var x =3D 0xFB;
>=20
> The final value would have to be corrected in the documentaiton to =
correspond to the default numeric type.
>=20
> Sounds correct ?
>=20
>> This is nice and symmetric, but it feels rather more odd than the =
behavior of=20
>> '=3D' to me, though I'm unsure if that is just because it is unusual =
to me or if=20
>> it is really actually flaws in some way.
>>=20
>> As usual, opinions / feedback welcome
>>=20
>> .. and I'll fix the documentation in the git repository.
>> Oh, and I didn't get any time this weekend for working on these =
things; busy=20
>> family weekend. This week is rather more open again though :)
>>=20
>=20
> Nice :)


From samuel.gaist@edeltech.ch  Mon Aug 25 09:06:54 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id 8B9E8B373CE
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 09:06:48 +0000 (UTC)
Received: from [172.29.19.236] (171-180-109-153-snat.guest.idiap.ch
 [153.109.180.171]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7P96Oxx032382
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 11:06:48 +0200
From: Samuel Gaist <samuel.gaist@edeltech.ch>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: quoted-printable
Subject: Fwd: operators !=
Date: Mon, 25 Aug 2014 11:06:48 +0200
References: <13295920.CxKnveca8t@serenity>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Message-Id: <90BA2858-55DE-4E94-A326-192ECBAEA21C@edeltech.ch>
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 09:06:54 -0000

Answer from Aaron

Begin forwarded message:

> From: "Aaron J. Seigo" <aseigo@kde.org>
> Subject: Re: operators !=3D
> Date: 25 ao=FBt 2014 10:12:11 UTC+02:00
> To: Samuel Gaist <samuel.gaist@edeltech.ch>
>=20
> On Monday, August 25, 2014 09.17:03 you wrote:
>> So if we expend this thing a bit, it might look like:
>> var x !=3D 3;
>> which would be the same as:
>> var x =3D !0x03;
>> which would translate to
>> var x =3D 0xFB;
>=20
> That's an interesting interpretation, and one of the reasons I'm =
uncomfortable=20
> with defining '!=3D' as the literal antonym of '=3D' in all manners.
>=20
> But no, !=3D is a boolean operator only allowing for "assignment on =
not equals".=20
> It leads to visually "strange" things like:
>=20
> var x !=3D 3;
>=20
> which would be functionally equivalent to:
>=20
> var x =3D 3;
>=20
> This follows from:
>=20
> var x =3D 3;
> (x, var y) =3D [4, 2];=20
>=20
> Element 0 does not equal 3, so y is not assigned and we get an error. =
There=20
> are more complex use cases where this becomes actually useful in a =
non-trivial=20
> manner.
>=20
> Now, if !=3D is the literal antonym of =3D, then we get things like =
this:
>=20
> var x =3D 3;
> (x, var y) !=3D [4, 2];=20
>=20
> Element 0 does not equal 3, so y gets assigned. That can be useful and =
is=20
> nicely consistent with how '=3D' is used in pattern-matching =
assignment.=20
> Unfortunately it also leads to trivial cases that will not behave as =
most=20
> people would expect on first glance:
>=20
> var x !=3D 3;
>=20
> Variable x is not yet bound to a value, so !=3D always succeeds and =
assigns 3.
>=20
> It's the trivial case that looks odd, while the non-trivial cases =
(where=20
> pattern-matching assignment actually becomes sensible) look sensible.
>=20
> Honestly, I'm torn between:
>=20
> 	a) !=3D is an antonym of =3D
> 	b) !=3D means "not equals", has nothing to do with assignment, =
breaking=20
> symmetry with =3D
> --=20
> Aaron J. Seigo


From samuel.gaist@edeltech.ch  Mon Aug 25 09:13:10 2014
Return-Path: <samuel.gaist@edeltech.ch>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from smtp3.infomaniak.ch (smtp3.infomaniak.ch
 [IPv6:2001:1600:2:5:92b1:1cff:fe01:147])
 by postbox.kde.org (Postfix) with ESMTP id 6F01AB37C47
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 09:13:02 +0000 (UTC)
Received: from [IPv6:2001:620:7a3:701:d9e9:2cd2:a594:fbdd]
 ([IPv6:2001:620:7a3:701:d9e9:2cd2:a594:fbdd]) (authenticated bits=0)
 by smtp3.infomaniak.ch (8.14.5/8.14.5) with ESMTP id s7P9D1A7032742
 (version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NO)
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 11:13:02 +0200
Content-Type: text/plain; charset=iso-8859-1
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
Subject: Re: operators !=
From: Samuel Gaist <samuel.gaist@edeltech.ch>
In-Reply-To: <90BA2858-55DE-4E94-A326-192ECBAEA21C@edeltech.ch>
Date: Mon, 25 Aug 2014 11:13:02 +0200
Content-Transfer-Encoding: quoted-printable
Message-Id: <37BAEAB4-3C5D-458B-B0D8-3DE916FD3D0A@edeltech.ch>
References: <13295920.CxKnveca8t@serenity>
 <90BA2858-55DE-4E94-A326-192ECBAEA21C@edeltech.ch>
To: "funq-devel@kde.org" <funq-devel@kde.org>
X-Mailer: Apple Mail (2.1510)
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 09:13:10 -0000


On 25 ao=FBt 2014, at 11:06, Samuel Gaist <samuel.gaist@edeltech.ch> =
wrote:

> Answer from Aaron
>=20
> Begin forwarded message:
>=20
>> From: "Aaron J. Seigo" <aseigo@kde.org>
>> Subject: Re: operators !=3D
>> Date: 25 ao=FBt 2014 10:12:11 UTC+02:00
>> To: Samuel Gaist <samuel.gaist@edeltech.ch>
>>=20
>> On Monday, August 25, 2014 09.17:03 you wrote:
>>> So if we expend this thing a bit, it might look like:
>>> var x !=3D 3;
>>> which would be the same as:
>>> var x =3D !0x03;
>>> which would translate to
>>> var x =3D 0xFB;
>>=20
>> That's an interesting interpretation, and one of the reasons I'm =
uncomfortable=20
>> with defining '!=3D' as the literal antonym of '=3D' in all manners.
>>=20
>> But no, !=3D is a boolean operator only allowing for "assignment on =
not equals".=20
>> It leads to visually "strange" things like:
>>=20
>> var x !=3D 3;
>>=20
>> which would be functionally equivalent to:
>>=20
>> var x =3D 3;
>>=20
>> This follows from:
>>=20
>> var x =3D 3;
>> (x, var y) =3D [4, 2];=20
>>=20
>> Element 0 does not equal 3, so y is not assigned and we get an error. =
There=20
>> are more complex use cases where this becomes actually useful in a =
non-trivial=20
>> manner.
>>=20
>> Now, if !=3D is the literal antonym of =3D, then we get things like =
this:
>>=20
>> var x =3D 3;
>> (x, var y) !=3D [4, 2];=20
>>=20
>> Element 0 does not equal 3, so y gets assigned. That can be useful =
and is=20
>> nicely consistent with how '=3D' is used in pattern-matching =
assignment.=20
>> Unfortunately it also leads to trivial cases that will not behave as =
most=20
>> people would expect on first glance:
>>=20
>> var x !=3D 3;
>>=20
>> Variable x is not yet bound to a value, so !=3D always succeeds and =
assigns 3.
>>=20
>> It's the trivial case that looks odd, while the non-trivial cases =
(where=20
>> pattern-matching assignment actually becomes sensible) look sensible.
>>=20
>> Honestly, I'm torn between:
>>=20
>> 	a) !=3D is an antonym of =3D
>> 	b) !=3D means "not equals", has nothing to do with assignment, =
breaking=20
>> symmetry with =3D
>> --=20
>> Aaron J. Seigo
>=20

Since it should be a boolean operator, I'd rather go for b.=20
It will probably avoid lots of questioning and "strange logic" looking =
code


From aseigo@kde.org  Mon Aug 25 10:01:51 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 33EC6B37CC1
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 10:01:45 +0000 (UTC)
Received: from serenity.localnet (242.13.24.31.ftth.as8758.net [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 05DF92DC044
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 04:01:44 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: funq-devel@kde.org
Subject: Re: operators !=
Date: Mon, 25 Aug 2014 12:01:22 +0200
Message-ID: <2103691.GDNVOslkEB@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-17-desktop; KDE/4.13.3; x86_64; ; )
In-Reply-To: <37BAEAB4-3C5D-458B-B0D8-3DE916FD3D0A@edeltech.ch>
References: <13295920.CxKnveca8t@serenity>
 <90BA2858-55DE-4E94-A326-192ECBAEA21C@edeltech.ch>
 <37BAEAB4-3C5D-458B-B0D8-3DE916FD3D0A@edeltech.ch>
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart4669332.1H3j7FJMI6";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 10:01:51 -0000


--nextPart4669332.1H3j7FJMI6
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

On Monday, August 25, 2014 11.13:02 Samuel Gaist wrote:
> Since it should be a boolean operator, I'd rather go for b.
> It will probably avoid lots of questioning and "strange logic" lookin=
g code

As long as we are OK with this:

=09var x =3D 3;
=09x =3D 3;
=09(x, var y) =3D someListOrTuple;

being syntactically correct while this is not:

=09var x !=3D 3; // doesn't work; unsurprising
=09x !=3D 3; // works, but also unsurprising
=09x !=3D 4; // fails, but unlike =3D would not throw an error
=09(x, var y) !=3D someListOrTuple; // doesn't work. why?

It's the combination of assignment and equality that causes this incons=
istency=20
with !=3D. Either the language can be fully consistent internally ("!=3D=
 is the=20
negation of =3D") or it can conform to current developer expectations.

Draft documentation for option (b):

=3D=3D=3D=3D
!=3D is a comparison operator that checks for non-equality and always r=
eturns a=20
boolean value as a result. Examples:

=09var x =3D 3;
=09x !=3D 4; // correct, returns true
=09x !=3D 3; // incorrect, returns false

Note: Unlike the equality operator =3D, !=3D may not be used in conjunc=
tion with=20
variable assignment.
=3D=3D=3D=3D

This does make the language a bit simpler, so it has that going for it.=
 I'll=20
sit on this one for a few more days to allow the ideas to settle a bit =
more in=20
my own head and give others an opportunity to weigh in as well ...

=2D-=20
Aaron J. Seigo
--nextPart4669332.1H3j7FJMI6
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlP7CXgACgkQ1rcusafx20O3iACfW0Hc6mBJb/ZRJfkMPftXDlZ1
MoYAniGunS/738JTvnWHIuNK/aASuE6A
=U2Ce
-----END PGP SIGNATURE-----

--nextPart4669332.1H3j7FJMI6--


From heliocastro@gmail.com  Mon Aug 25 15:57:06 2014
Return-Path: <heliocastro@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-qa0-x236.google.com (mail-qa0-x236.google.com
 [IPv6:2607:f8b0:400d:c00::236])
 by postbox.kde.org (Postfix) with ESMTP id 9F3F3B37CA0
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 15:57:00 +0000 (UTC)
Received: by mail-qa0-f54.google.com with SMTP id k15so12584244qaq.13
 for <funq-devel@kde.org>; Mon, 25 Aug 2014 08:57:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=PSuZN8RQWN0N8XVM3U+HzlQG4khkjd73HhthqGM32gA=;
 b=CwYL46sL4atusQiFrybGygZ3F3B9sXENNvU2RDXaXlWvHeMkiHrAYLqGojI6t9Ijpd
 aIdKYRF7somltabIV9dimGpSKx25St9UJ9v8MrCDU75qN2qkJSzq/f3vnrV3GUvLE0sK
 iuLZ2Z3Xyb+2vZTh3SgZQNv6o/DnhXlI9cbenfSWQ1dM4jYkQdpQ56y4Ny14CJqi/vsN
 1Ui5IJITyjq4g7zad25d5C9wjzr5+1M+vqMKYdgB5vCKyrM+M4hW56ZzbCjcRSIfb17g
 DQ2LJpcllquAbgcEOzzmDTiNPle+FfD/cfYmCm2JBOXh2jiL4aNM6sXGJh2PdhdizR+2
 d30g==
MIME-Version: 1.0
X-Received: by 10.224.75.201 with SMTP id z9mr21269774qaj.76.1408982219743;
 Mon, 25 Aug 2014 08:56:59 -0700 (PDT)
Received: by 10.96.204.134 with HTTP; Mon, 25 Aug 2014 08:56:59 -0700 (PDT)
In-Reply-To: <1619666.C6jWci89ii@serenity>
References: <12600DA0-A092-471B-8CEF-7D530CB485AD@edeltech.ch>
 <1619666.C6jWci89ii@serenity>
Date: Mon, 25 Aug 2014 12:56:59 -0300
Message-ID: <CAKPiqoEQHjvPy2323vfOL89EkX5tvguDCyu9-MUkyh=iB8sGpQ@mail.gmail.com>
Subject: Re: Build System
From: Helio Chissini de Castro <heliocastro@gmail.com>
To: funq-devel@kde.org
Content-Type: multipart/alternative; boundary=001a11c301fab3eae10501763cc5
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-Mailman-Approved-At: Mon, 25 Aug 2014 20:27:22 +0000
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Mon, 25 Aug 2014 15:57:06 -0000

--001a11c301fab3eae10501763cc5
Content-Type: text/plain; charset=UTF-8

extra point:  cmake is been in out lives since KDE 4, considering most of
people here ( like me ) play with that in a regular daily basis, would be
sane to
work on that.


On Mon, Aug 25, 2014 at 3:52 AM, Aaron J. Seigo <aseigo@kde.org> wrote:

> On Sunday, August 24, 2014 22.57:56 Samuel Gaist wrote:
> > >From the docs, cmake seems to be one of the choices as a build system
> for
> > >funq.
>
> Only for included native code; I envision three primary ways of using funq:
>
> a) only funq code (with QML if it has a GUI)
> b) funq code (+ QML if GUI) with some small bits of C++ used by the
> QML/funq
> c) C++ application with some funq modules that are used in the C++
> application
>
> For (a), the intention is to have no explicit build system. Just follow the
> on-disk format for a funq package and everything will be handled
> automatically.
>
> For (b) there is the added complication of native compilation in support of
> the funq application. By standardizing on cmake for that, it will allow us
> to
> extend case (a) with a hook to run cmake in the native source dir(s)
>
> For (c) the developer is "on their own" for figuring out the build system,
> though some sample cmake files would be absolutely in order there.
>
> --
> Aaron J. Seigo
> _______________________________________________
> Funq-devel mailing list
> Funq-devel@kde.org
> https://kde.org/mailman/listinfo/funq-devel
>
>

--001a11c301fab3eae10501763cc5
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">extra point: =C2=A0cmake is been in out lives since KDE 4,=
 considering most of people here ( like me ) play with that in a regular da=
ily basis, would be sane to<div>work on that.=C2=A0</div></div><div class=
=3D"gmail_extra">
<br><br><div class=3D"gmail_quote">On Mon, Aug 25, 2014 at 3:52 AM, Aaron J=
. Seigo <span dir=3D"ltr">&lt;<a href=3D"mailto:aseigo@kde.org" target=3D"_=
blank">aseigo@kde.org</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x">
<div class=3D"">On Sunday, August 24, 2014 22.57:56 Samuel Gaist wrote:<br>
&gt; &gt;From the docs, cmake seems to be one of the choices as a build sys=
tem for<br>
&gt; &gt;funq.<br>
<br>
</div>Only for included native code; I envision three primary ways of using=
 funq:<br>
<br>
a) only funq code (with QML if it has a GUI)<br>
b) funq code (+ QML if GUI) with some small bits of C++ used by the QML/fun=
q<br>
c) C++ application with some funq modules that are used in the C++ applicat=
ion<br>
<br>
For (a), the intention is to have no explicit build system. Just follow the=
<br>
on-disk format for a funq package and everything will be handled<br>
automatically.<br>
<br>
For (b) there is the added complication of native compilation in support of=
<br>
the funq application. By standardizing on cmake for that, it will allow us =
to<br>
extend case (a) with a hook to run cmake in the native source dir(s)<br>
<br>
For (c) the developer is &quot;on their own&quot; for figuring out the buil=
d system,<br>
though some sample cmake files would be absolutely in order there.<br>
<span class=3D"HOEnZb"><font color=3D"#888888"><br>
--<br>
Aaron J. Seigo</font></span><br>___________________________________________=
____<br>
Funq-devel mailing list<br>
<a href=3D"mailto:Funq-devel@kde.org">Funq-devel@kde.org</a><br>
<a href=3D"https://kde.org/mailman/listinfo/funq-devel" target=3D"_blank">h=
ttps://kde.org/mailman/listinfo/funq-devel</a><br>
<br></blockquote></div><br></div>

--001a11c301fab3eae10501763cc5--

From aseigo@kde.org  Wed Sep  3 17:57:56 2014
Return-Path: <aseigo@kde.org>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail.bddf.ca (unknown [64.141.113.219])
 by postbox.kde.org (Postfix) with ESMTP id 91CDAB3741F
 for <funq-devel@kde.org>; Wed,  3 Sep 2014 17:57:50 +0000 (UTC)
Received: from serenity.localnet (unknown [31.24.13.242])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mail.bddf.ca (Postfix) with ESMTPSA id 354412DC040
 for <funq-devel@kde.org>; Wed,  3 Sep 2014 11:57:49 -0600 (MDT)
From: "Aaron J. Seigo" <aseigo@kde.org>
To: "funq-devel@kde.org" <funq-devel@kde.org>
Subject: quiet progress to a new milestone
Date: Wed, 03 Sep 2014 19:57:24 +0200
Message-ID: <2234738.uEG6Yf63hB@serenity>
User-Agent: KMail/4.13.3 (Linux/3.11.10-21-desktop; KDE/4.13.3; x86_64; ; )
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1733861.EZXvfdqWxm";
 micalg="pgp-sha1"; protocol="application/pgp-signature"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://mail.kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://mail.kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://mail.kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Wed, 03 Sep 2014 17:57:56 -0000


--nextPart1733861.EZXvfdqWxm
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset="us-ascii"

Hi ...

I've been quietly plonking away on the documentation/specification and =
it is=20
now at a rather exciting milestone. First.. what's new: Kevin contribut=
ed a=20
test framework concept based on discussions we had when he visited the =
other=20
month. I also sketched in documentation for pattern matching, comprehen=
sions,=20
errors and fleshed out operators and types a bit (though both still hav=
e=20
holes). The description of the documentation system and orchestration=20=

(something that will only come much later..) are still missing, but the=
 broad=20
strokes are there.

Enough to give me a very good feel for the language already. Which mean=
s it is=20
time to start writing code and get that iterative process happening whi=
ch will=20
give us code to kick around and either prove or show what needs changin=
g in=20
the documentation.

I'll be tackling the generic module API for the funq command line tool =
first,=20
and producing the project management plugin in tandem so it has a 'user=
'. The=20
project management support (making a new project, packaging a build,=20=

fulfilling dependencies, ...) is pretty straight forward code so makes =
a nice=20
and easy exercise for the funq tool.

Now is a great time for people to speak up about what doesn't make sens=
e in=20
the docs and hopefully once I've laid down a few of the first bricks in=
 funq=20
you can start playing with things as well ...=20

=2D-=20
Aaron J. Seigo
--nextPart1733861.EZXvfdqWxm
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part.
Content-Transfer-Encoding: 7Bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iEYEABECAAYFAlQHVoQACgkQ1rcusafx20M4kgCeMQ/GaMSKr5XgJ1eGe4etvDq2
vYYAn39SyCJrcQTVexP2NjVR0/v16NIn
=ozXE
-----END PGP SIGNATURE-----

--nextPart1733861.EZXvfdqWxm--


From richmoore44@gmail.com  Fri Sep  5 14:11:29 2014
Return-Path: <richmoore44@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-qg0-x234.google.com (mail-qg0-x234.google.com
 [IPv6:2607:f8b0:400d:c04::234])
 by postbox.kde.org (Postfix) with ESMTP id DD54AB37CF2
 for <funq-devel@kde.org>; Fri,  5 Sep 2014 14:11:23 +0000 (UTC)
Received: by mail-qg0-f52.google.com with SMTP id z60so11574849qgd.25
 for <funq-devel@kde.org>; Fri, 05 Sep 2014 07:11:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=zb3mksV4r9a1MtZpfLC1pvj/CnKDkq/OrqdgbuzhHU4=;
 b=BkVlLcpKqON82N1gSCFzso7FyYzFeATFUiIZXfyRxcQFtoWAlxpse85/UJI5FyhD5O
 GFMKj3dbnvY3sAE3DfKrEfwkXBx5q3A/Q2l7Rbkg3HDF0RTxJH1QbyDrMH0uttxoVJbA
 bbX99XVBojecrne2vA3xXxgioBGMxNiN1YMfPRQNLdGCDt/H2xnd6YZg0ErmTGVJd3mv
 uOIY6GgQCJvK1SDrEvWhUnYB0RqdM1CEH/QykD96TOdhmB5ImcdNwQAy6q3TodUgxf+t
 s+NT5+uuEAAujIX3GMz8Jm5wITO7paHvnlVqKpo5R7StX4tvs57Lt0ykqDMC3FAnX/fJ
 OuYw==
MIME-Version: 1.0
X-Received: by 10.224.46.138 with SMTP id j10mr18432158qaf.85.1409926283238;
 Fri, 05 Sep 2014 07:11:23 -0700 (PDT)
Received: by 10.224.163.82 with HTTP; Fri, 5 Sep 2014 07:11:23 -0700 (PDT)
In-Reply-To: <201408182044.23775.notmart@gmail.com>
References: <1427936.1qOos1b2Dj@serenity>
 <201408182044.23775.notmart@gmail.com>
Date: Fri, 5 Sep 2014 15:11:23 +0100
Message-ID: <CAMp7mVu+nx0qb3fwcjGBNtRTRLwRzVV27TX6y+7RSmyzwEFnxQ@mail.gmail.com>
Subject: Re: pre-boarding call
From: Richard Moore <richmoore44@gmail.com>
To: funq-devel@kde.org
Content-Type: multipart/alternative; boundary=001a11c1f0da45a40a0502520b53
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://mail.kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://mail.kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://mail.kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 05 Sep 2014 14:11:29 -0000

--001a11c1f0da45a40a0502520b53
Content-Type: text/plain; charset=ISO-8859-1

On 18 August 2014 19:44, Marco Martin <notmart@gmail.com> wrote:

> On Monday 18 August 2014, Aaron J. Seigo wrote:
> > Do you prefer "one tool to rule them all" or "a suite of separately named
> > tools, one per task"?
>
> would go for one to rule them all with syntax like
> funq command subcommand [options]
>

With this approach you can also easily make the command check the value of
argv[0] and select the command from that making it easy to get the best of
both worlds if someone prefers multiple commands.

Rich.

--001a11c1f0da45a40a0502520b53
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote">On 1=
8 August 2014 19:44, Marco Martin <span dir=3D"ltr">&lt;<a href=3D"mailto:n=
otmart@gmail.com" target=3D"_blank">notmart@gmail.com</a>&gt;</span> wrote:=
<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-lef=
t:1px #ccc solid;padding-left:1ex"><span class=3D"">On Monday 18 August 201=
4, Aaron J. Seigo wrote:<br></span><span class=3D"">&gt; Do you prefer &quo=
t;one tool to rule them all&quot; or &quot;a suite of separately named<br>
&gt; tools, one per task&quot;?<br>
<br>
</span>would go for one to rule them all with syntax like<br>
funq command subcommand [options]<br></blockquote><div><br></div><div>With =
this approach you can also easily make the command check the value of argv[=
0] and select the command from that making it easy to get the best of both =
worlds if someone prefers multiple commands.</div><div><br></div><div>Rich.=
</div><div>=A0</div></div></div></div>

--001a11c1f0da45a40a0502520b53--

From woodsjaya@gmail.com  Fri Sep  5 15:58:21 2014
Return-Path: <woodsjaya@gmail.com>
X-Original-To: funq-devel@kde.org
Delivered-To: funq-devel@localhost.kde.org
Received: from mail-pa0-x233.google.com (mail-pa0-x233.google.com
 [IPv6:2607:f8b0:400e:c03::233])
 by postbox.kde.org (Postfix) with ESMTP id AEBB1B37D15
 for <funq-devel@kde.org>; Fri,  5 Sep 2014 15:58:15 +0000 (UTC)
Received: by mail-pa0-f51.google.com with SMTP id rd3so22323042pab.24
 for <funq-devel@kde.org>; Fri, 05 Sep 2014 08:58:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=from:to:subject:date:message-id:user-agent:in-reply-to:references
 :mime-version:content-transfer-encoding:content-type;
 bh=TSFlMDYH2n1Py1QljMQOb6ixwEU6Iuq5lV0qIJ3yefg=;
 b=czszsgWhGnAFy9Kwgdvq7XqfUY/FRpkb2t40MUTyaPZKsEOjlJi1iR+/Kglbr7zPPO
 KqjWztenWfQcGkkVepQYxryyZ+xGZiyuaDnmCtO5H0R7jq5h0aklIg96Yop9+GN3YJHE
 LnIwTtI7HLy0rMPURYYEYZx4TYnmV1FAet2AOvAkgeE7gkaKdRWBWIF2SJX3yZTrMq3Q
 beSsVjGopS0K19j8P4oKq/4O6QGZ40FmcJ0oznErOTKChF7uwUQ+rXYgcNl7N+ibl1h6
 Wfo9NA39xH0m1YdMh63rdBJWvD43QfROGnO7H8FiJE3oYlaxiFNguqScBkGF4fSqaXXs
 +iEw==
X-Received: by 10.70.128.195 with SMTP id nq3mr23374920pdb.158.1409932694927; 
 Fri, 05 Sep 2014 08:58:14 -0700 (PDT)
Received: from verle.woods (66-215-132-194.static.reno.nv.charter.com.
 [66.215.132.194])
 by mx.google.com with ESMTPSA id fk5sm2062467pbc.53.2014.09.05.08.58.13
 for <funq-devel@kde.org>
 (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
 Fri, 05 Sep 2014 08:58:14 -0700 (PDT)
From: woodsjaya@gmail.com
To: funq-devel@kde.org
Subject: Re: pre-boarding call
Date: Fri, 05 Sep 2014 08:58:12 -0700
Message-ID: <11016757.Lil9MilsTb@verle.woods>
User-Agent: KMail/4.13.3 (Linux/3.15.10-201.fc20.x86_64; KDE/4.13.3; x86_64; ;
 )
In-Reply-To: <1427936.1qOos1b2Dj@serenity>
References: <1427936.1qOos1b2Dj@serenity>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
X-Scanned-By: MIMEDefang 2.71 on 46.4.96.248
X-BeenThere: funq-devel@kde.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: <funq-devel.kde.org>
List-Unsubscribe: <https://mail.kde.org/mailman/options/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=unsubscribe>
List-Archive: <http://mail.kde.org/pipermail/funq-devel>
List-Post: <mailto:funq-devel@kde.org>
List-Help: <mailto:funq-devel-request@kde.org?subject=help>
List-Subscribe: <https://mail.kde.org/mailman/listinfo/funq-devel>,
 <mailto:funq-devel-request@kde.org?subject=subscribe>
X-List-Received-Date: Fri, 05 Sep 2014 15:58:21 -0000

On Monday, August 18, 2014 04:48:25 PM Aaron J. Seigo wrote:

> Do you prefer "one tool to rule them all" or "a suite of separately named
> tools, one per task"?
> 
> What are your thoughts on what would make for an excellent command input
> system?

As a contrarian point of view, I'd suggest issuing the func command which 
changes the mode. After that have a suite of separately named tools, one per 
task. One of the tools would be the funcend command. This would give a nice 
play area for functionality.


